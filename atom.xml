<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SakuraTears的博客</title>
  
  <subtitle>越努力越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/JavaZWT/JavaZWT.github.io/"/>
  <updated>2018-06-02T10:57:43.549Z</updated>
  <id>https://github.com/JavaZWT/JavaZWT.github.io/</id>
  
  <author>
    <name>SakuraTears</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式之工厂模式</title>
    <link href="https://github.com/JavaZWT/JavaZWT.github.io/blog/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F20180602/"/>
    <id>https://github.com/JavaZWT/JavaZWT.github.io/blog/Java设计模式之工厂模式20180602/</id>
    <published>2018-06-02T09:45:54.000Z</published>
    <updated>2018-06-02T10:57:43.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>工厂模式，顾名思义，即用来实例化一个个对象的模式。把相同类别的对象用工厂模式代替new生成，提高代码质量和系统扩展性。</p><h2 id="二、写法分类"><a href="#二、写法分类" class="headerlink" title="二、写法分类"></a>二、写法分类</h2><p>   工厂模式的写法通常分为四类，简单工厂、多方法工厂、普通工厂、抽象工厂。<br>   在分别说明他们之前，我们先创建几个对象。<br>   抽象的Animals类，Plants类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animals</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//动物的描述  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">desc</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>及Animals的三个基本实现，Tiger类、Bird类、Fish类，Plants的实现Tree类。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> <span class="keyword">extends</span>  <span class="title">Animals</span></span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"这是一只老虎"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是一只老虎"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span>  <span class="title">Animals</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"这是一只鸟"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是一只鸟"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">extends</span> <span class="title">Animals</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"这是一条鱼"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是一条鱼"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Plants</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//植物的描述  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">desc</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> <span class="keyword">extends</span> <span class="title">Plants</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是一棵树"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="下面来说说这四种工厂模式。"><a href="#下面来说说这四种工厂模式。" class="headerlink" title="下面来说说这四种工厂模式。"></a>下面来说说这四种工厂模式。</h6><h5 id="1、简单工厂模式"><a href="#1、简单工厂模式" class="headerlink" title="1、简单工厂模式"></a>1、简单工厂模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalsFactory</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Tiger=<span class="string">"Tiger"</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Bird=<span class="string">"Bird"</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Fish=<span class="string">"Fish"</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animals <span class="title">getAnimal</span><span class="params">(String name)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">switch</span> (name)&#123;  </span><br><span class="line">            <span class="keyword">case</span> Tiger:  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tiger();  </span><br><span class="line">            <span class="keyword">case</span> Bird:  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Bird();  </span><br><span class="line">            <span class="keyword">case</span> Fish:  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Fish();  </span><br><span class="line">            <span class="keyword">default</span>:  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animals a=AnimalsFactory.getAnimal(<span class="string">"Tiger"</span>);  </span><br><span class="line">a.desc();</span><br></pre></td></tr></table></figure><p>说明：简单工厂模式易于理解，但扩展性差，如我想在增加一种动物，则还需要修改逻辑内容。而且如果设置额外入参，对参数的管理也较为不便。</p><h5 id="2-多方法工厂模式"><a href="#2-多方法工厂模式" class="headerlink" title="2.多方法工厂模式"></a>2.多方法工厂模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalsFactory</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animals <span class="title">getTiger</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tiger();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animals <span class="title">getBird</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bird();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animals <span class="title">getFish</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Fish();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="调用：-1"><a href="#调用：-1" class="headerlink" title="调用："></a>调用：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animals b= AnimalsFactory.getFish();  </span><br><span class="line">b.desc();</span><br></pre></td></tr></table></figure><p>说明：这种模式使用方便，容错率高，且可适应不同需求，如我现在想创建一个羽毛为蓝色的小鸟，明显多方法工厂模式比简单工厂模式实现简单。</p><h5 id="3-普通工厂模式"><a href="#3-普通工厂模式" class="headerlink" title="3.普通工厂模式"></a>3.普通工厂模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PlantsFactory</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Plants <span class="title">getPlant</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeFactory</span> <span class="keyword">extends</span> <span class="title">PlantsFactory</span></span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Plants <span class="title">getPlant</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tree();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="调用：-2"><a href="#调用：-2" class="headerlink" title="调用："></a>调用：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PlantsFactory p=<span class="keyword">new</span> TreeFactory();  </span><br><span class="line">p.getPlant().desc();</span><br></pre></td></tr></table></figure><p>说明：这种工厂模式划分成两层：抽象工厂层+具体的工厂子类层。 当我们不需要Tree，或者需要其他时，都可以新增或删除一个类实现，这种工厂模式看着很简洁明了易于理解。</p><h5 id="4-抽象工厂模式"><a href="#4-抽象工厂模式" class="headerlink" title="4.抽象工厂模式"></a>4.抽象工厂模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="keyword">static</span>&#123;  </span><br><span class="line">        <span class="comment">// do something  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="comment">//do something  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">getT</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BirdFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span>&lt;<span class="title">Animals</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animals <span class="title">getT</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bird();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span>&lt;<span class="title">Plants</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Plants <span class="title">getT</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tree();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="调用：-3"><a href="#调用：-3" class="headerlink" title="调用："></a>调用：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AbstractFactory factory= <span class="keyword">new</span> TreeFactory();  </span><br><span class="line">Tree t=(Tree)factory.getT();  </span><br><span class="line">t.desc();</span><br></pre></td></tr></table></figure><p>说明：可以看出，这种方法把工厂本身也抽象了，如果对于两个或多个简单工厂模式，相似点较多，比如PlantsFactory和AnimalsFactory，作为生物，它们也有相似之处，dosomething部分的代码。其实抽象工厂模式跟普通工厂模式的区别就在于把工厂也抽象了一层。</p><h2 id="三、工厂模式实例"><a href="#三、工厂模式实例" class="headerlink" title="三、工厂模式实例"></a>三、工厂模式实例</h2><h5 id="1-Spring-Bean对象的创建-抽象工厂模式的使用"><a href="#1-Spring-Bean对象的创建-抽象工厂模式的使用" class="headerlink" title="1.Spring Bean对象的创建   抽象工厂模式的使用"></a>1.Spring Bean对象的创建   抽象工厂模式的使用</h5><p><img src="/images/pasted-1.png" alt="upload successful"></p><h5 id="2-线程池-Executors-多方法工厂模式的使用"><a href="#2-线程池-Executors-多方法工厂模式的使用" class="headerlink" title="2.线程池 Executors  多方法工厂模式的使用"></a>2.线程池 Executors  多方法工厂模式的使用</h5><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>其他：Spring框架中大量使用了工厂模式，单例模式等设计模式，有时间阅读些源代码，对技术能力的提升有很大帮助。</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><h6 id="1-https-blog-csdn-net-zxt0601-article-details-52798423"><a href="#1-https-blog-csdn-net-zxt0601-article-details-52798423" class="headerlink" title="1.https://blog.csdn.net/zxt0601/article/details/52798423"></a>1.<a href="https://blog.csdn.net/zxt0601/article/details/52798423" target="_blank">https://blog.csdn.net/zxt0601/article/details/52798423</a></h6><h6 id="2-Spring-4-0-源码"><a href="#2-Spring-4-0-源码" class="headerlink" title="2.Spring 4.0 源码"></a>2.Spring 4.0 源码</h6><h6 id="3-JDK8源码"><a href="#3-JDK8源码" class="headerlink" title="3.JDK8源码"></a>3.JDK8源码</h6><h2 id="五、GitHub代码地址"><a href="#五、GitHub代码地址" class="headerlink" title="五、GitHub代码地址"></a>五、GitHub代码地址</h2><p><a href="https://github.com/JavaZWT/designPatterns" target="_blank">https://github.com/JavaZWT/designPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;工厂模式，顾名思义，即用来实例化一个个对象的模式。把相同类别的对象用工厂模式代替new生成，提高代码质量和系统扩展性。&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式之单例模式</title>
    <link href="https://github.com/JavaZWT/JavaZWT.github.io/blog/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F20180602/"/>
    <id>https://github.com/JavaZWT/JavaZWT.github.io/blog/Java设计模式之单例模式20180602/</id>
    <published>2018-06-02T04:00:00.000Z</published>
    <updated>2018-06-02T10:47:48.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>单例模式，顾名思义，即只产生唯一实例的设计模式。一个类只有一个实例,即一个类只有一个对象实例。</p><h2 id="二、优点"><a href="#二、优点" class="headerlink" title="二、优点"></a>二、优点</h2><h6 id="1-减少系统开销及资源消耗。"><a href="#1-减少系统开销及资源消耗。" class="headerlink" title="1.减少系统开销及资源消耗。"></a>1.减少系统开销及资源消耗。</h6><h6 id="2-设置全局访问点，优化共享资源的使用。"><a href="#2-设置全局访问点，优化共享资源的使用。" class="headerlink" title="2.设置全局访问点，优化共享资源的使用。"></a>2.设置全局访问点，优化共享资源的使用。</h6><p>注：对于以上优点，我们可以拿Java配置读取举例，对于固定的配置文件，我们完全可以设计一个单例类，读取配置文件，而避免每次都读取文件造成的系统开销，同时也优化了配置文件的使用。</p><h2 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h2><h6 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1.Servlet"></a>1.Servlet</h6><h6 id="2-开源框架Spring中的默认bean配置模式"><a href="#2-开源框架Spring中的默认bean配置模式" class="headerlink" title="2.开源框架Spring中的默认bean配置模式"></a>2.开源框架Spring中的默认bean配置模式</h6><h6 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3.数据库连接池"></a>3.数据库连接池</h6><h6 id="4-项目中对于配置文件的处理"><a href="#4-项目中对于配置文件的处理" class="headerlink" title="4.项目中对于配置文件的处理"></a>4.项目中对于配置文件的处理</h6><h6 id="等等"><a href="#等等" class="headerlink" title="等等"></a>等等</h6><h2 id="四、写法分类"><a href="#四、写法分类" class="headerlink" title="四、写法分类"></a>四、写法分类</h2><h6 id="1-懒汉式单例模式（非线程安全）"><a href="#1-懒汉式单例模式（非线程安全）" class="headerlink" title="1.懒汉式单例模式（非线程安全）"></a>1.懒汉式单例模式（非线程安全）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_Singleton_01</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo_Singleton_01 instance=<span class="keyword">null</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo_Singleton_01</span><span class="params">()</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo_Singleton_01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;  </span><br><span class="line">            instance=<span class="keyword">new</span> Demo_Singleton_01();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这种写法不常用，虽然实现了懒加载（lazy-loading），但未考虑线程安全问题，不适用于多线程情况。</p><h6 id="2-懒汉式单例模式（线程安全）"><a href="#2-懒汉式单例模式（线程安全）" class="headerlink" title="2.懒汉式单例模式（线程安全）"></a>2.懒汉式单例模式（线程安全）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_Singleton_02</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo_Singleton_02 instance=<span class="keyword">null</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Demo_Singleton_02 <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;  </span><br><span class="line">            instance=<span class="keyword">new</span> Demo_Singleton_02();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo_Singleton_02</span><span class="params">()</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：相对于demo1，这种写法实现了懒加载（lazy-loading），也考虑到线程安全问题，可适用于多线程情况。</p><h6 id="3-饿汉式单例模式"><a href="#3-饿汉式单例模式" class="headerlink" title="3.饿汉式单例模式"></a>3.饿汉式单例模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_Singleton_03</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Demo_Singleton_03 instance=<span class="keyword">new</span> Demo_Singleton_03();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo_Singleton_03</span><span class="params">()</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo_Singleton_03 <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：饿汉式单例模式的明显缺点是无法实现懒加载，在类被创建后就创建了唯一实例。</p><h6 id="4-饿汉式单例模式（变种）"><a href="#4-饿汉式单例模式（变种）" class="headerlink" title="4.饿汉式单例模式（变种）"></a>4.饿汉式单例模式（变种）</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_Singleton_04</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Demo_Singleton_04 instance=<span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">static</span>&#123;  </span><br><span class="line">        instance=<span class="keyword">new</span> Demo_Singleton_04();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo_Singleton_04</span><span class="params">()</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo_Singleton_04 <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：可以看到这种方法和demo3的性质是一样的，只不过改为了静态块加载唯一实例。</p><h6 id="5-静态内部类模式"><a href="#5-静态内部类模式" class="headerlink" title="5.静态内部类模式"></a>5.静态内部类模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_Singleton_05</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Demo_Singleton_05 instance=<span class="keyword">new</span> Demo_Singleton_05();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo_Singleton_05</span><span class="params">()</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Demo_Singleton_05 <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> Singleton.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这种方法既可以实现懒加载，也能保证线程安全。</p><h6 id="6-双重锁单例模式"><a href="#6-双重锁单例模式" class="headerlink" title="6.双重锁单例模式"></a>6.双重锁单例模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_Singleton_06</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Demo_Singleton_06 instance=<span class="keyword">null</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Demo_Singleton_06</span><span class="params">()</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo_Singleton_06 <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">synchronized</span>(Demo_Singleton_06.class)&#123;  </span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;  </span><br><span class="line">                    instance=<span class="keyword">new</span> Demo_Singleton_06();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：可以看出，双重锁单例模式只有在第一次创建对象的时候才同步，因为创建对象后就没必要了，（实例唯一）相比懒汉式，效率明显提高，相比饿汉式，不用在类加载的时候就创建实例，而是等到什么时候想调用的时候在创建实例。线程安全，效率高。</p><h6 id="7-枚举法"><a href="#7-枚举法" class="headerlink" title="7.枚举法"></a>7.枚举法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Demo_Singleton_07 &#123;  </span><br><span class="line">    instance;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：枚举法代码十分直观，线程安全，但是无法实现懒加载。</p><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><h6 id="1-https-blog-csdn-net-goodlixueyong-article-details-51935526"><a href="#1-https-blog-csdn-net-goodlixueyong-article-details-51935526" class="headerlink" title="1.https://blog.csdn.net/goodlixueyong/article/details/51935526"></a>1.<a href="https://blog.csdn.net/goodlixueyong/article/details/51935526" target="_blank">https://blog.csdn.net/goodlixueyong/article/details/51935526</a></h6><h6 id="2-https-www-cnblogs-com-Ycheng-p-7169381-html"><a href="#2-https-www-cnblogs-com-Ycheng-p-7169381-html" class="headerlink" title="2.https://www.cnblogs.com/Ycheng/p/7169381.html"></a>2.<a href="https://www.cnblogs.com/Ycheng/p/7169381.html" target="_blank">https://www.cnblogs.com/Ycheng/p/7169381.html</a></h6><h2 id="六、GitHub代码地址"><a href="#六、GitHub代码地址" class="headerlink" title="六、GitHub代码地址"></a>六、GitHub代码地址</h2><p><a href="https://github.com/JavaZWT/designPatterns" target="_blank">https://github.com/JavaZWT/designPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;单例模式，顾名思义，即只产生唯一实例的设计模式。一个类只有一个实例,即一个类只有一个对象实例。&lt;/p&gt;
&lt;h2 id=&quot;二、
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/JavaZWT/JavaZWT.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/JavaZWT/JavaZWT.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://github.com/JavaZWT/JavaZWT.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/JavaZWT/JavaZWT.github.io/blog/hello-world20180531/"/>
    <id>https://github.com/JavaZWT/JavaZWT.github.io/blog/hello-world20180531/</id>
    <published>2018-05-31T15:15:00.000Z</published>
    <updated>2018-06-02T03:57:20.405Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="技术" scheme="https://github.com/JavaZWT/JavaZWT.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://github.com/JavaZWT/JavaZWT.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
