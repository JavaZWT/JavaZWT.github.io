<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SakuraTears的博客</title>
  
  <subtitle>越努力越幸运</subtitle>
  <link href="https://www.sakuratears.top/atom.xml" rel="self"/>
  
  <link href="https://www.sakuratears.top/"/>
  <updated>2021-06-27T11:28:34.962Z</updated>
  <id>https://www.sakuratears.top/</id>
  
  <author>
    <name>SakuraTears</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 锁相关问题</title>
    <link href="https://www.sakuratears.top/blog/Java-%E9%94%81%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html"/>
    <id>https://www.sakuratears.top/blog/Java-%E9%94%81%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98.html</id>
    <published>2021-06-27T11:15:00.000Z</published>
    <updated>2021-06-27T11:28:34.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近总结了 Java 锁的一些相关问题，整理如下，希望对自己和大家的学习略有帮助。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁通俗来说是<strong>当线程请求一个由其它线程持有的对象锁时，该线程会阻塞，而当线程请求由自己持有的对象锁时，如果该锁是可重入锁，请求就会成功，否则阻塞</strong>。</p><p>我们可以根据一个简单例子来看下。</p><p>这儿我们首先构造一个不可重入锁，也就是当该线程持有锁后，再进来获取锁的线程（包括自己）都会失败（或者等待锁释放）。</p><p>这儿我们用等待来模拟，便于更直观了解不可重入锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLocked = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(isLocked)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;等待Thread：&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot;释放锁&quot;</span>);</span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        isLocked = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        isLocked = <span class="keyword">false</span>;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码可以看到，当一个线程拿到锁后，另外线程（包括自己）在获得锁时需要等待当前线程释放锁。</p><p>我们写个测试类来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    MyLock lock = <span class="keyword">new</span> MyLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 尝试加锁&quot;</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 加锁成功&quot;</span>);</span><br><span class="line">        doSomethingAgain();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 尝试解锁&quot;</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 解锁成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingAgain</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 尝试加锁&quot;</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 加锁成功&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;do Something&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 尝试解锁&quot;</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread:&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot; 解锁成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        LockTest test = <span class="keyword">new</span> LockTest();</span><br><span class="line">        test.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述测试代码的意思是一个线程加锁后，在用该线程去尝试获取锁（可重入）。</p><p>可以看到如下输出：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-749.png"></p><p>而后该段程序会卡住（死锁），因为自己拿到锁还未释放，不能再去获取锁。</p><p>我们知道 Java 中的 <code>ReentrantLock</code> 是可重入锁，我们用它来替换我们的 <code>MyLock</code> 再来测试一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br></pre></td></tr></table></figure><p>可以看到当前线程是可以重入的。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-750.png"></p><h2 id="synchronized-是不是可重入锁"><a href="#synchronized-是不是可重入锁" class="headerlink" title="synchronized 是不是可重入锁"></a>synchronized 是不是可重入锁</h2><p>根据上面定义，我们简单来找个例子验证下即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> <span class="keyword">extends</span> <span class="title">MySynchronized</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadId:&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        doSomethingAgain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomethingAgain</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.superDoSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedTest test = <span class="keyword">new</span> SynchronizedTest();</span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadId:&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        test.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySynchronized</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">superDoSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadId:&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;do Something&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如下输出：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-751.png"></p><p>说明 <code>synchronized</code> 是<strong>可重入</strong>的。</p><p>关于更多 <code>synchronized</code> 内容请看这篇文章 <a href="http://www.sakuratears.top/blog/Java-synchronized%E9%94%81%E6%9C%BA%E5%88%B6.html">Java synchronized锁机制</a> .</p><h2 id="ReentrantLock-可重入实现"><a href="#ReentrantLock-可重入实现" class="headerlink" title="ReentrantLock 可重入实现"></a>ReentrantLock 可重入实现</h2><p><code>ReentrantLock</code> 底层是根据一个状态 <code>state</code> 参数来控制可重入的，默认为0，加锁后状态会变更。</p><ol><li><p>一个线程尝试获取锁时，判断 <code>state</code> 是不是0，如果是0，表示没锁，就尝试获取锁；</p></li><li><p>如果不是0，判断是不是当前线程持有的改锁，是的话就改变 <code>state</code>状态（可重入）；</p></li><li><p>如果不是当前线程，说明其他线程正在持有锁，返回加锁失败（或者根据等待时间尝试等待锁释放）。</p></li></ol><p><strong>注意</strong>，这儿有以下几点要注意：</p><ul><li>重入是有次数限制的，根据代码来看，最大值为 Integer 最大值。</li></ul><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-752.png"></p><ul><li><code>ReentrantLock</code> 内部实现了公平锁和非公平锁两种。非公平锁就是线程自由尝试抢占锁；公平锁会有一个线程队列，获取锁时根据队列里数据的先后顺序尝试获取锁。</li></ul><p>更多详细内容可以参考这篇文章 <a href="https://www.sakuratears.top/blog/%E8%B0%88%E8%B0%88ReentrantLock.html">ReentrantLock那些事</a> 。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>死锁指的是多个线程因竞争资源而造成的一种僵局（相互等待），若无外部作用，这些线程将一直这样下去。</p><h3 id="死锁的必要条件"><a href="#死锁的必要条件" class="headerlink" title="死锁的必要条件"></a>死锁的必要条件</h3><ul><li>互斥条件：指的是资源在一定时间内只能由一个线程占有并使用。如果有其他线程请求该资源，需要等待。</li><li>不剥夺条件：指的是当前线程在未使用完资源之前，不会被其他线程剥夺，资源只能由自己释放。</li><li>请求和保持条件：指的是线程1至少已经占用了一个资源，比如A，又提出了新的资源B请求，而此时资源B已被线程2占用，此时请求会被阻塞，线程1此时不会释放资源A。</li><li>循环等待条件：存在一种线程资源的循环等待链，链中每一个线程已获得的资源同时被链中下一个线程所请求。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们来看一个死锁的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeadLock</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeadLock thread1 = <span class="keyword">new</span> DeadLock(<span class="number">0</span>);</span><br><span class="line">        DeadLock thread2 = <span class="keyword">new</span> DeadLock(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(thread1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(thread2).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;doSomethingWith O1&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;doSomethingWith O2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;doSomethingWith O2&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;doSomethingWith O1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码很好理解：我们根据 <code>type</code>参数来决定先锁定 <code>o1</code>还是<code>o2</code>，然后启动两个线程，一个先锁定  <code>o1</code>，一个先锁定 <code>o2</code>，而后就会出现死锁。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-753.png"></p><h3 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h3><ol><li><p>加锁顺序(线程按照一定的顺序加锁）</p><p>可以通过 <code>join</code>等方法处理。</p></li><li><p>加锁时限(线程获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁)</p><p>要注意如果有对占用资源的处理逻辑，释放锁时应回滚该逻辑。</p></li><li><p>如果是线程池访问模式，我们可以使用单个线程池配合缓存队列来解决。</p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> type = random.nextInt(<span class="number">2</span>);</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> DeadLock(type));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们将 <code>main</code>方法里改成如下内容，可以看到会出现死锁，如果出现这种情况该如何处理呢？</p><p>我们重新定义线程池，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">        .setNameFormat(<span class="string">&quot;demo-pool-%d&quot;</span>).build();</span><br><span class="line">   </span><br><span class="line"><span class="keyword">static</span> ExecutorService executorService =</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">5L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">100</span>),namedThreadFactory,<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> type = random.nextInt(<span class="number">2</span>);</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> DeadLock(type));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下输出：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-754.png"></p><p>这其实已经相当于同步调用了。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上述文章，我们了解到了 Java 中关于锁的一些内容。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近总结了 Java 锁的一些相关问题，整理如下，希望对自己和大家的学习略有帮助。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;可重入锁&quot;&gt;&lt;a href=&quot;#可重入锁&quot; class=&quot;headerlink&quot; title=&quot;可重入锁&quot;&gt;&lt;/a&gt;可重入锁&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://www.sakuratears.top/tags/Java/"/>
    
    <category term="锁" scheme="https://www.sakuratears.top/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（9）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%889%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%889%EF%BC%89.html</id>
    <published>2021-06-20T14:03:00.000Z</published>
    <updated>2021-06-20T14:04:29.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch-映射参数"><a href="#Elasticsearch-映射参数" class="headerlink" title="Elasticsearch 映射参数"></a>Elasticsearch 映射参数</h2><h3 id="analyzer"><a href="#analyzer" class="headerlink" title="analyzer"></a>analyzer</h3><p>定义文本字段的分词器，默认对索引和查询都是有效的。</p><p>假设不用分词器，我们先来看一下索引的结果，创建一个索引并添加一个文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;定义文本字段的分词器，默认对索引和查询都是有效的。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看词条向量（term vectors）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_termvectors/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;fields&quot;: [&quot;title&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">124</span>,</span><br><span class="line">  <span class="attr">&quot;term_vectors&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;field_statistics&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;sum_doc_freq&quot;</span> : <span class="number">22</span>,</span><br><span class="line">        <span class="attr">&quot;doc_count&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;sum_ttf&quot;</span> : <span class="number">23</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;义&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;分&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">7</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">8</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;和&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">15</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">16</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">17</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;器&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">9</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">9</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;字&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">4</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">5</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;定&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">0</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;对&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">12</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">13</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">14</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;引&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">14</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">15</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">16</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;效&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">21</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">22</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">23</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;文&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">2</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;是&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">19</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">20</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">21</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;有&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">20</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">21</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">22</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;本&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">3</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">3</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;查&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">16</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">17</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">18</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;段&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">5</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">5</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;的&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">6</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">22</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">23</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">24</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;索&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">13</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">14</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">15</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;认&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">11</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">12</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">13</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;词&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">8</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">9</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;询&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">17</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">18</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">19</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;都&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">18</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">19</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">20</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;默&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">10</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">11</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">12</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，默认情况下，中文就是一个字一个字的分，这种分词方式没有任何意义。如果这样分词，查询就只能一个字一个字来查，如下，这样查询没有任何意义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;定&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们要根据实际情况，配置合适的分词器。</p><p>给字段设定分词器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存储文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;定义文本字段的分词器，默认对索引和查询都是有效的。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看词条向量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_termvectors/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;fields&quot;: [&quot;title&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">121</span>,</span><br><span class="line">  <span class="attr">&quot;term_vectors&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;field_statistics&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;sum_doc_freq&quot;</span> : <span class="number">12</span>,</span><br><span class="line">        <span class="attr">&quot;doc_count&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;sum_ttf&quot;</span> : <span class="number">13</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;分词器&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">4</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">7</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;和&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">8</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">16</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">17</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;字段&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">2</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;定义&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">0</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;对&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">6</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">13</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">14</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;文本&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;有效&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">11</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">21</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">23</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;查询&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">9</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">17</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">19</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;的&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">3</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">7</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">12</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">23</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">24</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;索引&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">7</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">14</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">16</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;都是&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">10</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">19</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">21</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;默认&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;term_freq&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">&quot;position&quot;</span> : <span class="number">5</span>,</span><br><span class="line">              <span class="attr">&quot;start_offset&quot;</span> : <span class="number">11</span>,</span><br><span class="line">              <span class="attr">&quot;end_offset&quot;</span> : <span class="number">13</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以通过词去搜索了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;定义&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="search-analyzer"><a href="#search-analyzer" class="headerlink" title="search_analyzer"></a>search_analyzer</h3><p>查询时候的分词器。默认情况下，如果没有配置 search_analyzer ，则查询时首先查看有没有 search_analyzer  ，有的话，就用 search_analyzer  来进行分词，如果没有，则看看有没有 analyzer ，如果有，则用 analyzer 进行分词。否则使用 ES 默认的分词器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="normalizer"><a href="#normalizer" class="headerlink" title="normalizer"></a>normalizer</h3><p>normalizer 参数用于解析前（索引或查询）的标准化配置。</p><p>比如说，在 ES 中，对于一些我们不想切分的字符串，我们会通常将其设为 keyword，搜索时也是使用整个词进行搜索。</p><p>比如 如果在索引前没有做好数据清洗，导致大小写不一致，例如 SakuraTears 和 sakuratears ，此时，我们就可以使用 normalizer 在索引之前以及查询之前进行文档的标准化。</p><p>反例，创建一个名为blog的索引，设置 author 字段类型为 keyword</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;author&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加两个文档，大小写不一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;author&quot;:&quot;sakuratears&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;author&quot;:&quot;SakuraTears&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行搜索。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;author&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;sakuratears&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到只能搜索到一个文档，受字母大小写影响。</p><p>如果使用 normalizer，可以在索引和查询时分别对文档进行预处理。</p><p>normalizer定义方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;normalizer&quot;:&#123;</span><br><span class="line">        &quot;my_normalizer&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;custom&quot;,</span><br><span class="line">          &quot;filter&quot;:[&quot;lowercase&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;author&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;normalizer&quot;: &quot;my_normalizer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 settings 中定义 normalizer ，然后在 mappings 中引用。</p><p>测试方式和前面一致，可以看到此时大小写都可以查出两个文档。</p><p>因为无论索引还是查询，都会将大写转为小写。</p><h3 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h3><p>boost 参数可以设置字段的权重。</p><p>boost有两种使用思路，一种就是在定义mappings的时候使用，在指定字段类型时使用；另一种就是在查询时使用。</p><p>实际开发中建议使用后者，前者有问题：如果不重新索引文档，权重无法更改。</p><ul><li>mappings 中使用 boost（不推荐）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;content&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;boost&quot;: 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查询时指定boost：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;你好&quot;,</span><br><span class="line">        &quot;boost&quot;: 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="coerce"><a href="#coerce" class="headerlink" title="coerce"></a>coerce</h3><p>coerce 用来清除脏数据，默认为true。</p><p>例如一个数字，在 JSON 中，用户可能写错了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="string">&quot;99&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="string">&quot;99.0&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这些都不是正确的数字格式。</p><p>通过coerce 可以解决该问题。</p><p>默认情况下，以下操作没问题，就是 coerce 在起作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">POST blog/_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;:&quot;99.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要修改 coerce ，方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;coerce&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 coerce 设为 false 后 ，age 字段传入 数字字符串就会报错。</p><h3 id="copy-to"><a href="#copy-to" class="headerlink" title="copy_to"></a>copy_to</h3><p>这个属性可以将多个字段的值，复制到同一个字段中。</p><p>定义方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;full_content&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;content&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;full_content&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;full_content&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;你好，sakuratears&quot;,</span><br><span class="line">  &quot;content&quot;:&quot;Elasticsearch 学习笔记&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;full_content&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;记&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;full_content&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;你&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="doc-values-和-fielddata"><a href="#doc-values-和-fielddata" class="headerlink" title="doc_values 和 fielddata"></a>doc_values 和 fielddata</h3><p>ES 中的搜索主要是用到倒排索引，doc_values 参数是为了加快排序、聚合操作而生的。当建立倒排索引的时候，会额外增加列式存储映射。</p><p>doc_values 默认是开启的，如果确定某个字段不需要排序或者不需要聚合，那么可以关闭doc_values 以节省空间。</p><p>大部分的字段在索引时都会生成 doc_values，除了 text 。 text 字段在查询时会生成一个fielddata 的数据结构，fielddata 在字段首次被 聚合、排序的时候生成。</p><table><thead><tr><th>doc_values</th><th>fielddata</th></tr></thead><tbody><tr><td>索引时创建</td><td>使用时动态创建</td></tr><tr><td>磁盘</td><td>内存</td></tr><tr><td>不占用内存</td><td>不占用磁盘</td></tr><tr><td>索引速度稍低</td><td>文档很多时，动态创建慢，占内存</td></tr></tbody></table><p>doc_values 默认开启，fielddata默认关闭。</p><p>doc_values 举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">PUT user</span><br><span class="line"></span><br><span class="line">PUT user/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT user/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 99</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT user/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 98</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT user/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 101</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 doc_values 默认开启的，所以可以直接使用 age 进行排序，如果想关闭 doc_values ，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT user</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;doc_values&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT user/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT user/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 99</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT user/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 98</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT user/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 101</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET user/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><p>dynamic 有三种取值：</p><ul><li>true ： 默认，自动添加新字段。</li><li>false： 忽略新字段。</li><li>strict： 严格模式，发现新字段，会抛出异常。</li></ul><p>见学习笔记 （7）</p><h3 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h3><p>ES 默认会索引所有的字段，但是有的字段可能只需要存储，不需要索引。此时可以通过 enabled 来进行控制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;url&quot;:&#123;</span><br><span class="line">        &quot;enabled&quot;:false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;url&quot;:&quot;sakuratears&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;url&quot;: &quot;sakuratears&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置了 enabled 为 false 之后，就不可以通过 该字段搜索了。</p><h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><p>日期格式。format 规范日期格式，而且一次可以定义多个 format。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT user</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;birthday&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd||yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT user/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2021-11-03&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>多个日期格式之间使用 <code>||</code> 符号连接，注意没有空格。</p></li><li><p>如果用户没有指定日期的format，默认的日期格式 是 <code>strict_date_optional_time||epoch_mills</code></p></li></ul><p>另外，所有的日期格式都可以在 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html</a> 网址查看。</p><h3 id="ignore-above"><a href="#ignore-above" class="headerlink" title="ignore_above"></a>ignore_above</h3><p>ignore_above 用于指定分词和索引的字符串最大长度，超过最大长度的话，该字段将不会被索引，这个字段只适用于 keyword 类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;ignore_above&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;sakuratears&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;sakura&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: [</span><br><span class="line">        &quot;sakura&quot;,</span><br><span class="line">        &quot;sakuratears&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中 查询 sakuratears 是无结果的，因为其未被索引，但是文档是存在的。</p><h3 id="ignore-malformed"><a href="#ignore-malformed" class="headerlink" title="ignore_malformed"></a>ignore_malformed</h3><p>ignore_malformed 可以忽略不规则的数据，该参数默认为 false 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;birthday&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;yyyy-MM-dd||yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;ignore_malformed&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2021-06-10&quot;,</span><br><span class="line">  &quot;age&quot;:99</span><br><span class="line">&#125;</span><br><span class="line">PUT users/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;birthday&quot;:&quot;2021-06-10&quot;,</span><br><span class="line">  &quot;age&quot;:&quot;abc&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> doc 2 可以被存储，不会出错，但是 abc 不能被索引。</p><h3 id="include-in-all"><a href="#include-in-all" class="headerlink" title="include_in_all"></a>include_in_all</h3><p>这个是针对 <code>_all</code>字段的，但是在 ES7 中，该字段已经被废弃了。</p><p>替代品是 copy_to ， 原先ES 会将所有字段存储在一个叫 <code>xxx_all</code>字段里，当我们只知道词，并不知道其属于哪个 field，ES查询的时候会方便。</p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>index 指定一个字段是否被索引。该属性为true表示该字段被索引，false表示该字段不被索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;age&quot;: 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;20&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询会报错，提示age字段未被索引。index 为 false，不能通过对应的字段搜索。</p><h3 id="index-options"><a href="#index-options" class="headerlink" title="index_options"></a>index_options</h3><p>index_options 控制索引时哪些信息被存储到倒排索引中（用在text字段中），有四种取值：</p><table><thead><tr><th>index_options</th><th>备注</th></tr></thead><tbody><tr><td>docs</td><td>只存储文档编号，默认</td></tr><tr><td>freqs</td><td>在 docs的基础上，存储词项频率</td></tr><tr><td>positions</td><td>在 freqs基础上，存储词项偏移位置</td></tr><tr><td>offsets</td><td>在positions基础上，存储词项开始和结束的字符位置</td></tr></tbody></table><h3 id="norms"><a href="#norms" class="headerlink" title="norms"></a>norms</h3><p>norms 对字段评分有用，text上默认开启 norms，如果不是特别需要，不要开启norms。</p><h3 id="null-value"><a href="#null-value" class="headerlink" title="null_value"></a>null_value</h3><p>在 ES 中，值为 null 的字段，不索引也不可以被搜索，null_value 可以让值为 null 的字段显式的可索引、可搜索。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;null_value&quot;: &quot;-&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;-&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于用 “-” 字符串去代替null。</p><h3 id="position-increment-gap"><a href="#position-increment-gap" class="headerlink" title="position_increment_gap"></a>position_increment_gap</h3><p>被解析的text字段会将 term 的位置考虑进去，目的是为了支持近似查询和短语查询，当我们去索引一个含有多个值的text字段时，会在各个值之间添加一个假想的空间，将值隔开，这样就可以避免一些无意义的短语匹配，间隔大小通过 position_increment_gap 来控制，默认是100.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;names&quot;: [&quot;zhang san&quot;,&quot;Li si&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;names&quot;: &quot;san li&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>san Li 搜索不到，因为两个短语之间有一个假想的空隙，为100。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;names&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;san Li&quot;,</span><br><span class="line">        &quot;slop&quot;: 100</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过 slop 指定容忍的空隙大小。</p><p>也可以在定义索引的时候指定空隙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;names&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;position_increment_gap&quot;: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;names&quot;: [&quot;zhang san&quot;,&quot;Li si&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;names&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;san Li&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>略</p><h3 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h3><p>similarity 指定文档的评分模型，默认有三种。</p><table><thead><tr><th>similarity</th><th>备注</th></tr></thead><tbody><tr><td>BM25</td><td>ES和Lucene默认的评分模型</td></tr><tr><td>classic</td><td>TF/IDF 评分</td></tr><tr><td>boolean</td><td>boolean 评分模型</td></tr></tbody></table><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>默认情况下，字段会被索引，也可以搜索，但是不会存储。虽然不会被存储，但是 <code>_source</code>中有一个字段的备份。</p><p>如果想将字段存储下来，可以通过配置 store 来实现。</p><h3 id="term-vector"><a href="#term-vector" class="headerlink" title="term_vector"></a>term_vector</h3><p>term_vector 是通过分词器产生的信息，包括：</p><ul><li>一组 terms</li><li>每个 term 的位置</li><li>term 的首字符/尾字符与原始字符串原点的偏移量</li></ul><p>term_vector 取值如下：</p><table><thead><tr><th>term_vector</th><th>备注</th></tr></thead><tbody><tr><td>no</td><td>不存储信息，默认</td></tr><tr><td>yes</td><td>term被存储</td></tr><tr><td>with_positions</td><td>在yes的基础上增加位置信息</td></tr><tr><td>with_offsets</td><td>在yes的基础上增加偏移信息</td></tr><tr><td>with_positions_offsets</td><td>term、位置、偏移信息都存储</td></tr></tbody></table><h3 id="fields"><a href="#fields" class="headerlink" title="fields"></a>fields</h3><p>fields 参数可以让同一字段有多种不同的索引方式。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;raw&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;sakura&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;sakura&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title.raw&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;sakura&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapping 参数 地址 ： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html</a></p><h2 id="Elasticsearch-映射模板"><a href="#Elasticsearch-映射模板" class="headerlink" title="Elasticsearch 映射模板"></a>Elasticsearch 映射模板</h2><p>ES 中有动态映射，但有的时候默认的动态映射规则并不能满足我们的需求，这个时候可以通过映射模板来解决。</p><p>例子，将所有的数字默认映射为integer。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_templates&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;long2integer&quot;:&#123;</span><br><span class="line">          &quot;match_mapping_type&quot;:&quot;long&quot;,</span><br><span class="line">          &quot;mapping&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;integer&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;count&quot;:99</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog/_mapping</span><br></pre></td></tr></table></figure><p>存储完成后，默认会被识别为long类型的数据，现在就被识别为integer了。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_templates&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;string2integer&quot;:&#123;</span><br><span class="line">          &quot;match_mapping_type&quot;:&quot;string&quot;,</span><br><span class="line">          &quot;match&quot;:&quot;num_*&quot;,</span><br><span class="line">          &quot;unmatch&quot;:&quot;*_text&quot;,</span><br><span class="line">          &quot;mapping&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;integer&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;num_count&quot;:&quot;99&quot;,</span><br><span class="line">  &quot;num_text&quot;: &quot;sakura&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;num_count&quot;:&quot;99&quot;,</span><br><span class="line">  &quot;num_text&quot;: &quot;sakura&quot;,</span><br><span class="line">  &quot;num_aaa&quot;: 999</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET blog/_mapping</span><br></pre></td></tr></table></figure><ul><li>num_count 字段为字符串 99 ，会进入 匹配逻辑，99变为 integer。</li><li>num_text 满足unmatch ，不会变为 integer，按照默认的text处理</li><li>num_aaa 字段为 999，不是字符串，不进入匹配逻辑，按默认的long处理。</li></ul><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;blog&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;dynamic_templates&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;string2integer&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;match&quot;</span> : <span class="string">&quot;num_*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;unmatch&quot;</span> : <span class="string">&quot;*_text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;match_mapping_type&quot;</span> : <span class="string">&quot;string&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mapping&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;num_aaa&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;long&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;num_count&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;num_text&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> : <span class="number">256</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Elasticsearch-映射参数&quot;&gt;&lt;a href=&quot;#Elasticsearch-映射参数&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 映射参数&quot;&gt;&lt;/a&gt;Elasticsearch 映射参数&lt;/h2&gt;&lt;h3 id=&quot;analyzer&quot;&gt;&lt;a href=&quot;#analyzer&quot; class=&quot;headerlink&quot; title=&quot;analyzer&quot;&gt;&lt;/a&gt;analyzer&lt;/h3&gt;&lt;p&gt;定义文本字段的分词器，默认对索引和查询都是有效的。&lt;/p&gt;
&lt;p&gt;假设不用分词器，我们先来看一下索引的结果，创建一个索引并添加一个文档。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（8）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89.html</id>
    <published>2021-06-14T08:46:00.000Z</published>
    <updated>2021-06-14T08:47:05.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch-字段类型"><a href="#Elasticsearch-字段类型" class="headerlink" title="Elasticsearch 字段类型"></a>Elasticsearch 字段类型</h2><h3 id="核心类型"><a href="#核心类型" class="headerlink" title="核心类型"></a>核心类型</h3><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><ul><li>string ： 这是一个已经过期的字符串类型。在 ES 5 之前用这个来描述字符串，现在已经被 text 和 keyword 替代了。</li><li>text ： 如果一个字段是要被全文检索的，比如说文章内容，那么可以使用 text。用了 text 之后，字段内容会被分析，在生成倒排索引之前，字符串会被分词器分成一个个的词项，text 类型的字段不用于排序，很少用于聚合。这种字符串也被称之为 analyzed 字段。</li><li>keyword ： 这种类型适用于结构化的字段，例如标签、手机号码等等，这种类型的字段可以用作过滤、排序、聚合等。这种字符串也称之为 not-analyzed 字段。</li></ul><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><table><thead><tr><th>类型</th><th>取值范围</th></tr></thead><tbody><tr><td>long</td><td>-2^63 到 -2^63-1</td></tr><tr><td>integer</td><td>-2^31 到 -2^31-1</td></tr><tr><td>short</td><td>-2^15 到 -2^15-1</td></tr><tr><td>byte</td><td>-2^7 到 -2^7-1</td></tr><tr><td>double</td><td>64 位的双精度 IEEE754 浮点类型</td></tr><tr><td>float</td><td>32 位的双精度 IEEE754 浮点类型</td></tr><tr><td>half_float</td><td>16 位的双精度 IEEE754 浮点类型</td></tr><tr><td>scaled_float</td><td>缩放类型的浮点类型</td></tr></tbody></table><ul><li><p>在满足需求的情况下，优先使用范围小的字段。字段长度越短，索引和搜索的效率越高。</p></li><li><p>浮点数，优先考虑使用 scaled_float 。</p><p>scaled_float  举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;scaled_float&quot;,</span><br><span class="line">        &quot;scaling_factor&quot;: 100</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码，比如我们商品价格精确到分，那么一个88.88元的商品在ES底层存储的为8888，但是由于缩放因子为100，ES给我们提供的所有API返回的为88.88，在底层，long类型比float类型更易压缩存储。</p></li></ul><h4 id="日期类型（date）"><a href="#日期类型（date）" class="headerlink" title="日期类型（date）"></a>日期类型（date）</h4><p>由于JSON中没有日期类型，所以ES中的日期类型形式就比较多样。</p><ul><li>2021-06-09 或者 2021-06-09 11:00:00</li><li>一个从1970.1.1 零点 到现在的一个秒数或者毫秒数。</li></ul><p>ES 内部将时间转为 UTC ，然后将时间按照 millseconds-since-the-epoch 的长整型来存储。</p><p>自定义日期类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;date&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个能够解析的时间类型比较多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT product/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;date&quot;:&quot;2021-06-09&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT product/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;date&quot;:&quot;2021-06-09T11:00:00Z&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT product/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;date&quot;:&quot;1623208124&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面三个文档中的日期都可以被解析，内部存储的是毫秒计时的长整型数。</p><h4 id="布尔类型（boolean）"><a href="#布尔类型（boolean）" class="headerlink" title="布尔类型（boolean）"></a>布尔类型（boolean）</h4><p>JSON 中的 “ture”，“false”，true，false。</p><h4 id="二进制类型（binary）"><a href="#二进制类型（binary）" class="headerlink" title="二进制类型（binary）"></a>二进制类型（binary）</h4><p>二进制接受的是base64编码的字符串，默认不存储，也不可搜索。</p><h4 id="范围类型"><a href="#范围类型" class="headerlink" title="范围类型"></a>范围类型</h4><ul><li>integer_range</li><li>float_range</li><li>long_range</li><li>double_range</li><li>date_range</li><li>ip_range</li></ul><p>定义的时候，指定范围类型即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pirce&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;float_range&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入文档时，需要指定文档的界限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT product/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;apple&quot;,</span><br><span class="line">  &quot;pirce&quot;:&#123;</span><br><span class="line">    &quot;gt&quot;:9,</span><br><span class="line">    &quot;lt&quot;:19.9</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定范围时，可以使用gt、gte、lt、lte。</p><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>ES 中没有专门的数组类型。默认情况下，任何字段都可以有一个或多个值。需要注意的是，数组中的元素必须是同一种类型。</p><p>添加数组时，数组中的第一个元素就决定了整个数组类型。</p><h4 id="对象类型-object"><a href="#对象类型-object" class="headerlink" title="对象类型(object)"></a>对象类型(object)</h4><p>由于 JSON 本身具有层级关系，所以文档包含内部对象。内部对象中还可以再包含内部对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT product/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;apple&quot;,</span><br><span class="line">  &quot;ext&quot;:&#123;</span><br><span class="line">    &quot;adderss&quot;:&quot;China&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套类型-nested"><a href="#嵌套类型-nested" class="headerlink" title="嵌套类型(nested)"></a>嵌套类型(nested)</h4><p>nested 是object 中的一个特例。</p><p>如果只使用 object 类型，假如有如下文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT product/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;users&quot;:[</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;first_name&quot;:&quot;Zhang&quot;,</span><br><span class="line">      &quot;last_name&quot;:&quot;San&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;first_name&quot;:&quot;Li&quot;,</span><br><span class="line">      &quot;last_name&quot;:&quot;Si&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Luncene 没有内部对象的概念，所以 ES 会将对象层次扁平化，将一个对象转为字段名和值构成的简单列表。即上面的文档最终存储形式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;users.first_name&quot;</span>:[<span class="string">&quot;Zhang&quot;</span>,<span class="string">&quot;Li&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;users.last_name&quot;</span>:[<span class="string">&quot;San&quot;</span>,<span class="string">&quot;Si&quot;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扁平化之后，用户名之间的关系没了。这样会导致如果搜索 Zhang Si 这个人，会搜索到。</p><p>此时可以通过nested 类型来解决问题，nested 对象类型可以保持数组中每个对象的独立性。nested 类型 将数组中的每一个对象作为独立隐藏稳定来索引，这样每一个嵌套对象都可以独立被索引。如下结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">&quot;user.first_name&quot;</span>:<span class="string">&quot;Zhang&quot;</span>,</span><br><span class="line"><span class="attr">&quot;user.last_name&quot;</span>:<span class="string">&quot;San&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="attr">&quot;user.first_name&quot;</span>:<span class="string">&quot;Li&quot;</span>,</span><br><span class="line"><span class="attr">&quot;user.last_name&quot;</span>:<span class="string">&quot;Si&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong>：</p><p>文档存储1在一起，读取性能高。</p><p><strong>缺点</strong>：</p><p>更新父或者子文档时需要更新整个文档。</p><h3 id="地理类型"><a href="#地理类型" class="headerlink" title="地理类型"></a>地理类型</h3><p>使用场景：</p><ul><li>查找某一个范围内的地理位置</li><li>通过地理位置或者相对中心点的距离来聚合文档</li><li>把距离整合到文档的评分中</li><li>通过距离对文档进行排序</li></ul><h4 id="geo-point"><a href="#geo-point" class="headerlink" title="geo_point"></a>geo_point</h4><p>geo_point 就是一个坐标点。定义方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT people</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;location&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建时指定字段类型，存储时有四种方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT people/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;location&quot;:&#123;</span><br><span class="line">    &quot;lat&quot;: 34.27,</span><br><span class="line">    &quot;lon&quot;: 108.94</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT people/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;location&quot;: &quot;34.27,108.94&quot;</span><br><span class="line">&#125;</span><br><span class="line">//geo_hash</span><br><span class="line">PUT people/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;location&quot;: &quot;wqj6yyx&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT people/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;location&quot;: [108.94,34.27]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，使用数组描述时，数组中先经度后纬度。</p><h4 id="geo-shape"><a href="#geo-shape" class="headerlink" title="geo_shape"></a>geo_shape</h4><p>GeoJSON : <a href="https://geojson.org/">https://geojson.org/</a></p><table><thead><tr><th>GeoJson</th><th>Elasticsearch</th><th>备注</th></tr></thead><tbody><tr><td>Point</td><td>point</td><td>一个由经纬度描述的点</td></tr><tr><td>LineString</td><td>linestring</td><td>一个任意的线条，由两个以上的点组成</td></tr><tr><td>Polygon</td><td>polygon</td><td>一个封闭多边形</td></tr><tr><td>MultiPoint</td><td>multipoint</td><td>一组不连续的点</td></tr><tr><td>MultiLineString</td><td>multilinestring</td><td>多条不关联的线</td></tr><tr><td>MultiPolygon</td><td>multipolygon</td><td>多个多边形</td></tr><tr><td>GeometryCollection</td><td>geometrycollection</td><td>几何对象的集合</td></tr><tr><td></td><td>circle</td><td>一个圆形</td></tr><tr><td></td><td>envelope</td><td>通过左上角和右下角确定的矩形</td></tr></tbody></table><p>指定 geo_shape 的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT people</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;location&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_shape&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加文档时需要指定具体的类型（点坐标先经度后纬度）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT people/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;location&quot;:&#123;</span><br><span class="line">    &quot;type&quot;:&quot;point&quot;,</span><br><span class="line">    &quot;coordinates&quot;: [108.94,34.27]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是linestring，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT people/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;location&quot;:&#123;</span><br><span class="line">    &quot;type&quot;:&quot;linestring&quot;,</span><br><span class="line">    &quot;coordinates&quot;: [[108.94,34.27],[100,33]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h3><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><p>存储IP地址，类型是IP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;ip_address&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;ip&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ip_address&quot;:&quot;192.168.1.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;ip_address&quot;: &quot;192.168.0.0/16&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 ipv4，ipv6 地址均可以。</p><h4 id="token-count"><a href="#token-count" class="headerlink" title="token_count"></a>token_count</h4><p>用于统计字符串分词后的词项个数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;length&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;token_count&quot;,</span><br><span class="line">            &quot;analyzer&quot;:&quot;standard&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于新增了 title.length 字段用来统计分词后词项的个数。查询方便。</p><p>添加文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;zhang san&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过 token_count 去查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title.length&quot;: 2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 438,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;blog&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;title&quot; : &quot;zhang san&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Elasticsearch-字段类型&quot;&gt;&lt;a href=&quot;#Elasticsearch-字段类型&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 字段类型&quot;&gt;&lt;/a&gt;Elasticsearch 字段类型&lt;/h2&gt;&lt;h3 id=&quot;核心类型&quot;&gt;&lt;a href=&quot;#核心类型&quot; class=&quot;headerlink&quot; title=&quot;核心类型&quot;&gt;&lt;/a&gt;核心类型&lt;/h3&gt;&lt;h4 id=&quot;字符串类型&quot;&gt;&lt;a href=&quot;#字符串类型&quot; class=&quot;headerlink&quot; title=&quot;字符串类型&quot;&gt;&lt;/a&gt;字符串类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;string ： 这是一个已经过期的字符串类型。在 ES 5 之前用这个来描述字符串，现在已经被 text 和 keyword 替代了。&lt;/li&gt;
&lt;li&gt;text ： 如果一个字段是要被全文检索的，比如说文章内容，那么可以使用 text。用了 text 之后，字段内容会被分析，在生成倒排索引之前，字符串会被分词器分成一个个的词项，text 类型的字段不用于排序，很少用于聚合。这种字符串也被称之为 analyzed 字段。&lt;/li&gt;
&lt;li&gt;keyword ： 这种类型适用于结构化的字段，例如标签、手机号码等等，这种类型的字段可以用作过滤、排序、聚合等。这种字符串也称之为 not-analyzed 字段。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（7）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89.html</id>
    <published>2021-06-14T08:42:00.000Z</published>
    <updated>2021-06-14T08:46:03.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch-映射"><a href="#Elasticsearch-映射" class="headerlink" title="Elasticsearch 映射"></a>Elasticsearch 映射</h2><p>映射就是Mapping，它用来定义一个文档以及文档所包含的字段该如何被存储和索引。所以，它其实有点类似于关系型数据库中表的定义。</p><h3 id="映射分类"><a href="#映射分类" class="headerlink" title="映射分类"></a>映射分类</h3><p><strong>动态映射</strong> / <strong>静态映射</strong></p><p>动态映射，顾名思义，就是自动创建出来的映射。</p><p>静态映射指定是手动创建的映射。</p><p>ES 根据存入的文档，自动分析出来文档中字段的类型以及存储方式，这种就是动态映射。</p><p>例如，新建一个索引，查看索引信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">GET blog</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;blog&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;aliases&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;routing&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;allocation&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;include&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;_tier_preference&quot;</span> : <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;provided_name&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;creation_date&quot;</span> : <span class="string">&quot;1623142050956&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uuid&quot;</span> : <span class="string">&quot;JubS67p8Q7egZll5MQ9GAw&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;version&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;created&quot;</span> : <span class="string">&quot;7120199&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建好的索引信息中，我们可以看到，mappings 为空，这个 mappings 中保存的就是映射信息。</p><p>现在我们向索引中添加一个文档，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;blog1&quot;,</span><br><span class="line">  &quot;date&quot;:&quot;2021-06-08&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档添加成功后，就会自动生成mappings。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_mapping</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-745.png"></p><p>可以看到， date 字段的类型为 date， title 的类型有两个， text 和 keyword。（ES 5 之前字符串类型只有一个 string类型）</p><p>默认情况下，文档中如果新增了字段，mappings中也会自动新增进来。</p><p>有的时候，如果希望新增字段时，能够抛出异常来提醒开发者，这个可以通过 mappings 中的 dynamic 属性来配置。</p><p>dynamic 有三种取值：</p><ul><li>true ： 默认，自动添加新字段。</li><li>false： 忽略新字段。</li><li>strict： 严格模式，发现新字段，会抛出异常。</li></ul><p>具体配置方式如下，创建索引时指定mappings（其实就是静态映射）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic&quot;: &quot;strict&quot;,</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们此时添加文档，如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-746.png"></p><p>可以看到我们没有配置 date 字段的映射，添加文档时出现错误。</p><p>动态映射还有一个日期检测的问题。</p><p>例如新建一个索引，然后添加一个含有日期的文档，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;remark&quot;:&quot;2021-06-08&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加成功后，remark字段会被推断为日期类型。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-747.png"></p><p>此时remark字段就无法存储其他类型数据。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-748.png"></p><p>要解决这个问题，可以使用静态映射，即在索引定义时，将remark指定为text类型。也可以关闭日期检测。</p><p>关闭日期检测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;date_detection&quot;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时日期类型就会被当成文本来处理。</p><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>ES 中动态映射类型推断方式如下：</p><table><thead><tr><th>JSON中的数据</th><th>自动推断出来的数据类型</th></tr></thead><tbody><tr><td>null</td><td>没有字段被添加</td></tr><tr><td>true/false</td><td>boolean</td></tr><tr><td>浮点数字</td><td>float</td></tr><tr><td>数字</td><td>long</td></tr><tr><td>JSON 对象</td><td>object</td></tr><tr><td>数组</td><td>数组中的第一个非空值决定</td></tr><tr><td>String</td><td>text/keyword/date/double/long 都有可能</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Elasticsearch-映射&quot;&gt;&lt;a href=&quot;#Elasticsearch-映射&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 映射&quot;&gt;&lt;/a&gt;Elasticsearch 映射&lt;/h2&gt;&lt;p&gt;映射就是Mapping，它用来定义一个文档以及文档所包含的字段该如何被存储和索引。所以，它其实有点类似于关系型数据库中表的定义。&lt;/p&gt;
&lt;h3 id=&quot;映射分类&quot;&gt;&lt;a href=&quot;#映射分类&quot; class=&quot;headerlink&quot; title=&quot;映射分类&quot;&gt;&lt;/a&gt;映射分类&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;动态映射&lt;/strong&gt; / &lt;strong&gt;静态映射&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（6）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89.html</id>
    <published>2021-06-14T08:40:00.000Z</published>
    <updated>2021-06-14T08:42:03.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>倒排索引是 ES 中非常重要的索引结构，是从 <strong>文档词项到文档ID</strong> 的一个映射过程。</p><h3 id="“-正排索引-”"><a href="#“-正排索引-”" class="headerlink" title="“ 正排索引 ”"></a>“ 正排索引 ”</h3><p>我们在关系型数据库中见到的索引，就是“正排索引”。</p><p>关系型数据库中的索引如下，假设我们有一张博客表，内容如下：</p><table><thead><tr><th>id</th><th>作者</th><th>标题</th><th>内容</th></tr></thead><tbody><tr><td>1</td><td>sakura1</td><td>倒排索引</td><td>1234567890</td></tr><tr><td>2</td><td>sakura2</td><td>正排索引</td><td>adcdefghi</td></tr></tbody></table><p>我们可以针对这个表建立索引（正排索引）：</p><p>比如根据id，根据作者，根据标题去建立索引。</p><p>这样我们搜索文章时，无论根据id，作者，标题都可以快速搜索到。</p><p>但是当我们按照文章内容去搜索时，先不考虑内容字段是否适合建立索引，即使给内容字段建立索引，我们在查询时，也不可能将全部内容作为搜索条件去搜索。</p><p>如果我们按照文章关键字去搜索，比如哪篇文章内容包含abcd，那么只能去做字符匹配了，这样效率也非常低。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> blog <span class="keyword">where</span> content <span class="keyword">like</span> <span class="string">&#x27;%abcd%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>为了提高查询效率，就要考虑使用到倒排索引。</p><h3 id="倒排索引-1"><a href="#倒排索引-1" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>倒排索引就是以内容的关键字建立索引，通过索引找到文档id，再进而找到整个文档。</p><p>比如对于上面博客表，有4条数据，如下：</p><table><thead><tr><th>id</th><th>author</th><th>title</th><th>content</th></tr></thead><tbody><tr><td>1</td><td>javazwt</td><td>java</td><td>java is very good，and I like elasticsearch</td></tr><tr><td>2</td><td>sakura</td><td>elasticsearch</td><td>elasticsearch is very very good</td></tr><tr><td>3</td><td>sakuratears</td><td>php</td><td>I like php and elasticsearch</td></tr><tr><td>4</td><td>sakura</td><td>12345</td><td>php is very good</td></tr></tbody></table><p>则我们根据内容content关键字建立倒排索引，结果如下：</p><table><thead><tr><th>索引</th><th>ids</th><th>id=1</th><th>id=2</th><th>id=3</th><th>id4</th></tr></thead><tbody><tr><td>java</td><td>1</td><td>*</td><td></td><td></td><td></td></tr><tr><td>is</td><td>1,2,4</td><td>*</td><td>*</td><td></td><td>*</td></tr><tr><td>very</td><td>1,2,4</td><td>*</td><td>*</td><td></td><td>*</td></tr><tr><td>good</td><td>1,2,4</td><td>*</td><td>*</td><td></td><td>*</td></tr><tr><td>and</td><td>1,3</td><td>*</td><td></td><td>*</td><td></td></tr><tr><td>I</td><td>1,3</td><td>*</td><td></td><td>*</td><td></td></tr><tr><td>like</td><td>1,3</td><td>*</td><td></td><td>*</td><td></td></tr><tr><td>elasticsearch</td><td>1,2,3</td><td>*</td><td>*</td><td>*</td><td></td></tr><tr><td>php</td><td>3,4</td><td></td><td></td><td>*</td><td>*</td></tr></tbody></table><p>比如此时我们想搜索elasticsearch相关文章内容，则根据倒排索引可以快速定位到文档1,2,3，进而快速拿到整个文档信息。</p><p>我们之前提到过停用词，比如我们建立文档时指定了停用词，比如is，那么建立倒排索引时 is 便不会被索引。</p><p>之前说过的分词器，其功能就是将我们的content正确分词。</p><p>一般来说，倒排索引分为两个部分：</p><ul><li>单词词典：记录所有文档词项，以及词项到倒排列表的关联关系。</li><li>倒排列表：记录单词与对应的关系，由一系列倒排索引项组成，倒排索引项：文档id、词频（TF）（词项在文档中出现的次数，比如上例中的very，在文章2中出现了两次，可以认为文档2搜索相关度更高一些）、位置（词项在文档中分词的位置）、偏移（记录词项开始和结束的位置）。我们上例仅仅使用了文档id倒排索引项。</li></ul><p>当我们去索引一个文档时，就会建立倒排索引，搜索时，直接根据倒排索引进行搜索。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;倒排索引&quot;&gt;&lt;a href=&quot;#倒排索引&quot; class=&quot;headerlink&quot; title=&quot;倒排索引&quot;&gt;&lt;/a&gt;倒排索引&lt;/h2&gt;&lt;p&gt;倒排索引是 ES 中非常重要的索引结构，是从 &lt;strong&gt;文档词项到文档ID&lt;/strong&gt; 的一个映射过程。&lt;/p&gt;
&lt;h3 id=&quot;“-正排索引-”&quot;&gt;&lt;a href=&quot;#“-正排索引-”&quot; class=&quot;headerlink&quot; title=&quot;“ 正排索引 ”&quot;&gt;&lt;/a&gt;“ 正排索引 ”&lt;/h3&gt;&lt;p&gt;我们在关系型数据库中见到的索引，就是“正排索引”。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（5）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89.html</id>
    <published>2021-06-14T08:33:00.000Z</published>
    <updated>2021-06-14T08:39:29.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch文档基本操作"><a href="#Elasticsearch文档基本操作" class="headerlink" title="Elasticsearch文档基本操作"></a>Elasticsearch文档基本操作</h2><h3 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h3><p>首先新建一个索引，比如 blog。</p><p>然后向索引中添加一个文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;Elasticsearch 文档基本操作&quot;,</span><br><span class="line">  &quot;date&quot;:&quot;2021-06-04&quot;,</span><br><span class="line">  &quot;content&quot;:&quot;Elasticsearch 文档基本操作，如何新建文档，删除文档，更新文档等&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-739.png"></p><p>Kibana添加成功响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>_index表示文档索引。</li><li>_type表示文档类型。</li><li>_id 表示文档id。</li><li>_version 表示文档版本（更新文档，版本会自动+1，针对文档的）</li><li>result表示执行结果类型。</li><li>_shards表示分片信息。</li><li><code>_seq_no </code>和<code>_primary_term</code>也是版本控制使用的（针对当前索引的）。</li></ul><p>当然，添加文档时也可以不指定id，此时系统会默认给出一个id。如果不指定id，则需要使用 POST 请求，而不能使用 PUT 请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;Elasticsearch 文档基本操作1&quot;,</span><br><span class="line">  &quot;date&quot;:&quot;2021-06-04&quot;,</span><br><span class="line">  &quot;content&quot;:&quot;Elasticsearch 文档基本操作，如何新建文档，删除文档，更新文档等1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;8Ld91nkBirAhYR49g5lr&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p>Elasticsearch 提供了 GET API 来查看文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_doc/1</span><br></pre></td></tr></table></figure><p>返回信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;Elasticsearch 文档基本操作&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;date&quot;</span> : <span class="string">&quot;2021-06-04&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span> : <span class="string">&quot;Elasticsearch 文档基本操作，如何新建文档，删除文档，更新文档等&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果获取不存在的文档，会返回未找到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_doc/2</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是想知道某个文档是否存在，使用 HEAD 请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求：</span><br><span class="line">HEAD blog/_doc/1</span><br><span class="line">返回：</span><br><span class="line">200 - OK</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求：</span><br><span class="line">HEAD blog/_doc/2</span><br><span class="line">返回：</span><br><span class="line">&#123;&quot;statusCode&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;message&quot;:&quot;404 - Not Found&quot;&#125;</span><br></pre></td></tr></table></figure><p>当然也可以批量获取文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ids&quot;:[&quot;1&quot;,&quot;8Ld91nkBirAhYR49g5lr&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GET 请求携带请求体的问题？</p><p>某些特定的语言，例如 JavaScript 的HTTP请求是不允许 GET请求有请求体的，实际上在 RFC7231 文档中，并没有规定GET 请求的请求体改如何处理，这样造成了一定程度的混乱，有的HTTP服务器支持GET请求携带请求体，有的HTTP服务器则不支持。虽然ES工程师倾向于使用GET做查询，但是为了保证兼容性，ES同时也支持使用POST查询。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ids&quot;:[&quot;1&quot;,&quot;8Ld91nkBirAhYR49g5lr&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法也是可以的。</p><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><h4 id="普通更新"><a href="#普通更新" class="headerlink" title="普通更新"></a>普通更新</h4><p>注意，文档更新一次，_version就会加1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/8Ld91nkBirAhYR49g5lr</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;123456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式更新的文档会覆盖原文档内容，如果我们只想更新某个字段，这种方式需要把其他未变化的字段也带上。</p><p>大多数时候，我们只想更新文档字段，这个可以通过脚本来实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;:&#123;</span><br><span class="line">    &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">    &quot;source&quot;: &quot;ctx._source.title=params.title&quot;,</span><br><span class="line">    &quot;params&quot;: &#123;</span><br><span class="line">      &quot;title&quot;:&quot;123456&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新请求格式：POST {index}/_update/{id}</p><p>在脚本中，lang 表示脚本语言，painless 是ES 内置的一种脚本语言。source 表示具体执行的脚本，ctx是一个上下文对象，通过 ctx可以访问到 <code>_source</code> 、<code>_title</code>等字段。</p><p>也可以向文档中添加字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;:&#123;</span><br><span class="line">    &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">    &quot;source&quot;: &quot;ctx._source.tags=[\&quot;java\&quot;,\&quot;php\&quot;]&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;date&quot;</span> : <span class="string">&quot;2021-06-04&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span> : <span class="string">&quot;Elasticsearch 文档基本操作，如何新建文档，删除文档，更新文档等&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;java&quot;</span>,</span><br><span class="line">      <span class="string">&quot;php&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过脚本语言，也可以修改数组字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;:&#123;</span><br><span class="line">    &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">    &quot;source&quot;: &quot;ctx._source.tags.add(\&quot;javascript\&quot;)&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;date&quot;</span> : <span class="string">&quot;2021-06-04&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span> : <span class="string">&quot;Elasticsearch 文档基本操作，如何新建文档，删除文档，更新文档等&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;java&quot;</span>,</span><br><span class="line">      <span class="string">&quot;php&quot;</span>,</span><br><span class="line">      <span class="string">&quot;javascript&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然。也可以使用 if else 构造稍微复杂一点的逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;:&#123;</span><br><span class="line">    &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">    &quot;source&quot;: &quot;if(ctx._source.tags.contains(\&quot;java\&quot;))&#123;ctx.op=\&quot;delete\&quot;&#125;else&#123;ctx.op=\&quot;none\&quot;&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询更新"><a href="#查询更新" class="headerlink" title="查询更新"></a>查询更新</h4><p>通过条件查询找到文档，然后再去更新。</p><p>将title中包含12345的文档的content修改为 12345.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_update_by_query</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &#123;</span><br><span class="line">    &quot;source&quot;: &quot;ctx._source.content=\&quot;12345\&quot;&quot;,</span><br><span class="line">    &quot;lang&quot;: &quot;painless&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;12345&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><h4 id="根据id删除"><a href="#根据id删除" class="headerlink" title="根据id删除"></a>根据id删除</h4><p>从索引中删除一个文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE blog/_doc/1</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;blog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">14</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在添加文档时指定了路由，则删除文档时也需要指定路由，否则删除失败。</p><h4 id="查询删除"><a href="#查询删除" class="headerlink" title="查询删除"></a>查询删除</h4><p>查询删除是POST请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;:&#123;</span><br><span class="line">      &quot;title&quot;:&quot;12345&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以删除某一个索引下的所有文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match_all&quot;:&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><p>ES中通过bulk API 可以执行批量索引、批量删除、批量更新等操作。</p><p>首先需要将所有的批量操作写入到一个JSON文件中，然后通过POST请求将该JSON文件上传并执行。</p><p>例如新建一个名为aaa.json的文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;666&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;sakuratears&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;update&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;666&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;doc&quot;</span>:&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;sakura&quot;</span>&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一行：index表示执行索引操作（表示一个action，其他action还有 create、delete、update）。</p><p>第二行是第一行的操作参数。</p><p>第三行的update则表示更新操作。</p><p>第四行是第三行的操作参数。</p><p>注意，结尾要空出一行。</p><p>index创建索引和create创建索引的区别是create创建索引如果索引已经存在则会创建失败。</p><p>文件创建成功后，直接在该目录下执行请求命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST &quot;http://localhost:9200/user/_bulk&quot; -H &quot;content-type:application/json&quot; --data-binary @aaa.json</span><br></pre></td></tr></table></figure><p>当然，我们如果不新建文件，直接在 Kibana 开发者工具里也是可以执行的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_id&quot;:&quot;666&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;sakuratears&quot;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;user&quot;,&quot;_id&quot;:&quot;666&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;name&quot;:&quot;sakura&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">2358</span>,</span><br><span class="line">  <span class="attr">&quot;errors&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;items&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;user&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;666&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;update&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;user&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;666&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> : <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span> : <span class="number">200</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Elasticsearch-文档路由"><a href="#Elasticsearch-文档路由" class="headerlink" title="Elasticsearch 文档路由"></a>Elasticsearch 文档路由</h2><p>ES 是一个分布式系统，当我们存储一个文档到 ES 上之后，这个文档实际是被存储到 master 节点中的某一个主分片上。</p><p>那么就存在一个问题，ES如何知道这个文档被存放到哪一个分片上？</p><p>例如，新建一个索引，该索引有两个分片，0个副本，如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-740.png"></p><p>接下来，向索引中保存一个文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/a</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档保存成功后，可以查看该文档被保存到哪个分片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/shards/blog?v</span><br></pre></td></tr></table></figure><p>查看结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index shard prirep state   docs store ip        node</span><br><span class="line">blog  1     p      STARTED    0  208b 127.0.0.1 slave02</span><br><span class="line">blog  0     p      STARTED    1 4.7kb 127.0.0.1 slave01</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从这个结果中可以看出，文档被保存在分片 0 上。</p><p>我们在保存一个文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/b</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;b&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续查看分片，可以看到它被保存在分片 1 上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index shard prirep state   docs store ip        node</span><br><span class="line">blog  1     p      STARTED    1 4.7kb 127.0.0.1 slave02</span><br><span class="line">blog  0     p      STARTED    1 4.9kb 127.0.0.1 slave01</span><br></pre></td></tr></table></figure><p>那么ES 是按照什么样的规则去分配分片的呢？</p><p>ES中的路由机制是通过哈希算法，将具有相同哈希值的文档放到同一个主分片中，分片位置的计算方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard = hash(routing)%number_of_primary_shards</span><br></pre></td></tr></table></figure><p>routing可以是一个任意字符串，ES默认是将文档的id作为routing值，通过哈希函数根据routing生成一个数字，然后将该数字和分片数取余。取余的结果就是分片的位置。</p><p>默认的这种路由模式，最大的优势在于负载均衡，这种方式可以保证数据平均分配在不同的分片上。但是有一个很大的劣势。就是查询时候无法确定文档位置，此时它会将请求广播到所有的分片上去执行。另一方面，使用默认的路由模式，后期修改分片数量十分不方便。</p><p>开发者也可以自定义routing的值，方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/d?routing=sakura</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;d&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果文档在添加时指定了routing，则查询、删除、更新是也需要指定routing。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_doc/d?routing=sakura</span><br></pre></td></tr></table></figure><p>自定义routing可能导致负载不均衡，这需要结合实际情况选择。</p><p>典型场景：</p><p>对于用户数据，我们可以将 userId 作为 routing，这样就能保证同一个用户的数据保存在同一个分片中，检索时，同样使用userId作为routing，这样就可以精确的从某一个分片中获取数据。</p><h2 id="Elasticsearch-文档版本控制"><a href="#Elasticsearch-文档版本控制" class="headerlink" title="Elasticsearch 文档版本控制"></a>Elasticsearch 文档版本控制</h2><p>当我们使用 ES API 进行文档更新时，它首先读取原文档，然后对文档进行更新，然后再重新索引整个文档。无论执行多少次更新，最终保存在 ES 中的是最后一次更新的文档。</p><p>但是如果有两个线程同时更新，就可能会出现问题。</p><p>要解决问题，就要用到锁。</p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p><strong>悲观锁</strong></p><p>每一次读取数据时，都认为数据可能会被修改，所以屏蔽一切可能破坏数据完整性的操作。关系型数据库中，悲观锁使用较多，例如行锁、表锁等。</p><p><strong>乐观锁</strong></p><p>每次读取数据时，都认为数据不会被修改，因此不锁定数据，只有在提交数据时，检查数据完整性。这种方式可以省去锁的开销，进而提高吞吐量。</p><p>在 ES 中，实际上使用的就是乐观锁。</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p><strong>ES 6.7</strong> 版本之前，使用 <code>_version</code> + <code>_version_type</code> 来进行乐观并发控制。根据前面的介绍，文档每被修改一次，<code>_version</code>就会自增1次，ES 通过 <code>_version</code> 字段来确保所有的操作都有序进行。</p><p>version 分为内部版本控制和外部版本控制。</p><h4 id="内部版本控制"><a href="#内部版本控制" class="headerlink" title="内部版本控制"></a>内部版本控制</h4><p>ES 自己维护的就是内部版本，当创建一个文档时，ES 会给文档版本赋值为1。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-741.png"></p><p>每当用户修改一次文档，版本号就会自增1。</p><p>如果使用内部版本，ES 要求 <code>_version</code> 参数必须和 ES 文档中 <code>_version</code>的值相等才能操作成功。</p><h4 id="外部版本控制"><a href="#外部版本控制" class="headerlink" title="外部版本控制"></a>外部版本控制</h4><p>ES也可以通过外部版本进行版本控制。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-742.png"></p><p>添加文档时，PUT请求后添加参数 version 和 version_type。</p><p>version_type 有 external 和 external_gte 两种。</p><p>external 表示更新时版本号参数必须大于文档版本号。</p><p>external_gte 表示更新时版本号参数必须大于等于文档版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1?version=200&amp;version_type=external</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;2222&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-743.png"></p><h4 id="新版本控制（ES-6-7之后）"><a href="#新版本控制（ES-6-7之后）" class="headerlink" title="新版本控制（ES 6.7之后）"></a>新版本控制（ES 6.7之后）</h4><p>现在使用 <code>_seq_no</code> 和 <code>_primary_term</code> 两个参数来进行并发控制。</p><p><code>_seq_no</code> 不属于某一个文档，它属于整个索引的。（<code>_version</code> 则是属于某一个文档的，每个文档的<code>_version</code>互不影响）</p><p>现在更想文档时，使用 <code>_seq_no</code> 来做并发。由于 <code>_seq_no</code>  是属于整个 索引的，所以索引下任何文档的修改或者新增，<code>_seq_no</code> 都会自增。</p><p>现在就可以通过 <code>_seq_no</code> 和 <code>_primary_term</code> 来做并发控制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/e?if_seq_no=3&amp;if_primary_term=1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;1212121&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-744.png"></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Elasticsearch文档基本操作&quot;&gt;&lt;a href=&quot;#Elasticsearch文档基本操作&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch文档基本操作&quot;&gt;&lt;/a&gt;Elasticsearch文档基本操作&lt;/h2&gt;&lt;h3 id=&quot;新建文档&quot;&gt;&lt;a href=&quot;#新建文档&quot; class=&quot;headerlink&quot; title=&quot;新建文档&quot;&gt;&lt;/a&gt;新建文档&lt;/h3&gt;&lt;p&gt;首先新建一个索引，比如 blog。&lt;/p&gt;
&lt;p&gt;然后向索引中添加一个文档。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（4）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89.html</id>
    <published>2021-06-14T08:22:00.000Z</published>
    <updated>2021-06-14T08:31:31.672Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elasticsearch索引管理"><a href="#Elasticsearch索引管理" class="headerlink" title="Elasticsearch索引管理"></a>Elasticsearch索引管理</h2><p>启动一个master节点和两个slave节点进行测试。</p><p>启动Kibana，访问地址 <a href="http://localhost:5601/">http://localhost:5601</a></p><h3 id="新建索引"><a href="#新建索引" class="headerlink" title="新建索引"></a>新建索引</h3><h4 id="通过head插件新建索引"><a href="#通过head插件新建索引" class="headerlink" title="通过head插件新建索引"></a>通过head插件新建索引</h4><p>在head插件中选择索引选项卡，然后点击新建索引。新建索引时，需要填入索引名称、分片数及副本数。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-729.png"></p><p>索引创建成功后，如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-730.png"></p><p>0,1,2,3,4 分别表示索引的分片，粗框表示主分片，细框表示副本（点击框显示primary属性）。.kibana索引只有一个分片和一个副本。</p><h4 id="通过请求创建"><a href="#通过请求创建" class="headerlink" title="通过请求创建"></a>通过请求创建</h4><p>这儿我们使用Elastic官方提供的工具Kibana，该工具的 DevTools 功能可以使我们可以轻松方便的创建索引，及一些其它操作。</p><p>并且该工具还会进行关键字提示，相比Postman等工具更友好。</p><p>创建索引请求：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT book</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-731.png"></p><p>创建成功后通过head查看索引信息：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-732.png"></p><p>注意：</p><ul><li>索引名称不能有大写字母；</li><li>索引名唯一，不能重复，重复创建会报错。</li></ul><h3 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h3><p>索引创建好，可以修改其属性。</p><p>例如修改索引的副本数（从1变为2）。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/<span class="emphasis">_settings</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">  &quot;number_</span>of<span class="emphasis">_replicas&quot;: 2</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-733.png"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-734.png"></p><h3 id="修改索引的读写权限"><a href="#修改索引的读写权限" class="headerlink" title="修改索引的读写权限"></a>修改索引的读写权限</h3><p>索引创建创建成功后，可以写入文档。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/<span class="emphasis">_doc/1</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">  &quot;title&quot;:&quot;累觉不爱&quot;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-735.png"></p><p>默认情况下，索引是具备读写权限的，这个读写权限可以关闭。</p><p>例如，关闭索引的写权限。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/<span class="emphasis">_settings</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">  &quot;blocks.write&quot;: true</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-736.png"></p><p>如果想打开写权限将上述改为false即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/_settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;blocks.write&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他权限有：</p><ul><li>blocks.read</li><li>blocks.read_only</li></ul><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><p>head 插件可以查看，略。</p><p>Kibana请求查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET book/_settings</span><br></pre></td></tr></table></figure><p>查看多个索引信息，用逗号隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET book,test/_settings</span><br></pre></td></tr></table></figure><p>查看所有索引信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _all/_settings</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>head插件可以删除，略。</p><p>Kibana请求删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE book</span><br></pre></td></tr></table></figure><p>注意：删除不存在的索引会报错。</p><h3 id="索引的打开-关闭"><a href="#索引的打开-关闭" class="headerlink" title="索引的打开/关闭"></a>索引的打开/关闭</h3><p>关闭索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST book/_close</span><br></pre></td></tr></table></figure><p>打开索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST book/_open</span><br></pre></td></tr></table></figure><p>也可以同时打开或关闭多个索引，多个索引用”,”隔开，或者用“_all”表示全部索引。</p><h3 id="复制索引"><a href="#复制索引" class="headerlink" title="复制索引"></a>复制索引</h3><p>索引复制只会复制数据，不会复制索引配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;book&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;book_new&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-737.png"></p><p>复制的时候可以添加查询条件。</p><h3 id="索引的别名"><a href="#索引的别名" class="headerlink" title="索引的别名"></a>索引的别名</h3><p>可以为索引创建别名，如果这个别名是唯一的，则该别名可以代替索引名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;add&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &quot;book&quot;,</span><br><span class="line">        &quot;alias&quot;: &quot;book_alias&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-738.png"></p><p>将add改为remove即可以移除别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;remove&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &quot;book&quot;,</span><br><span class="line">        &quot;alias&quot;: &quot;book_alias&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以处理多个别名，添加或者删除，因为actions接受一个数组。</p><p>查看索引对应的别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET book/_alias</span><br></pre></td></tr></table></figure><p>查看别名对应的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET book_alias/_alias</span><br></pre></td></tr></table></figure><p>查看集群上所有的可用别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_alias</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Elasticsearch索引管理&quot;&gt;&lt;a href=&quot;#Elasticsearch索引管理&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch索引管理&quot;&gt;&lt;/a&gt;Elasticsearch索引管理&lt;/h2&gt;&lt;p&gt;启动一个master节点和两个slave节点进行测试。&lt;/p&gt;
&lt;p&gt;启动Kibana，访问地址 &lt;a href=&quot;http://localhost:5601/&quot;&gt;http://localhost:5601&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;新建索引&quot;&gt;&lt;a href=&quot;#新建索引&quot; class=&quot;headerlink&quot; title=&quot;新建索引&quot;&gt;&lt;/a&gt;新建索引&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（3）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89.html</id>
    <published>2021-06-03T13:56:00.000Z</published>
    <updated>2021-06-14T08:05:37.438Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章我们介绍了Elasticsearch的一些核心概念，本篇文章我们来看下Elasticsearch的分词器。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Elasticsearch分词器介绍"><a href="#Elasticsearch分词器介绍" class="headerlink" title="Elasticsearch分词器介绍"></a>Elasticsearch分词器介绍</h2><h3 id="内置分词器"><a href="#内置分词器" class="headerlink" title="内置分词器"></a>内置分词器</h3><p>Elasticsearch 核心功能就是数据检索，首先通过索引将文档写入es。查询分析则主要分为两个步骤：</p><ol><li>词条化：分词器将输入的文本转为一个个的词条流。</li><li>过滤：比如停用词过滤器会从词条中除去不相干的词条；另外还有同义词过滤器，小写过滤器等。</li></ol><p>Elasticsearch中内置了多种分词器可以供使用。</p><p>内置分词器：</p><table><thead><tr><th>分词器</th><th>作用</th></tr></thead><tbody><tr><td>Standard Analyzer</td><td>标准分词器，适用于英语等</td></tr><tr><td>Simple Analyzer</td><td>简单分词器，基于非字母字符进行分词，单词会被转为小写字母</td></tr><tr><td>Whitespace Analyzer</td><td>空格分词器，按照空格进行切分</td></tr><tr><td>Stop Analyzer</td><td>停用词分词器，类似于简单分词器，但是增加了停用词的功能</td></tr><tr><td>Keyword Analyzer</td><td>关键词分词器，输入文本等于输出文本（不分词）</td></tr><tr><td>Pattern Analyzer</td><td>利用正则表达式对文本进行切分的分词器，支持停用词</td></tr><tr><td>Language Analyzer</td><td>针对特定语言的分词器</td></tr><tr><td>Fingerprint Analyzer</td><td>指纹分析仪分词器，通过创建标记进行重复检测</td></tr></tbody></table><h3 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h3><p>在 ES 中，使用比较多的中文分词器是 elasticsearch-analysis-ik，这个是es的一个第三方插件，代码托管在 GitHub上：</p><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>它提供了两种使用方式：</p><p>第一种：</p><ol><li>首先打开上述中文分词器地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li><li>在 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 页面找到最新的正式版，下载下来。</li><li>将下载文件解压。</li><li>在 es/plugins 目录下，新建ik目录，并将解压后的所有文件拷贝进去。</li><li>重启 es 服务。</li></ol><p>第二种：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br></pre></td></tr></table></figure><p>PS：</p><p>需要注意ES版本：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-722.png"></p><p>推荐第一种安装方式，我们可以方便的找到配置文件更改配置。</p><p>我们如果不下载安装包的话也可以自己编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/medcl/elasticsearch-analysis-ik</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-analysis-ik</span><br><span class="line">git checkout tags/&#123;version&#125;</span><br><span class="line">mvn clean</span><br><span class="line">mvn compile</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>需要注意版本。</p><p>Elasticsearch启动时会提示加载我们插件：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-723.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我们创建一个索引来测试一下：</p><p>这儿先使用Postman来测试一下，使用PUT请求创建TEST索引。</p><p>PUT <a href="http://localhost:9200/test">http://localhost:9200/test</a></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-724.png"></p><p>在该索引中进行分词测试：</p><p>POST <a href="http://localhost:9200/test/_analyze">http://localhost:9200/test/_analyze</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line"><span class="attr">&quot;text&quot;</span>:<span class="string">&quot;美国留给伊拉克的是个烂摊子吗&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-725.png"></p><p>两种分词模式 <code>ik_max_word</code> 和 <code>ik_smart</code>， <code>ik_max_word</code> 的分词更细致。</p><p>如果我们对 累觉不爱 进行分析呢？</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-726.png"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-727.png"></p><p>可以看到哪种分法都不太符合我们的期望，我们想把 累觉不爱 看做一个词，该如何处理呢。</p><p>这就需要自定义扩展词库。</p><h4 id="自定义扩展词库"><a href="#自定义扩展词库" class="headerlink" title="自定义扩展词库"></a>自定义扩展词库</h4><h5 id="本地自定义"><a href="#本地自定义" class="headerlink" title="本地自定义"></a>本地自定义</h5><p>在 plugins/ik/config 目录下，新建 ext.dic 文件（文件名任意），在该文件中可以配置自定义词库。</p><p>在新建文件里添上我们的 累觉不爱 。（如果有多个词，换行写入即可）</p><p>同时打开该目录下的 IKAnalyzer.cfg.xml 文件，如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启ES。</p><p>我们再用分词测试，可以看到两种分词模式都能得到我们想要的结果。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-728.png"></p><h5 id="远程词库"><a href="#远程词库" class="headerlink" title="远程词库"></a>远程词库</h5><p>也可以配置远程词库，远程词库支持热更新（不用重启ES）。</p><p>热更新只需要提供一个接口，接口返回扩展词即可。</p><p>具体使用方式如下，新建一个 SpringBoot 项目，引入 Web 依赖即可，然后在 resource/static 文件夹下新建 ext.dic ，写入扩展词。</p><p>接下来在IKAnalyzer.cfg.xml 文件里配置远程扩展接口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://localhost:8080/ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>热更新，主要是响应头的 <code>Last_Modified</code> 或者 <code>ETag</code> 字段发生变化， ik 就会自动重新加载远程依赖扩展词典。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文介绍了Elasticsearch 分词器，以及如何使用中文分词器，以及分词器的词库配置。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上一篇文章我们介绍了Elasticsearch的一些核心概念，本篇文章我们来看下Elasticsearch的分词器。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;Elasticsearch分词器介绍&quot;&gt;&lt;a href=&quot;#Elasticsearch分词器介绍&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch分词器介绍&quot;&gt;&lt;/a&gt;Elasticsearch分词器介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（2）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89.html</id>
    <published>2021-06-03T13:54:00.000Z</published>
    <updated>2021-06-03T13:55:13.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们介绍了 Elasticsearch的一些特点及安装，这篇文章我们来看下 Elasticsearch的核心概念。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Elasticsearch核心概念介绍"><a href="#Elasticsearch核心概念介绍" class="headerlink" title="Elasticsearch核心概念介绍"></a>Elasticsearch核心概念介绍</h2><h3 id="Elasticsearch十大核心概念"><a href="#Elasticsearch十大核心概念" class="headerlink" title="Elasticsearch十大核心概念"></a>Elasticsearch十大核心概念</h3><h4 id="集群（cluster）"><a href="#集群（cluster）" class="headerlink" title="集群（cluster）"></a>集群（cluster）</h4><p>一个或者多个安装了 es 节点的服务器组织在一起，就是集群，这些节点共同持有数据，共同提供搜索服务。</p><p>一个集群有一个名字，这个名字是集群的唯一标识，该名字称为 cluster name ，默认的集群名称是 elasticsearch，具有相同名称的节点才会组成一个集群。</p><p>可以在 config/elasticsearch.yml 文件中配置集群名称：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br></pre></td></tr></table></figure><p>在集群中，节点的状态有三种：<font color="green">绿色</font>、<font color="yellow">黄色</font>、<font color="red">红色</font>。</p><ul><li><font color="green">绿色</font>：节点运行状态为健康状态。所有的主分片（primary shards）、副本分片（replica shards）都可以正常工作。</li><li><font color="yellow">黄色</font>：表示节点的运行状态为警告状态。所有的主分片都正常，至少有一个副本分片不能正常工作。</li><li><font color="red">红色</font>：表示集群无法正常工作。表示至少有一个主分片及其全部副本分片不能正常工作，部分数据丢失。</li></ul><h4 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h4><p>集群中的一个服务器就是一个节点，节点中会存储数据，同时参与集群的索引以及搜索功能，一个节点想要加入一个集群，只需要配置一下集群名称即可。默认情况下，如果我们启动了多个节点，多个节点还能够互相发现彼此，那么它们会自动组成一个集群，这是 es 默认提供的，但是这种方式并不可靠，有可能会发生脑裂现象。所以在实际使用中，建议一定要手动配置一下集群信息。</p><h4 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h4><p>索引可以从两方面来理解：</p><p><strong>名词</strong></p><p>具有相似特征文档的集合。</p><p><strong>动词</strong></p><p>索引数据以及对数据进行索引操作。</p><h4 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h4><p>类型是索引上的分类或分区。在 Elasticsearch 6.0 之前，一个索引中可以有多个类型，从 Elasticsearch 7.0 开始，一个索引中只能有一个类型。在 Elasticsearch 6.x 版本中，依然保持兼容，依然支持单 index 多个 type 结构，但是已经不建议这么使用。</p><h4 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h4><p>一个可以被索引的单元，例如一个用户的文档，一个产品的文档等等。文档都是 JSON 格式的。</p><h4 id="分片（Shards）"><a href="#分片（Shards）" class="headerlink" title="分片（Shards）"></a>分片（Shards）</h4><p>索引都是存储在节点上的，但是受限于节点的空间大小以及数据处理能力，单个节点的处理效果可能不理想，此时我们可以对索引进行分片。当我们创建一个索引的时候，就需要指定分片的数量。每个分片本身也是一个功能完善并且独立的索引。</p><p>默认情况下，一个索引会自动创建 5 个分片，并且为每一个分片创建一个副本。</p><h4 id="副本（Replicas）"><a href="#副本（Replicas）" class="headerlink" title="副本（Replicas）"></a>副本（Replicas）</h4><p>副本也就是备份，是对主分片的一个备份。</p><p>主分片和副本都可以对外提供查询服务。当数据写入时，会先从主分片上完成数据索引，再分发到副本分片上。</p><p>当主分片不可用时，会从副本分片中选择一个成为主分片。</p><p>主分片和对应的副本分片是不会在同一个节点上的，所以副本分片数的最大值是 n -1（其中n为节点数）。</p><h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4><p>集群中对索引的定义信息，例如索引的分片数、副本数等等。</p><h4 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h4><p>Mapping 保存了定义索引字段的存储类型、分词方式、是否存储等信息。</p><h4 id="Analyzer"><a href="#Analyzer" class="headerlink" title="Analyzer"></a>Analyzer</h4><p>字段分词方式的定义。</p><h3 id="Elasticsearch-VS-关系型数据库"><a href="#Elasticsearch-VS-关系型数据库" class="headerlink" title="Elasticsearch VS 关系型数据库"></a>Elasticsearch VS 关系型数据库</h3><p>PS：本表只是类似比较，可以按照关系型数据库的类型理解 ES 里的概念。</p><table><thead><tr><th>关系型数据库</th><th>ElasticSearch</th></tr></thead><tbody><tr><td>数据库</td><td>索引</td></tr><tr><td>表</td><td>类型</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表结构</td><td>映射（Mapping）</td></tr><tr><td>SQL</td><td>DSL（Domain Specific Language）</td></tr><tr><td>select * from xxx</td><td>GET http://</td></tr><tr><td>update xxx set xxx=xxx</td><td>PUT http://</td></tr><tr><td>delete xxx</td><td>DELETE http://</td></tr><tr><td>索引</td><td>全文索引</td></tr></tbody></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本篇文章我们简单介绍了Elasticsearch的一些概念，理解这些概念，这对我们后面的学习是有帮助的。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面我们介绍了 Elasticsearch的一些特点及安装，这篇文章我们来看下 Elasticsearch的核心概念。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;Elasticsearch核心概念介绍&quot;&gt;&lt;a href=&quot;#Elasticsearch核心概念介绍&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch核心概念介绍&quot;&gt;&lt;/a&gt;Elasticsearch核心概念介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch学习笔记（1）</title>
    <link href="https://www.sakuratears.top/blog/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89.html</id>
    <published>2021-06-03T13:44:00.000Z</published>
    <updated>2021-06-03T13:53:40.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久就打算学习 Elasticsearch 的一些知识了，看了许多资料，把学习过程中的想法和笔记记录下来。</p><p>好了，废话不多说，我们开始吧。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Elasticsearch简介"><a href="#Elasticsearch简介" class="headerlink" title="Elasticsearch简介"></a>Elasticsearch简介</h2><p>要了解 Elasticsearch，就不得不提到 Lucene。它是 Elasticsearch 底层使用的全文检索工具。</p><h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><p>Lucene 是一个开源、免费、高性能、纯 Java 编写的全文检索工具包，它是开源领域一款非常好的检索工具包。</p><p>早在2005年，Lucene 就成为了 Apache 顶级的开源项目，它的作者是 Doug Cutting，他的另外一个作品就是大名鼎鼎的 Hadoop。</p><p>需要注意的是 Lucene 只是一个全文检索工具包，并非一个完整的搜索引擎。开发者可以基于 Lucene 开发出自己的搜索引擎，比较著名的、现成解决方案比如 Solr。</p><p>当然，在目前分布式和大数据环境下，Elasticsearch 更胜一筹。</p><p>Lucene 主要有以下特点：</p><ul><li>使用简单</li><li>跨语言</li><li>强大的搜索引擎</li><li>索引速度快</li><li>索引文件兼容不同的平台</li></ul><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>Elasticsearch 是一个分布式、可扩展、近实时性的高性能搜索引擎与数据分析引擎。</p><p>Elasticsearch 也是基于 Java 编写，通过进一步封装 Lucene ，将搜索的复杂性屏蔽起来，开发者只需要一套简单的 RESTful API 就可以操作全文检索。</p><p>Elasticsearch 在分布式环境下表现优异，这也是它受欢迎的原因之一，它支持 PB 级别的结构化或者非结构化数据的海量处理。</p><p>整体上来说，Elasticsearch 有三大功能：</p><ul><li>数据搜索</li><li>数据分析</li><li>数据存储</li></ul><p>Elasticsearch 主要有如下特点：</p><ol><li>分布式实时文件存储；</li><li>实时分析的分布式搜索引擎；</li><li>高可扩展性；</li><li>可拔插的插件支持。</li></ol><h2 id="Elasticsearch-各种安装"><a href="#Elasticsearch-各种安装" class="headerlink" title="Elasticsearch 各种安装"></a>Elasticsearch 各种安装</h2><h3 id="单节点安装"><a href="#单节点安装" class="headerlink" title="单节点安装"></a>单节点安装</h3><p>首先打开 Es 官网，找到 Elasticsearch 下载：</p><ul><li><a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></li></ul><p>然后点击下载按钮，选择合适的版本直接下载即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-713.png"></p><p>将下载文件解压，解压后的目录含义如下：</p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>modules</td><td>依赖模块目录</td></tr><tr><td>lib</td><td>第三方依赖库</td></tr><tr><td>logs</td><td>输出日志目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr><tr><td>bin</td><td>可执行文件目录</td></tr><tr><td>config</td><td>配置文件目录</td></tr><tr><td>data</td><td>数据存储目录</td></tr></tbody></table><p>启动方式：</p><p>Mac: 进入到 bin 目录下，直接执行 ./elasticsearch 启动即可。</p><p>Windows: 进入到 bin 目录下，直接执行 elasticsearch.bat 启动即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-714.png"></p><p>看到started表示启动成功。</p><p>默认监听端口是9200，所以浏览器直接输入 localhost:9200 可以查看节点信息。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-715.png"></p><p>节点的名字和集群的名字（默认elasticsearch）我们都可以自定义配置。</p><p>打开 config/elasticsearch.yml 文件，可以配置集群名称和节点名称，配置方式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>重启后生效。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-716.png"></p><p>Elasticsearch支持矩阵：</p><ul><li><a href="https://www.elastic.co/cn/support/matrix">https://www.elastic.co/cn/support/matrix</a></li></ul><h3 id="HEAD-插件安装"><a href="#HEAD-插件安装" class="headerlink" title="HEAD 插件安装"></a>HEAD 插件安装</h3><p>Elasticsearch-head 插件，可以通过可视化的方式查看集群信息。</p><p>这里介绍两种安装思路。</p><h4 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h4><p>Chrome 直接在App Store 搜索 Elasticsearch-head，点击安装即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-717.png"></p><p>或者下载离线安装包。</p><h4 id="下载插件本身"><a href="#下载插件本身" class="headerlink" title="下载插件本身"></a>下载插件本身</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line">open http://localhost:9100/</span><br></pre></td></tr></table></figure><p>如果不成功可以尝试如下镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 淘宝镜像</span></span><br><span class="line">npm install -g grunt --registry=https://registry.npm.taobao.org <span class="comment">#安装grunt工具</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org <span class="comment">#安装cnpm，这是链接中国的镜像</span></span><br><span class="line">cnpm install <span class="comment">#使用cnpm代替npm编译es-head源码</span></span><br></pre></td></tr></table></figure><p>打开页面，注意此时看不到集群数据。原因在于这里通过跨域的方式请求集群数据，默认情况下，集群不支持跨域，所以就看不到集群数据。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-718.png"></p><p>解决办法如下：修改  config/elasticsearch.yml 文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跨域支持</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>重启即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-719.png"></p><h3 id="分布式安装"><a href="#分布式安装" class="headerlink" title="分布式安装"></a>分布式安装</h3><p>假设我们集群结构如下：</p><ul><li>一主二从</li><li>master端口是9200，slave端口分别是9201和9202</li></ul><p>则我们应该如下配置。</p><p>首先修改master的 config/elasticsearch.yml 文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群支持</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>配置完成后重启master。</p><p>将es压缩包解压两份，分别命名为slave01和slave02，代表两个从机。</p><p>分别对其进行配置。</p><p>slave01 的配置如下 config/elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave01</span></span><br><span class="line"><span class="comment"># 集群名称必须一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave01</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9201</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;127.0.0.1&quot;</span>]</span><br></pre></td></tr></table></figure><p>slave02 的配置如下 config/elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave02</span></span><br><span class="line"><span class="comment"># 集群名称必须一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave02</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9202</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;127.0.0.1&quot;</span>]</span><br></pre></td></tr></table></figure><p>然后分别启动slave01和slave02，然后可以在head插件上查看集群信息。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-720.png"></p><h3 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h3><p>Kibana 是 Elastic 公司推出的一个针对 Elasticsearch 的分析以及数据可视化平台，可以搜索、查看存放在 Elasticsearch 中的数据。</p><p>需要注意安装 Kibana 版本需要与 Elasticsearch  版本一致，不然可能会出现问题。</p><p>安装步骤如下：</p><ol><li>下载 Kibana ： <a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></li><li>解压</li><li>配置 Elasticsearch 的地址信息（可选，如果ES 是默认地址及端口，可以不用配置，具体配置文件是 config/kibana.yml）</li><li>执行 /bin/kibana 文件（命令 Mac：./kibana   Windows: kibana.bat）</li><li>访问 localhost:5601</li></ol><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-721.png"></p><p>Kibana 安装好之后，首次打开时，可以选择初始化 ES 提供的测试数据，也可以不使用。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本节我们介绍了 Elasticsearch ，了解到其底层主要由 Lucene 实现，并对 Lucene 做了简单介绍，另外我们学习了如何安装 Elasticsearch 及其插件，以及 Kibana，这对我们后面Elasticsearch的学习是有帮助的。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很久就打算学习 Elasticsearch 的一些知识了，看了许多资料，把学习过程中的想法和笔记记录下来。&lt;/p&gt;
&lt;p&gt;好了，废话不多说，我们开始吧。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>不思议迷宫布拉卡达学院1201分享</title>
    <link href="https://www.sakuratears.top/blog/%E4%B8%8D%E6%80%9D%E8%AE%AE%E8%BF%B7%E5%AE%AB%E5%B8%83%E6%8B%89%E5%8D%A1%E8%BE%BE%E5%AD%A6%E9%99%A21201%E5%88%86%E4%BA%AB.html"/>
    <id>https://www.sakuratears.top/blog/%E4%B8%8D%E6%80%9D%E8%AE%AE%E8%BF%B7%E5%AE%AB%E5%B8%83%E6%8B%89%E5%8D%A1%E8%BE%BE%E5%AD%A6%E9%99%A21201%E5%88%86%E4%BA%AB.html</id>
    <published>2021-06-01T14:57:00.000Z</published>
    <updated>2021-06-01T15:03:47.900Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>玩迷宫已经很长一段时间了，自从从大佬那儿搞到一个宙斯号后，就一直是两个号再玩。</p><p>到现在已经爬了3个迷宫的1201了，分别是低语之森、德古拉城堡和诸神的棋盘。</p><p>学院是第四个，爬了这些，除了在B站上分享了两个以外外，也没有太多的记录。</p><p>今天写篇博文记录下，以后的爬高之旅估计也会记录。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>好了，不那么多废话了，开始说下学院1201的攻略及要点吧。</p><h2 id="攻略"><a href="#攻略" class="headerlink" title="攻略"></a>攻略</h2><p>迷宫：布拉卡达学院</p><p>阵容：建筑师出战链接暗裔、阿瓦隆</p><p>试剂：棱光药剂</p><p>神器：菩提佛珠</p><p>称号：冒险系异界游侠、战斗系不点、巨龙系亚龙血统只点1级</p><p>挂树：时之术士</p><p>爬高准备：</p><ol><li>建筑师建永恒之塔30-60boss层黑永恒套 </li><li>神龙许愿出龙力（有龙语更好 前期能省不少卷轴） </li><li>120-130层之前需要阿瓦隆预知之力3级（满级），奈米庇佑3级（满级）</li><li>前期升级 鞋子-探索者长靴（进入下一层50%得原石） 优先升满衣服-荆棘铠甲（反伤+50%） 戒指-扭曲时光之眼（时停每轮-10%小怪血量）腰带-宝藏腰带（加50%开箱子获得高级卷轴）</li></ol><p>普通层玩法：</p><p>永恒套时停（需要10轮以上 不够下楼前鞋子换奥丁战靴（气系效果+30%））配合扭曲时光之眼10回合全灭小怪。</p><p>前期地刺、龙之利爪，中期换上梅林的奥术长靴（低阶魔法30%不消耗卷轴）地震，后期末日审判。</p><p>Boss层玩法：</p><p>腰带换黑棘的刻痕腰带（降低受到Boss伤害+25%），鞋子换稳固长靴（无法闪避攻击）。</p><p>100-900层：</p><p>1.拖回合 2.拖回合 3.冰锥/龙威（记得脱佛珠）4.拖回合 5.拖回合 6.拖回合 7.拖回合 8.拖回合 9.3级预知之力（Boss吃1） 10.拖回合 11.拖回合 12.3级奈米庇佑 13.瓦解 14.链接畸变体 （Boss吃2 链接目标被吃就sl）场上需要有一只加攻的自爆怪 15.反伤 16.反伤 17.反伤 18.反伤 19.变形 20.奈米庇佑 21.反伤 22.斩杀</p><p>900层以上：</p><p>1.拖回合 2.拖回合 3.龙威4.拖回合 5.拖回合 6.拖回合 7.预知之力 8.庇佑 9.瓦解10.任意链接一只 11砍12砍13砍14砍。</p><p>有送卷轴的屋子时卷轴的优先级为:变形＞地震＝末日＞地刺＞复活＞时停＞瓦解＞冰锥＞超重力。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>110-130的boss可以永恒下楼手撕，而后再按照上述套路操作。</li><li>140+层后反伤过boss层，不要穿永恒下楼。</li><li>本次活动主题可以学习魔法系、战斗系、冒险系三系称号，魔法系走气传时停轮数更多，爬起来会更简单。</li><li>没有本次活动主题（没魔法系）也不用担心，学院尸体有个灵魂，使用后可以不受限制释放魔法，这也是点灯异界的原因。</li><li>boss只有在不被控制的情况下才会攒饥饿度，如果100-900层的第7步观察boss还在被控制，记得使用诅咒、瓦解、失明等移除下boss的控制效果，不然后面操作会对不上。</li><li>如果拿到法老面具，打boss的时候可以带上，运气好的话可以拘住boss灵魂，里面有一个每下楼给一颗原石的灵魂。</li><li>教学楼事件前期优先金融课（3次满）&gt; 调查 = 炼金课 &gt; 其他， 调查拿到2把钥匙后出原石和卷轴，炼金必出原石。后期可以选美食课什么的加加属性即可。</li><li>时停卷轴基本用不上，后期（1000+层）可以命运套下楼，用时停卷轴过小怪层，增加属性评分。</li><li>可以攒些食物（美食课）和灵魂（异界翻尸体、法老面具），学院有装备使用灵魂50%概率+攻击魔力，使用食物+血量，可以提高评分。</li><li>学院很多装备组合可以百分比提高攻击，爬到1201层后，最后点出战斗系剑圣称号，可以大幅提高攻击，获得更高的结算评分。</li></ol><h2 id="附上1201图及视频"><a href="#附上1201图及视频" class="headerlink" title="附上1201图及视频"></a>附上1201图及视频</h2><p>登顶图片：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-1.jpg"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-2.jpg"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-3.jpg"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-4.jpg"></p><p>登顶视频：</p><iframe src="//player.bilibili.com/player.html?aid=205985323&bvid=BV1eh411e7r9&cid=347132323&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://tieba.baidu.com/p/6553083033">布达拉学院1201详细攻略</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;玩迷宫已经很长一段时间了，自从从大佬那儿搞到一个宙斯号后，就一直是两个号再玩。&lt;/p&gt;
&lt;p&gt;到现在已经爬了3个迷宫的1201了，分别是低语之森、德古拉城堡和诸神的棋盘。&lt;/p&gt;
&lt;p&gt;学院是第四个，爬了这些，除了在B站上分享了两个以外外，也没有太多的记录。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏" scheme="https://www.sakuratears.top/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="不思议迷宫" scheme="https://www.sakuratears.top/tags/%E4%B8%8D%E6%80%9D%E8%AE%AE%E8%BF%B7%E5%AE%AB/"/>
    
    <category term="游戏" scheme="https://www.sakuratears.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>记一次线上问题（dubbo连接超时问题）</title>
    <link href="https://www.sakuratears.top/blog/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%EF%BC%88dubbo%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%EF%BC%88dubbo%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%EF%BC%89.html</id>
    <published>2021-05-30T11:53:00.000Z</published>
    <updated>2021-05-30T12:02:17.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天下午3点左右，我们业务用户反映我们的app出现大面积登录成功，访问缓慢的情况。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-708.png"></p><p>查询后台日志发现大量出现<code>TimeoutException</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2021-05-11 16:09:44.785, end time: 2021-05-11 16:10:34.796, client elapsed: 0 ms, server elapsed: 5011 ms, timeout: 5000 ms, request: Request [id=7467, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=xxxx, parameterTypes=[class com.xxxx.xjd.late.common.dto.xxx.xxxx], arguments=[com.xxxx.xjd.late.common.dto.xxxx.xxxx@e2adb42], attachments=&#123;path=com.xxxx.xjd.late.api.xxxx, interface=com.xxxx.xjd.late.api.xxxx, version=1.0.0, timeout=50000, group=xxxx-xxxx&#125;]], channel: /10.0.0.1:56811 -&gt; /10.0.0.3:8077</span><br></pre></td></tr></table></figure><p>PS：Linux指令，查询某个关键字最新一行数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;TimeoutException&#x27;</span> xxxxx.log | tail -n 1</span><br></pre></td></tr></table></figure><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="初期分析"><a href="#初期分析" class="headerlink" title="初期分析"></a>初期分析</h2><p>线上出现大量dubbo请求超时，我们开始分析问题，一开始认为是网络原因导致的，咨询了网络运维组，运维组排查内网环境说网络正常。</p><p>而且经过跟踪，我们发现有部分请求是成功的。</p><p>由于我们是分布式部署，A模块称为client项目，用于为App提供接口服务，其调用了service项目（主要与数据库、其他模块、三方等交互）来进行服务。</p><p>我们发现clinet项目的请求会访问到service项目，但是处理过程中超时了，也没有任何业务异常。</p><p>而且超时接口广泛，不是单一一个接口出现超时异常。</p><p>我们找到了一个最简单的接口，这个接口是前端操作后，app将数据发送过来，service处理后保存入库（普通save操作）。</p><p>而后我们通过日志找到这个用户，登录堡垒机查询数据库发现刚才用户数据已经保存成功。</p><p>因此我们大概意识到是数据库执行缓慢导致的。</p><h2 id="问题浮现"><a href="#问题浮现" class="headerlink" title="问题浮现"></a>问题浮现</h2><p>正在我们分析过程中，数据库管理员找到我们，说xxx应用是不是你们负责，再跑什么业务，现在数据库很卡，CPU要打满了。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-709.png"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-710.png"></p><p>在数据库管理员的帮助下，我们定位到了一些慢SQL，及一个一直在执行的插入SQL，其IP定位到我们的管理后台。</p><p>找到了相关项目，我们根据SQL定位到了如下这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//....部分代码略</span></span><br><span class="line">platfContentService.save(platfContent);<span class="comment">//新建或者编辑保存</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(platfContent.getType()))&#123;<span class="comment">//公告群发</span></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            List&lt;String&gt; userIds = <span class="keyword">null</span>;</span><br><span class="line">            List&lt;PlatfInbox&gt; inboxs = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            Integer offset = <span class="number">0</span>;</span><br><span class="line">            Integer pageSize = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">if</span>(String.valueOf(Constant.targetUserEnum.ALL.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser()))&#123;</span><br><span class="line">                userIds = platfContentService.findUserIdsFromPlatfUser(<span class="keyword">null</span>,</span><br><span class="line">                        offset,pageSize);</span><br><span class="line">                <span class="keyword">while</span>(userIds != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; userIds.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(String userId : userIds)&#123;</span><br><span class="line">                        inboxs.add(encapsulatePlatfInbox(userId,platfContent));</span><br><span class="line">                    &#125;</span><br><span class="line">                    platfContentService.batchInsertPlatfInbox(inboxs);</span><br><span class="line">                    userIds.clear();</span><br><span class="line">                    inboxs.clear();</span><br><span class="line">                    offset = offset+pageSize;</span><br><span class="line">                    userIds =  platfContentService.findUserIdsFromPlatfUser(<span class="keyword">null</span>,offset,pageSize);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(String.valueOf(Constant.targetUserEnum.YQ_USER.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser())</span><br><span class="line">                    || String.valueOf(Constant.targetUserEnum.JK_USER.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser())</span><br><span class="line">                    || String.valueOf(Constant.targetUserEnum.YHK_USER.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser())) &#123;</span><br><span class="line">                userIds = platfContentService.findUserIdsFromLateAccount(platfContent,offset,pageSize);</span><br><span class="line">                <span class="keyword">while</span>(userIds.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(String userId : userIds)&#123;</span><br><span class="line">                        inboxs.add(encapsulatePlatfInbox(userId,platfContent));</span><br><span class="line">                    &#125;</span><br><span class="line">                    platfContentService.batchInsertPlatfInbox(inboxs);</span><br><span class="line">                    userIds.clear();</span><br><span class="line">                    inboxs.clear();</span><br><span class="line">                    offset = offset+pageSize;</span><br><span class="line">                    userIds =  platfContentService.findUserIdsFromLateAccount(platfContent,offset,pageSize);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">j.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">j.setMsg(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line"><span class="comment">//....部分代码略</span></span><br></pre></td></tr></table></figure><p>这段代码逻辑如下：</p><p>我们管理后台原来有个发送公告消息模块，运营之前没用过，昨天下午使用了，添加了一条全体公告。</p><p>代码的逻辑是开个线程去批量将每个用户查出来拿到id，在更新进inbox消息表……</p><p>由于用户量巨大，导致对数据库造成巨大压力，原来一些慢SQL的问题也浮现了。</p><p>同时这种方案开启线程去处理，如果正好服务挂了，剩余部分数据将得不到有效处理。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>可以看到代码是开启线程处理数据，我们将管理后台重启即可。而后数据库压力缓解，系统服务恢复正常。</p><p>关于这部分问题，原来的设计是每有一条消息，向数据库里插入一条消息记录。</p><p>通过查询可用看到消息表数据量已达到6600w。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-711.png"></p><p>我们后面通过分析优化，基本处理方法如下：</p><ol><li>对于一些全局消息，只记录一条即可，并通过Redis缓存辅助处理。</li><li>对于具体用户个人消息，设置保存时限，定时清除部分实际无用消息，并通过缓存近期消息提高查询效率。</li></ol><p>同时DBA给我们拉取了一些慢查询，我们需要处理及优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Query <span class="number">10</span>: <span class="number">0.64</span> QPS, <span class="number">5.78</span>x concurrency, ID <span class="number">0xCC2F786C3D667858</span> <span class="keyword">at</span> byte <span class="number">593627453</span></span><br><span class="line"># This item <span class="keyword">is</span> included <span class="keyword">in</span> the report because it <span class="keyword">matches</span> <span class="comment">--limit.</span></span><br><span class="line"># Scores: V<span class="operator">/</span>M <span class="operator">=</span> <span class="number">5.81</span></span><br><span class="line"># <span class="type">Time</span> <span class="keyword">range</span>: <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T13:<span class="number">34</span>:<span class="number">04</span> <span class="keyword">to</span> <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T16:<span class="number">18</span>:<span class="number">59</span></span><br><span class="line"># Attribute    pct   total     min     max     avg     <span class="number">95</span><span class="operator">%</span>  stddev  median</span><br><span class="line"># <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"># Count          <span class="number">2</span>    <span class="number">6294</span></span><br><span class="line"># <span class="keyword">Exec</span> <span class="type">time</span>      <span class="number">2</span>  <span class="number">57150</span>s      <span class="number">3</span>s     <span class="number">89</span>s      <span class="number">9</span>s     <span class="number">21</span>s      <span class="number">7</span>s      <span class="number">6</span>s</span><br><span class="line"># Lock <span class="type">time</span>      <span class="number">0</span>   <span class="number">867</span>ms    <span class="number">56</span>us    <span class="number">17</span>ms   <span class="number">137</span>us   <span class="number">159</span>us   <span class="number">521</span>us    <span class="number">98</span>us</span><br><span class="line"># <span class="keyword">Rows</span> sent      <span class="number">0</span>   <span class="number">6.15</span>k       <span class="number">1</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">0</span>       <span class="number">1</span></span><br><span class="line"># <span class="keyword">Rows</span> examine  <span class="number">39</span>  <span class="number">39.00</span>G   <span class="number">6.34</span>M   <span class="number">6.35</span>M   <span class="number">6.35</span>M   <span class="number">6.29</span>M       <span class="number">0</span>   <span class="number">6.29</span>M</span><br><span class="line"># Query size     <span class="number">0</span>   <span class="number">1.05</span>M     <span class="number">167</span>     <span class="number">194</span>  <span class="number">174.23</span>  <span class="number">174.84</span>    <span class="number">4.27</span>  <span class="number">166.51</span></span><br><span class="line"># String:</span><br><span class="line"># Hosts        <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">3173</span><span class="operator">/</span><span class="number">50</span><span class="operator">%</span>), <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">3121</span><span class="operator">/</span><span class="number">49</span><span class="operator">%</span>)</span><br><span class="line"># Users        xxxx_web_w</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   <span class="number">1</span>us</span><br><span class="line">#  <span class="number">10</span>us</span><br><span class="line"># <span class="number">100</span>us</span><br><span class="line">#   <span class="number">1</span>ms</span><br><span class="line">#  <span class="number">10</span>ms</span><br><span class="line"># <span class="number">100</span>ms</span><br><span class="line">#    <span class="number">1</span>s  ################################################################</span><br><span class="line">#  <span class="number">10</span>s<span class="operator">+</span>  #################</span><br><span class="line"># Tables</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;xxxx_detail&#x27;</span>\G</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `xxxx_detail`\G</span><br><span class="line"># EXPLAIN <span class="comment">/*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">                <span class="built_in">COUNT</span>(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">FROM</span> xxxx_detail a</span><br><span class="line">                 <span class="keyword">WHERE</span> a.user_id <span class="operator">!=</span> <span class="string">&#x27;xxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">AND</span> a.gmail_account <span class="operator">=</span> <span class="string">&#x27;xxx@gmail.com&#x27;</span> <span class="keyword">AND</span> a.del_flag <span class="operator">=</span> <span class="number">0</span>\G</span><br></pre></td></tr></table></figure><p>这条SQL用了 <code>!=</code> ，实际查询用不到索引，造成全表扫描。</p><p>可以看到这个SQL的操作是查询除了该用户，有没有其他用户使用这个邮箱，这种可以对<code>gmail_account</code>字段添加索引，如果涉及大量查询，可以考虑使用Redis来进行处理。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Query <span class="number">1</span>: <span class="number">2.98</span> QPS, <span class="number">21.71</span>x concurrency, ID <span class="number">0xEC345910A7B575A6</span> <span class="keyword">at</span> byte <span class="number">389892839</span></span><br><span class="line"># This item <span class="keyword">is</span> included <span class="keyword">in</span> the report because it <span class="keyword">matches</span> <span class="comment">--limit.</span></span><br><span class="line"># Scores: V<span class="operator">/</span>M <span class="operator">=</span> <span class="number">8.98</span></span><br><span class="line"># <span class="type">Time</span> <span class="keyword">range</span>: <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T13:<span class="number">34</span>:<span class="number">39</span> <span class="keyword">to</span> <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T16:<span class="number">18</span>:<span class="number">59</span></span><br><span class="line"># Attribute    pct   total     min     max     avg     <span class="number">95</span><span class="operator">%</span>  stddev  median</span><br><span class="line"># <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"># Count          <span class="number">9</span>   <span class="number">29401</span></span><br><span class="line"># <span class="keyword">Exec</span> <span class="type">time</span>     <span class="number">10</span> <span class="number">214024</span>s      <span class="number">1</span>s    <span class="number">133</span>s      <span class="number">7</span>s     <span class="number">23</span>s      <span class="number">8</span>s      <span class="number">4</span>s</span><br><span class="line"># Lock <span class="type">time</span>      <span class="number">0</span>      <span class="number">4</span>s    <span class="number">52</span>us    <span class="number">37</span>ms   <span class="number">122</span>us   <span class="number">176</span>us   <span class="number">436</span>us    <span class="number">93</span>us</span><br><span class="line"># <span class="keyword">Rows</span> sent     <span class="number">27</span> <span class="number">574.24</span>k      <span class="number">20</span>      <span class="number">20</span>      <span class="number">20</span>      <span class="number">20</span>       <span class="number">0</span>      <span class="number">20</span></span><br><span class="line"># <span class="keyword">Rows</span> examine  <span class="number">50</span>  <span class="number">50.01</span>G <span class="number">590.49</span>k   <span class="number">2.41</span>M   <span class="number">1.74</span>M   <span class="number">2.26</span>M <span class="number">467.04</span>k   <span class="number">1.86</span>M</span><br><span class="line"># Query size     <span class="number">0</span>   <span class="number">2.94</span>M     <span class="number">105</span>     <span class="number">105</span>     <span class="number">105</span>     <span class="number">105</span>       <span class="number">0</span>     <span class="number">105</span></span><br><span class="line"># String:</span><br><span class="line"># Hosts        <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">14751</span><span class="operator">/</span><span class="number">50</span><span class="operator">%</span>), <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">14650</span><span class="operator">/</span><span class="number">49</span><span class="operator">%</span>)</span><br><span class="line"># Users        xxxx_web_w</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   <span class="number">1</span>us</span><br><span class="line">#  <span class="number">10</span>us</span><br><span class="line"># <span class="number">100</span>us</span><br><span class="line">#   <span class="number">1</span>ms</span><br><span class="line">#  <span class="number">10</span>ms</span><br><span class="line"># <span class="number">100</span>ms</span><br><span class="line">#    <span class="number">1</span>s  ################################################################</span><br><span class="line">#  <span class="number">10</span>s<span class="operator">+</span>  ################</span><br><span class="line"># Tables</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;platf_inbox&#x27;</span>\G</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `platf_inbox`\G</span><br><span class="line"># EXPLAIN <span class="comment">/*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">                <span class="keyword">from</span> platf_inbox a</span><br><span class="line">                <span class="keyword">where</span> a.del_flag<span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> a.msg_type<span class="operator">=</span><span class="number">3</span></span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span> a._id <span class="keyword">desc</span></span><br><span class="line">                limit <span class="number">0</span>,<span class="number">20</span>\G</span><br></pre></td></tr></table></figure><p>该SQL查询20条最新消息，我们通过Redis缓存数据来减小数据库压力。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Query <span class="number">59</span>: <span class="number">0.09</span> QPS, <span class="number">0.49</span>x concurrency, ID <span class="number">0x9B09EF8E6B818E92</span> <span class="keyword">at</span> byte <span class="number">517278788</span></span><br><span class="line"># This item <span class="keyword">is</span> included <span class="keyword">in</span> the report because it <span class="keyword">matches</span> <span class="comment">--outliers.</span></span><br><span class="line"># Scores: V<span class="operator">/</span>M <span class="operator">=</span> <span class="number">3.53</span></span><br><span class="line"># <span class="type">Time</span> <span class="keyword">range</span>: <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T14:<span class="number">04</span>:<span class="number">08</span> <span class="keyword">to</span> <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T16:<span class="number">03</span>:<span class="number">49</span></span><br><span class="line"># Attribute    pct   total     min     max     avg     <span class="number">95</span><span class="operator">%</span>  stddev  median</span><br><span class="line"># <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"># Count          <span class="number">0</span>     <span class="number">668</span></span><br><span class="line"># <span class="keyword">Exec</span> <span class="type">time</span>      <span class="number">0</span>   <span class="number">3517</span>s      <span class="number">2</span>s     <span class="number">64</span>s      <span class="number">5</span>s     <span class="number">13</span>s      <span class="number">4</span>s      <span class="number">4</span>s</span><br><span class="line"># Lock <span class="type">time</span>      <span class="number">0</span>   <span class="number">119</span>ms    <span class="number">83</span>us     <span class="number">4</span>ms   <span class="number">178</span>us   <span class="number">247</span>us   <span class="number">209</span>us   <span class="number">144</span>us</span><br><span class="line"># <span class="keyword">Rows</span> sent      <span class="number">0</span>     <span class="number">326</span>       <span class="number">0</span>       <span class="number">1</span>    <span class="number">0.49</span>    <span class="number">0.99</span>    <span class="number">0.50</span>       <span class="number">0</span></span><br><span class="line"># <span class="keyword">Rows</span> examine   <span class="number">3</span>   <span class="number">2.57</span>G   <span class="number">3.93</span>M   <span class="number">3.93</span>M   <span class="number">3.93</span>M   <span class="number">3.86</span>M    <span class="number">0.06</span>   <span class="number">3.86</span>M</span><br><span class="line"># Query size     <span class="number">0</span> <span class="number">546.01</span>k     <span class="number">837</span>     <span class="number">837</span>     <span class="number">837</span>     <span class="number">837</span>       <span class="number">0</span>     <span class="number">837</span></span><br><span class="line"># String:</span><br><span class="line"># Hosts        <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">338</span><span class="operator">/</span><span class="number">50</span><span class="operator">%</span>), <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">330</span><span class="operator">/</span><span class="number">49</span><span class="operator">%</span>)</span><br><span class="line"># Users        xxxx_web_w</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   <span class="number">1</span>us</span><br><span class="line">#  <span class="number">10</span>us</span><br><span class="line"># <span class="number">100</span>us</span><br><span class="line">#   <span class="number">1</span>ms</span><br><span class="line">#  <span class="number">10</span>ms</span><br><span class="line"># <span class="number">100</span>ms</span><br><span class="line">#    <span class="number">1</span>s  ################################################################</span><br><span class="line">#  <span class="number">10</span>s<span class="operator">+</span>  ######</span><br><span class="line"># Tables</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;xxxx_ocr_record&#x27;</span>\G</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `xxxx_ocr_record`\G</span><br><span class="line"># EXPLAIN <span class="comment">/*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">                <span class="operator">*</span></span><br><span class="line">                <span class="keyword">from</span> xxxx_ocr_record a</span><br><span class="line">                <span class="keyword">WHERE</span> a.ocr_result <span class="operator">=</span> <span class="number">1</span>  <span class="keyword">and</span> a.user_id<span class="operator">=</span><span class="string">&#x27;xxxxx&#x27;</span> <span class="keyword">order</span> <span class="keyword">BY</span> a.create_date <span class="keyword">DESC</span> LIMIT <span class="number">1</span>\G</span><br></pre></td></tr></table></figure><p>该表没有索引，虽然只查一条，但是全表扫描，查询效率非常低，需要添加索引。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-712.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从此次线上事故到恢复，查不到耗时3小时左右，感觉自己从中学到了一些经验。</p><p>对线上问题处理及优化有了更多的一些认识，虽然是程序逻辑问题造成的，但是仍有不少收获。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;昨天下午3点左右，我们业务用户反映我们的app出现大面积登录成功，访问缓慢的情况。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-708.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;查询后台日志发现大量出现&lt;code&gt;TimeoutException&lt;/code&gt;，如下：&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://www.sakuratears.top/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Dubbo" scheme="https://www.sakuratears.top/tags/Dubbo/"/>
    
    <category term="线上问题" scheme="https://www.sakuratears.top/tags/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客升级踩坑记</title>
    <link href="https://www.sakuratears.top/blog/Hexo%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E8%B8%A9%E5%9D%91%E8%AE%B0.html"/>
    <id>https://www.sakuratears.top/blog/Hexo%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E8%B8%A9%E5%9D%91%E8%AE%B0.html</id>
    <published>2021-05-30T11:20:00.000Z</published>
    <updated>2021-06-01T15:14:13.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前些时间一直在写博客，整理记录信息等，一直没有关心过博客架构版本的问题。</p><p>最近的一篇博文需要用到 <strong>MathJax</strong>，我原以为 <strong>MarkDown</strong> 是支持 <strong>MathJax</strong> 的，在本地编写时没有遇到任何问题。</p><p>但发布到GitHub上后，直接导致我整个blog挂掉了，检查发现<strong>Hexo</strong>如果要完美支持 <strong>MathJax</strong>，需要<code>hexo-renderer-kramed</code>等等东西。</p><p>还要修改blog架构的一些源码，感觉很复杂，并且配置也不是十分友好。</p><p>在浏览过程中，我发现 <strong>Hexo</strong> 版本已经发布到5.4.0了，我使用的 <strong>NexT</strong> 主题也已经到了7.x的版本。</p><p>心想一不做二不休，趁此次机会升级下blog架构。</p><p>开始以为很简单，结果直接导致我的blog没法启动/没法使用了，中间升级的过程特此记录下，希望能给也想升级Hexo blog的人一些帮助。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>本次想要升级的最终结果如下：</p><table><thead><tr><th>名称</th><th>当前版本</th><th>升级版本</th></tr></thead><tbody><tr><td>NodeJs</td><td>v10.2.0</td><td>v16.2.0</td></tr><tr><td>Hexo</td><td>v3.9.0</td><td>v5.4.0</td></tr><tr><td>NexT</td><td>v5.1.4</td><td>v7.8.0</td></tr></tbody></table><p>其中还伴随这一些插件的升级，由于一些低版本插件过时，可能存在被删除的风险，这也是本次升级的一个主要原因。</p><p>NodeJs的升级十分简单，直接在官网 <a href="https://nodejs.org/zh-cn/">NodeJs</a> 上下载最新版安装即可。</p><p>当然如果想安装其他版本，直接在 <a href="https://nodejs.org/zh-cn/download/releases/">NodeJs 以往的版本</a> 上下载即可。</p><p>安装好最新版后，直接使用命令即可显示Node版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\blog\newblog&gt;node -v</span><br><span class="line">v16.2.0</span><br></pre></td></tr></table></figure><p>我们安装<code>npm-upgrade</code>插件，使用<code>npm-upgrade</code>命令，可以看到依赖可以更新到的最新版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line"></span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-699.png"></p><p>开始我直接更新所有依赖，直接导致了<strong>Hexo</strong> blog不能正常启动。</p><h2 id="新建Hexo博客框架"><a href="#新建Hexo博客框架" class="headerlink" title="新建Hexo博客框架"></a>新建Hexo博客框架</h2><p>这儿我们从新搭建一个博客来解决blog框架的升级问题。</p><p>优点：</p><ol><li>重新搭建，所有依赖都依据比较新的版本，且不会出现不兼容的情况。</li><li>NexT v5.x 和 NexT v7.x 变化巨大，甚至仓库地址都发生了变化，我们需要重新拷贝主题文件。</li><li>我们之前搭建blog在里面修改了很多代码实现某些功能，很混乱，不方便查找和修改，升级后我们可以统一处理了。（这也是我升级的一个主要原因）</li><li>新版本NexT新增了一些功能，我们一些手动实现的效果现在可以直接使用配置<code>false</code>或者<code>true</code>解决了。</li><li>据说新版本blog加载速度有所提升，不知道真的假的。</li></ol><p>说到这儿，那我们开始吧，开始当然要检查下 <strong>Hexo</strong> 命令，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\blog\blog&gt;hexo -v</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 5.4.0</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Windows_NT 10.0.19042 win32 x64</span><br><span class="line">node: 16.2.0</span><br><span class="line">v8: 9.0.257.25-node.16</span><br><span class="line">uv: 1.41.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.1</span><br><span class="line">modules: 93</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.1</span><br><span class="line">openssl: 1.1.1k+quic</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure><p>hexo-cli: 4.2.0 , hexo: 5.4.0 即为当前最新版本，不是的需要升级下 <strong>Hexo</strong>。</p><p><strong>Hexo</strong>升级可以直接卸载重装即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo -g</span><br><span class="line">npm install hexo -g</span><br><span class="line"></span><br><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>升级好后，使用以下指令：</p><p>① hexo init blog</p><p>② cd blog</p><p>③ npm install</p><p>④ hexo s</p><p>可以看到一个v5.4.0版本的 <strong>Hexo</strong> 博客初始化框架在 <a href="http://localhost:4000/">http://localhost:4000/</a> 启动了。</p><p>打开blog文件夹下的<code>package.json</code>文件，可以看到blog的基本配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这儿我们把 hexo 版本手动改成5.4.0，同时移除<code>hexo-theme-landscape</code>，这儿主题对我们没用。</p><p>我们观察我们原来的配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.9.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span>: <span class="string">&quot;^3.9.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-htmlclean&quot;</span>: <span class="string">&quot;^2.7.22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-htmlmin&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-imagemin&quot;</span>: <span class="string">&quot;^4.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-minify-css&quot;</span>: <span class="string">&quot;^1.2.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-uglify&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^3.9.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-admin&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-autonofollow&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^0.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-baidu-sitemap&quot;</span>: <span class="string">&quot;^0.1.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^0.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-feed&quot;</span>: <span class="string">&quot;^1.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span>: <span class="string">&quot;^1.0.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-sitemap&quot;</span>: <span class="string">&quot;^1.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-helper-live2d&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-tag-aplayer&quot;</span>: <span class="string">&quot;^3.0.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-wordcount&quot;</span>: <span class="string">&quot;^3.0.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们添加如下插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-admin --save   <span class="comment"># blog 管理后台系统</span></span><br><span class="line">npm install hexo-deployer-git --save  <span class="comment"># blog发布到github使用</span></span><br><span class="line">npm install hexo-excerpt --save      <span class="comment"># 阅读更多插件</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save  <span class="comment"># 百度站点地图（SEO）</span></span><br><span class="line">npm install hexo-generator-feed --save     <span class="comment"># RSS使用</span></span><br><span class="line">npm install hexo-generator-searchdb --save  <span class="comment"># 本地搜索插件</span></span><br><span class="line">npm install hexo-generator-sitemap --save   <span class="comment"># 站点地图</span></span><br><span class="line">npm install hexo-helper-live2d --save      <span class="comment"># 萌妹子插件</span></span><br><span class="line">npm install hexo-related-popular-posts --save   <span class="comment"># 标记最受欢迎的文章（侧边栏显示）</span></span><br><span class="line">npm install hexo-symbols-count-time --save   <span class="comment"># 统计插件（替代wordcount）</span></span><br><span class="line">npm install hexo-tag-aplayer --save    <span class="comment"># 一款优秀的音乐播放器插件</span></span><br><span class="line">npm install hexo-autonofollow --save   <span class="comment"># 不跟踪外链插件（SEO）</span></span><br></pre></td></tr></table></figure><p>添加好后，我们需要下载<code>NexT</code>主题，新版的NexT主题可以在 <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a> 找到，旧版本的为 <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> 需要注意。</p><p>我们直接copy到我们项目。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>弄好后，我们开始配置blog下的<code>_config.yml</code>。</p><p>这个配置直接按照我们原先的blog，根据key对应过来就行。注意主题选择NexT。 theme: next</p><p>遇到的问题：</p><p><strong>问题1</strong>： language: zh-CN    原来blog是  zh-Hans</p><p>更改后，需要在 <code>blog\themes\next\languages\zh-CN.yml</code>添加没有被翻译的文字。</p><p><strong>问题2</strong>： avatar 头像</p><p>Hexo v5.4.0 移除了这个参数，这个参数现在由NexT主题控制，并可以通过配置实现旋转，十分方便。</p><p><strong>问题3</strong>： excerpt 阅读更多功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">5</span>  <span class="comment">#按层来算，也就是按代码块来算</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>PS: NexT 配置里也可以进行相关配置，但是涉及到具体显示多少行，只能在此配置。</p><p>下面主要说一下NexT的<code>_config.yml</code>配置，位置<code>blog\themes\next_config.yml</code>。</p><p><strong>问题4</strong>： creative_commons 参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">deed.zh</span></span><br></pre></td></tr></table></figure><p>这个参数会在文章结束后为自动为文章署名协议，不用我们改代码配置了。</p><p><strong>问题5</strong>： menu配置图标变化</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">support:</span> <span class="string">/support/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">photos:</span> <span class="string">/photos/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-camera</span></span><br></pre></td></tr></table></figure><p>图标配置均变为<code>fa fa-home</code>这种格式，不注意会直接不显示图标，十分坑。</p><p><strong>问题6</strong>：avatar 头像配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>头像可以实现接触旋转，不用再手动修改NexT源代码了。</p><p><strong>问题7</strong>： 阅读更多</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>主要由上面两项控制，hexo的配置文件里可以配置显示行数。</p><p><strong>问题8</strong>： 文章字数统计</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>改用<code>symbols_count_time</code>插件了，需要注意。</p><p><strong>问题9</strong>：reward和follow me 也有变化，原来follow_me只支持微信公众号</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">您的支持就是我创作的动力！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="attr">WeChat:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/qrcode_wechat_subscriber.jpg</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weixin</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure><p><strong>问题10</strong>： 标签云</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TagCloud settings for tags page.</span></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line">  <span class="comment"># All values below are same as default, change them by yourself.</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">18</span> <span class="comment"># Minimun font size in px</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">36</span> <span class="comment"># Maxium font size in px</span></span><br><span class="line">  <span class="attr">start:</span> <span class="string">&quot;#ADD8E6&quot;</span> <span class="comment"># Start color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">end:</span> <span class="string">&quot;#FFB6C1&quot;</span> <span class="comment"># End color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">amount:</span> <span class="number">300</span> <span class="comment"># Amount of tags, change it if you have more than 200 tags</span></span><br></pre></td></tr></table></figure><p>原来是更改NexT主题代码写死的，现在只要配置就可以了。</p><p><strong>问题11</strong>： 有用的小功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/javazwt</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure><p>可以添加快速回到顶部的按钮back2top，阅读进度条reading_progress，书签bookmark还有github_banner。</p><p>原来要实现均要改源码。</p><p><strong>问题12</strong>： needmoreshare2</p><p>安装 <code>hexo-next-share</code> 插件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install theme-next/hexo-next-share</span><br></pre></td></tr></table></figure><p>进行如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">needmoreshare:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">js:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js</span></span><br><span class="line">    <span class="attr">css:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css</span></span><br><span class="line">  <span class="attr">postbottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">box</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">vertical</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">bottomCenter</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line">  <span class="attr">float:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">topRight</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br></pre></td></tr></table></figure><p>分享图标便会出现在左下角。</p><p><strong>问题13</strong>： theme-next-pace</p><p>  引入pace插件，使页面加载的时候显示进度条</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure><p>  开启配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line"><span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">mac-osx</span></span><br></pre></td></tr></table></figure><p><strong>问题14</strong>： 用户自定义实现 custom_file_path</p><p>这是我要重点说的，该配置可以让用户有规则的配置其他内容，也方便我们以后的blog迁移，尽量做到无侵入。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="string">source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="attr">postBodyEnd:</span> <span class="string">source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>比如我们想在侧边栏添加音乐，想在文末添加阅读结束标记，添加背景，添加鼠标点击效果等，以前的做法参见这几篇文章。</p><p><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2.html">搭建自己的Hexo博客（1）</a><br><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89.html">搭建自己的Hexo博客（2）</a><br><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%883%EF%BC%89.html">搭建自己的Hexo博客（3）</a><br><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%884%EF%BC%89.html">搭建自己的Hexo博客（4）</a></p><p>现在只要在<code>source/_data</code>文件夹下（也可以不是这个文件夹，但是强烈建议放在<code>source</code>文件夹下，这里面存放着的都是与框架无关的东西）即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-700.png"></p><p>最终效果如下：</p><p><a href="https://www.sakuratears.top/">SakuraTears’blog</a></p><h2 id="博文压缩优化"><a href="#博文压缩优化" class="headerlink" title="博文压缩优化"></a>博文压缩优化</h2><p>原来我们blog使用的是gulp管理，还写了一些代码，不方便管理，现在我们引入<code>hexo-neat</code>来压缩博文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p>同时在Hexo配置文件里配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><p>配置就不详解了，我们使用<code>hexo g</code>命令，可以看到<code>public</code>文件夹下的内容已被压缩。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-701.png"></p><h2 id="其它不足"><a href="#其它不足" class="headerlink" title="其它不足"></a>其它不足</h2><p><strong>问题1</strong>： 音乐栏不对齐</p><p>这个问题我也比较诧异，原来博客是好的，我在这块没做改动，还要看看CSS样式仔细研究一下。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-702.png"></p><p><strong>问题2</strong>：阅读更多上面没法正好兼容图片</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-703.png"></p><p><strong>问题3</strong>：整体上感觉字体过大。</p><h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><h2 id="阅读更多图片问题"><a href="#阅读更多图片问题" class="headerlink" title="阅读更多图片问题"></a>阅读更多图片问题</h2><p>对于上面的第二个问题，后面我在查找资料时看到如下文章：</p><p><a href="https://stackoverflow.com/questions/32933052/hexo-excerpt-more-not-working-after-update">Hexo excerpt &lt;!—- more –&gt; not working after update</a></p><p>因此我想到查看<code>hexo-excerpt</code>代码是否有对于阅读更多的处理，搜索<code>hexo-excerpt.js</code>，在<code>node_modules</code>里找到该类。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-704.png"></p><p>可以看到是有对阅读更多进行处理的。</p><p>后面我想到是不是depth过深导致问题的原因，我把配置的depth改为了3。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">3</span>  <span class="comment">#按层来算，也就是按代码块来算</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>重新启动blog果然好了。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-705.png"></p><p>但引发的另一个问题就是其他一些文字摘要显示的太少了……</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-706.png"></p><p>后面我仔细想了下，原来配置用的<code>auto_excerpt</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt (Not recommend).</span></span><br><span class="line"><span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>其摘要是查找150个字后显示阅读更多。不会考虑格式，因此基本就是3行，所以我原来的blog没有出现这种问题。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-707.png"></p><p><code>hexo-excerpt</code>在检索时保留了原文的格式，按照深度来进行处理。</p><p>但是如果没有图片，只有文字的话，比如深度是5，我在深度3的位置添加 more 标签，只显示深度3的部分，说明插件是没问题的。</p><p>后面我终于想到了一种解决办法。</p><p>就是如果文章开头就是图片，而且只想要摘要显示这张图片，depth又比较深的话，摘要里会显示文字部分。</p><p>我在图片后面加了两个more解决问题。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/title/show1.jpg)</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h2 id="canvas-nest-支持"><a href="#canvas-nest-支持" class="headerlink" title="canvas_nest 支持"></a>canvas_nest 支持</h2><p>下载canvas_nest插件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>使用用户自定义的方式引入：</p><p>新建 <code>footer.swig</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script color=<span class="string">&quot;0,0,255&quot;</span> opacity=<span class="string">&quot;0.5&quot;</span> zIndex=<span class="string">&quot;-1&quot;</span> count=<span class="string">&quot;99&quot;</span> src=<span class="string">&quot;/lib/canvas-nest/canvas-nest.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在NexT主题的<code>_config.yml</code>配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>并将<code>footer.swig</code>放到Hexo的<code>source/_data</code>文件夹下。</p><p>如果不想在本地，也可以使用cdn。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script color=<span class="string">&quot;0,0,255&quot;</span> opacity=<span class="string">&quot;0.5&quot;</span> zIndex=<span class="string">&quot;-1&quot;</span> count=<span class="string">&quot;99&quot;</span> src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="添加网站底部建站时间支持"><a href="#添加网站底部建站时间支持" class="headerlink" title="添加网站底部建站时间支持"></a>添加网站底部建站时间支持</h2><p>同上，将如下代码放置<code>footer.swig</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.time_date %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;05/20/2018 00:00:00&quot;</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间 </span></span></span><br><span class="line"><span class="javascript">        now.setTime(now.getTime()+<span class="number">250</span>); </span></span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125; </span></span><br><span class="line"><span class="javascript">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span></span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML = <span class="string">&quot;本站已运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>; </span></span><br><span class="line"><span class="javascript">    &#125; </span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在NexT主题的<code>_config.yml</code>配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建站时间支持</span></span><br><span class="line"><span class="attr">time_date:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于blog框架的更新基本就到这儿了，后面如果再有更新我会继续更新到此博文里。</p><p>原来的blog源码我没有删除，而是进行了备份。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前些时间一直在写博客，整理记录信息等，一直没有关心过博客架构版本的问题。&lt;/p&gt;
&lt;p&gt;最近的一篇博文需要用到 &lt;strong&gt;MathJax&lt;/strong&gt;，我原以为 &lt;strong&gt;MarkDown&lt;/strong&gt; 是支持 &lt;strong&gt;MathJax&lt;/strong&gt; 的，在本地编写时没有遇到任何问题。&lt;/p&gt;
&lt;p&gt;但发布到GitHub上后，直接导致我整个blog挂掉了，检查发现&lt;strong&gt;Hexo&lt;/strong&gt;如果要完美支持 &lt;strong&gt;MathJax&lt;/strong&gt;，需要&lt;code&gt;hexo-renderer-kramed&lt;/code&gt;等等东西。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Hexo" scheme="https://www.sakuratears.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>编程与数学 - 求平方根</title>
    <link href="https://www.sakuratears.top/blog/%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%95%B0%E5%AD%A6-%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9.html"/>
    <id>https://www.sakuratears.top/blog/%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%95%B0%E5%AD%A6-%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9.html</id>
    <published>2021-05-16T13:06:00.000Z</published>
    <updated>2021-05-29T11:03:39.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天看到一道题目，是关于“对整数 n 开平方，不使用Math.sqrt实现”，感觉蛮有意思的，其解法用到了牛顿迭代法（Newton’s Method）。</p><p>就顺便研究了一下该解法和其他一些解法，特来分享记录一下。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>题目是非常容易理解的，我们直接来看相关解法吧。</p><h2 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h2><p>因为对没有求根公式的函数，求解它的零点是非常困难的，因此就发明了 牛顿迭代法（Newton‘s Method） 来逼近该函数的零点。具体方法如下图所示:</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-697.png" alt="upload successful"></p><p>设 $r$ 是 $f(x)=0$ 的根，选取 $x_0$ 作为 $r$ 的初始近似值，过点 $(x_0,f(x_0))$ 做曲线 $y=f(x)$ 的切线 $L$，$L:y=f(x_0)+f’(x_0)(x-x_0)$ ，则 $L$ 与 $x$ 轴交点的横坐标 $x_1=x_0-\frac{f(x_0)}{f’(x_0)}$，称 $x_1$ 为 $r$ 的一次近似值。过点 $(x_1,f(x_1))$ 做曲线 $y=f(x)$ 的切线，并求该切线与 $x$ 轴交点的横坐标  $x_2=x_1-\frac{f(x_1)}{f’(x_1)}$，称 $x_2$ 为 $r$ 的二次近似值。重复以上过程，得 $r$ 的近似值序列，其中，$x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}$ 称为 $r$ 的 $n+1$ 次近似值，上式称为牛顿迭代公式。</p><p>用牛顿迭代法解非线性方程，是把非线性方程 $f(x)=0$ 线性化的一种近似方法。把 $f(x)$ 在点 $x_0$ 的某邻域内展开成泰勒级数<br>$$f(x)=f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+R_n(x)$$<br>，取其线性部分（即泰勒展开的前两项），并令其等于 $0$，即 $f(x_0)+f’(x_0)(x-x_0)=0$，以此作为非线性方程 $f(x)=0$ 的近似方程，若 $f’(x)\not ={0}$，则其解为 $x_1=x_0-\frac{f(x_0)}{f’(x_0)}$， 这样，得到牛顿迭代法的一个迭代关系式： $x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}$。</p><p>已经证明，如果是连续的，并且待求的零点是孤立的，那么在零点周围存在一个区域，只要初始值位于这个邻近区域内，那么牛顿法必定收敛。 并且，如果不为0, 那么牛顿法将具有平方收敛的性能。 粗略的说，这意味着每迭代一次，牛顿法结果的有效数字将增加一倍。</p><p>说了这些，那牛顿迭代法为什么会跟 “对整数n开平方” 有关呢？</p><p>若我们另 $f(x)=x^2-n$，则 $f(x)$ 的零点即为 $\sqrt{n}$ ，此时 $f’(x)=2x$，则迭代公式如下：</p><p>$$x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}=x_n-\frac{x_n^2-n}{2x_n}=\frac{x_n^2+n}{2x_n}=\frac{1}{2}(x_n+\frac{n}{x_n})$$</p><p>相关代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 牛顿迭代法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 要开方的数字，需要大于等于0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.NaN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//精度</span></span><br><span class="line">    <span class="keyword">double</span> e = <span class="number">1e-15</span>;</span><br><span class="line">    <span class="keyword">double</span> x = n;</span><br><span class="line">    <span class="keyword">double</span> y = (x + n / x) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//当x_n 与 x_n+1 精度小于e，认为逼近0点，返回符合要求的数据</span></span><br><span class="line">    <span class="keyword">while</span> (Math.abs(x - y) &gt; e) &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = (x + n / x) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sqrt(<span class="number">4</span>));</span><br><span class="line">    System.out.println(sqrt(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.0</span><br><span class="line">1.7320508075688772</span><br></pre></td></tr></table></figure><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><p>相比于快速的牛顿迭代法，二分查找法也是可以实现开方需求的。不过相比牛顿迭代法其速度较慢。</p><p>这种方法十分好理解，就是上界初始化为数字本身，下界初始化为0.0，这样用二分，判断中间数字的平方和目标数字比较，再修改上界和下界，直到小于一定的阈值。需要注意结束条件和精度判断。</p><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分开方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt1</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> left = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> hight = n;</span><br><span class="line">    <span class="comment">// 此处为精度，当满足该精度时返回近似值</span></span><br><span class="line">    <span class="keyword">double</span> p = <span class="number">1e-15</span>;</span><br><span class="line">    <span class="keyword">double</span> mid = (left + hight)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="comment">// 精度比较</span></span><br><span class="line">    <span class="keyword">while</span> (Math.abs(mid * mid - n) &gt; p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mid * mid &gt; n) &#123;</span><br><span class="line">            hight = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (mid * mid &lt; n) &#123;</span><br><span class="line">            left = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = (left + hight)/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sqrt1(<span class="number">4</span>));</span><br><span class="line">    System.out.println(sqrt1(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.0</span><br><span class="line">1.7320508075688772</span><br></pre></td></tr></table></figure><h2 id="Java源码中的开方"><a href="#Java源码中的开方" class="headerlink" title="Java源码中的开方"></a>Java源码中的开方</h2><p>开始一直以为Java源码中<code>Math.sqrt</code>方法使用的是牛顿迭代法来实现的。最近研究源码，发现并不是这样。特地研究记录一下。</p><p>我们跟踪<code>Math.sqrt</code>源码，会发现它其实调用的<code>StrictMath</code>的<code>sqrt</code>方法，此方法为<code>native</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>因此我们需要查找它的具体实现了，这就需要找到<code>openjdk</code>源码了，其实现位于<code>openjdk\jdk\src\share\native\java\lang\fdlibm\src\e_sqrt.c</code>路径下。</p><p>当然我们也可以在线查看，文件如下 <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/native/java/lang/fdlibm/src/e_sqrt.c">e_sqrt.c</a>。</p><p>我们可以看到对于开方的操作，其源码实际是使用了一种叫<code>Bit by bit method</code>，我这儿称为逐位法。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-698.png" alt="upload successful"></p><p>根据上图，我们来看下该方法的优势及特点吧。</p><blockquote><p>Bit by bit method using integer arithmetic. (Slow, but portable)</p></blockquote><p>源码中提到该方法虽然“慢”但合适，其相关原理如下。</p><p><strong>归一化</strong></p><p>在 $[1,4)$ 中以 $2$ 的偶数次幂缩放 $x$ 到 $y$ :</p><p>求一个整数 $k$，使 $1 \leq (y=x * 2^{2k}) &lt; 4$ ，</p><p>即 $\sqrt{x} = 2^k * \sqrt{y}$</p><p><strong>逐位计算</strong></p><p>设 $q_i =\sqrt{y}$ 在二进制点($q_0 = 1$)后截断到 $i$ 位，</p><p>$s_i=2q_i$ 并且 $y_i=2^{i+1}(y-q_i^2)$.  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (1)</p><p>要从 $q_{i+1}$ 计算 $q_i$，首先要检查是否</p><p>$(q_i+2^{-(i+1)})^2 \leq y$.  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (2)</p><p>如果 (2) 式结果为 <code>false</code>，就有 $q_{i+1}=q_i$，否则 $q_{i+1}=q_i+2^{-(i+1)}$.</p><p>通过一些代数运算，不难看出 (2) 式等价于</p><p>$s_i+2^{-(i+1)} \leq y_i$.   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (3)</p><p>变为 (3) 式的优点是，$s_i$ 和 $y_i$ 可以用递归式计算:</p><p>如果 (3) 式为<code>false</code></p><p>$s_{i+1}=s_i$，$y_{i+1}=y_i$； &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (4)</p><p>否则</p><p>$s_{i+1}=s_i+2^{-i}$，$y_{i+1}=y_i-s_i-2^{-(i+1)}$； &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (4)</p><p>用归纳法可以很容易地证明 (4) 和 (5)。因为 (3) 的左边只包含 $i+2$ 位，所以 (3) 中不需要进行完整的(53-bit)比较。</p><p><strong>最终</strong></p><p>在生成53位结果后，我们再计算一个位。连同余数，我们可以确定结果是正确的，大于1/2ulp，还是小于1/2ulp(它永远不会等于1/2ulp)。</p><p>四舍五入可以通过检查 <code>huge</code> + <code>tiny</code> 是否等于 <code>huge</code>，以及对于某个浮点数“huge”和“tiny”，<code>huge</code> - <code>tiny</code> 是否等于 <code>huge</code> 来检测。</p><p>上面的算法我们可以通过一个简单例子来理解。</p><p>假设现在我们要求 $\sqrt{36}$ 的根。</p><p>根据第一步得到，$1 \leq y = 36*2^{-4}=2.25_{2(10.01)}&lt;4$。</p><p>迭代：</p><p>$q_0=1_{2(1)}$，初始化</p><p>$q_1=1.5_{2(1.1)}$，$(1+0.5)^2 \leq 2.25$</p><p>$q_2=1.5_{2(1.1)}$，$(1.5+0.25)^2 &gt; 2.25$</p><p>$q_3=1.5_{2(1.1)}$，$(1.5+0.125)^2 &gt; 2.25$</p><p>……</p><p>最终 $\sqrt{y} = 1.5$， $\sqrt{36}=1.5*2^2= 6$。</p><p>可以看出这种方法不同于牛顿迭代法，它将带求解的数映射于 $[1,4)$ 范围内，通过逐位计算，逐步缩小解的精度，逼近结果。</p><p>因为以上迭代过程涉及到平方的操作，为了优化这一点，在逐位计算这一步，使用归纳法消除了平方操作。</p><p>可以知道这种逐位计算的方法求解收敛速度某些时候或许比不上牛顿迭代法，但避免了许多乘法和除法操作，所以鲁棒性很好。</p><p>源码处理的double数据有52位有效位，在处理时将其分成了高位和低位分开处理，涉及到许多位运算，我们这儿不做详细讨论。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;fdlibm.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC__</span></span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">const</span> <span class="keyword">double</span>    one     = <span class="number">1.0</span>, tiny=<span class="number">1.0e-300</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">double</span>  one     = <span class="number">1.0</span>, tiny=<span class="number">1.0e-300</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC__</span></span><br><span class="line">        <span class="keyword">double</span> __ieee754_sqrt(<span class="keyword">double</span> x)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="keyword">double</span> __ieee754_sqrt(x)</span><br><span class="line">        <span class="keyword">double</span> x;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">double</span> z;</span><br><span class="line">        <span class="keyword">int</span>     sign = (<span class="keyword">int</span>)<span class="number">0x80000000</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> r,t1,s1,ix1,q1;</span><br><span class="line">        <span class="keyword">int</span> ix0,s0,q,m,t,i;</span><br><span class="line"></span><br><span class="line">        ix0 = __HI(x);                  <span class="comment">/* high word of x */</span></span><br><span class="line">        ix1 = __LO(x);          <span class="comment">/* low word of x */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* take care of Inf and NaN */</span></span><br><span class="line">        <span class="keyword">if</span>((ix0&amp;<span class="number">0x7ff00000</span>)==<span class="number">0x7ff00000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x*x+x;               <span class="comment">/* sqrt(NaN)=NaN, sqrt(+inf)=+inf</span></span><br><span class="line"><span class="comment">                                           sqrt(-inf)=sNaN */</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* take care of zero */</span></span><br><span class="line">        <span class="keyword">if</span>(ix0&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(((ix0&amp;(~sign))|ix1)==<span class="number">0</span>) <span class="keyword">return</span> x;<span class="comment">/* sqrt(+-0) = +-0 */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ix0&lt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (x-x)/(x-x);             <span class="comment">/* sqrt(-ve) = sNaN */</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* normalize x */</span></span><br><span class="line">        m = (ix0&gt;&gt;<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) &#123;                              <span class="comment">/* subnormal x */</span></span><br><span class="line">            <span class="keyword">while</span>(ix0==<span class="number">0</span>) &#123;</span><br><span class="line">                m -= <span class="number">21</span>;</span><br><span class="line">                ix0 |= (ix1&gt;&gt;<span class="number">11</span>); ix1 &lt;&lt;= <span class="number">21</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;(ix0&amp;<span class="number">0x00100000</span>)==<span class="number">0</span>;i++) ix0&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            m -= i<span class="number">-1</span>;</span><br><span class="line">            ix0 |= (ix1&gt;&gt;(<span class="number">32</span>-i));</span><br><span class="line">            ix1 &lt;&lt;= i;</span><br><span class="line">        &#125;</span><br><span class="line">        m -= <span class="number">1023</span>;      <span class="comment">/* unbias exponent */</span></span><br><span class="line">        ix0 = (ix0&amp;<span class="number">0x000fffff</span>)|<span class="number">0x00100000</span>;</span><br><span class="line">        <span class="keyword">if</span>(m&amp;<span class="number">1</span>)&#123;        <span class="comment">/* odd m, double x to make it even */</span></span><br><span class="line">            ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">            ix1 += ix1;</span><br><span class="line">        &#125;</span><br><span class="line">        m &gt;&gt;= <span class="number">1</span>;        <span class="comment">/* m = [m/2] */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* generate sqrt(x) bit by bit */</span></span><br><span class="line">        ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">        ix1 += ix1;</span><br><span class="line">        q = q1 = s0 = s1 = <span class="number">0</span>;   <span class="comment">/* [q,q1] = sqrt(x) */</span></span><br><span class="line">        r = <span class="number">0x00200000</span>;         <span class="comment">/* r = moving bit from right to left */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(r!=<span class="number">0</span>) &#123;</span><br><span class="line">            t = s0+r;</span><br><span class="line">            <span class="keyword">if</span>(t&lt;=ix0) &#123;</span><br><span class="line">                s0   = t+r;</span><br><span class="line">                ix0 -= t;</span><br><span class="line">                q   += r;</span><br><span class="line">            &#125;</span><br><span class="line">            ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">            ix1 += ix1;</span><br><span class="line">            r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = sign;</span><br><span class="line">        <span class="keyword">while</span>(r!=<span class="number">0</span>) &#123;</span><br><span class="line">            t1 = s1+r;</span><br><span class="line">            t  = s0;</span><br><span class="line">            <span class="keyword">if</span>((t&lt;ix0)||((t==ix0)&amp;&amp;(t1&lt;=ix1))) &#123;</span><br><span class="line">                s1  = t1+r;</span><br><span class="line">                <span class="keyword">if</span>(((t1&amp;sign)==sign)&amp;&amp;(s1&amp;sign)==<span class="number">0</span>) s0 += <span class="number">1</span>;</span><br><span class="line">                ix0 -= t;</span><br><span class="line">                <span class="keyword">if</span> (ix1 &lt; t1) ix0 -= <span class="number">1</span>;</span><br><span class="line">                ix1 -= t1;</span><br><span class="line">                q1  += r;</span><br><span class="line">            &#125;</span><br><span class="line">            ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">            ix1 += ix1;</span><br><span class="line">            r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* use floating add to find out rounding direction */</span></span><br><span class="line">        <span class="keyword">if</span>((ix0|ix1)!=<span class="number">0</span>) &#123;</span><br><span class="line">            z = one-tiny; <span class="comment">/* trigger inexact flag */</span></span><br><span class="line">            <span class="keyword">if</span> (z&gt;=one) &#123;</span><br><span class="line">                z = one+tiny;</span><br><span class="line">                <span class="keyword">if</span> (q1==(<span class="keyword">unsigned</span>)<span class="number">0xffffffff</span>) &#123; q1=<span class="number">0</span>; q += <span class="number">1</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (z&gt;one) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (q1==(<span class="keyword">unsigned</span>)<span class="number">0xfffffffe</span>) q+=<span class="number">1</span>;</span><br><span class="line">                    q1+=<span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    q1 += (q1&amp;<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ix0 = (q&gt;&gt;<span class="number">1</span>)+<span class="number">0x3fe00000</span>;</span><br><span class="line">        ix1 =  q1&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((q&amp;<span class="number">1</span>)==<span class="number">1</span>) ix1 |= sign;</span><br><span class="line">        ix0 += (m &lt;&lt;<span class="number">20</span>);</span><br><span class="line">        __HI(z) = ix0;</span><br><span class="line">        __LO(z) = ix1;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他开方算法"><a href="#其他开方算法" class="headerlink" title="其他开方算法"></a>其他开方算法</h2><p><code>openjdk</code> 源码中除了上述方法外，在注释中还提供了两种开方方法，第一种部分使用了牛顿迭代，涉及四个部分。第二种方法使用reciproot迭代来避免除法，但是需要更多的乘法。</p><p>感兴趣的同学可以查看 </p><p><a href="https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF">IEEE754.PDF</a></p><p><a href="https://people.eecs.berkeley.edu/~wkahan/ieee754status/reciprt.pdf">reciprt.pdf</a></p><p>等论文进行了解。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章我们了解了一些开方方法，并分析了一些源码，可以发现数学与编程及算法的巧妙之处。对我们今后的工作学习都是有较大帮助的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/native/java/lang/fdlibm/src/e_sqrt.c">e_sqrt.c</a></p><p><a href="https://people.eecs.berkeley.edu/">Berkeley | EECS</a></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前几天看到一道题目，是关于“对整数 n 开平方，不使用Math.sqrt实现”，感觉蛮有意思的，其解法用到了牛顿迭代法（Newton’s Method）。&lt;/p&gt;
&lt;p&gt;就顺便研究了一下该解法和其他一些解法，特来分享记录一下。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="sqrt" scheme="https://www.sakuratears.top/tags/sqrt/"/>
    
    <category term="平方根" scheme="https://www.sakuratears.top/tags/%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    
  </entry>
  
  <entry>
    <title>限流算法之漏桶算法、令牌桶算法</title>
    <link href="https://www.sakuratears.top/blog/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B9%8B%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E3%80%81%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95.html"/>
    <id>https://www.sakuratears.top/blog/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B9%8B%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E3%80%81%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95.html</id>
    <published>2021-05-07T14:39:52.000Z</published>
    <updated>2021-05-07T14:43:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在分布式环境下，为了应对高并发，通常有以下几种手段，优先级从高到低依次为缓存、限流、降级、熔断。</p><p>缓存即是缓存热点数据，以便请求来时可以做出快速反映，减小数据库压力。</p><p>降级和熔断广义上来讲也算是限流的一种，本质上也是阻止请求进来。</p><p>今天这篇文章我们主要来讲一讲限流的两种算法以及实现方式。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="限流的意义"><a href="#限流的意义" class="headerlink" title="限流的意义"></a>限流的意义</h2><p>对于一个对外服务应用，我们为什么要限流？它的意义在哪里呢？</p><p>我们知道，对于对外应用，有很多情况会导致流量增大：</p><ul><li>服务用户量的不断增长</li><li>针对服务的恶意攻击</li><li>各种活动等</li></ul><p>需要注意流量变“大”是相对的，相对于我们服务所能承受的流量。</p><p>比如我们服务支持10000QPS的处理能力，如果每秒处理5000个请求，显然不大，但如果服务只支持1000QPS的处理能力，那每秒5000的请求对于服务器显然“大”了。</p><p>如果长时间这样，显然会导致我们的服务熔断或挂掉，为了保证服务器稳定，我们自然要对流量进行控制，这就是限流。</p><p>PS：限流的优先级在缓存之后，因此对于这种情况，我们应首先尽可能的提高服务的QPS能力，优化逻辑，缓存热点数据等。</p><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><h3 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h3><p>漏桶算法（Leaky Bucket）的原理比较简单：水（请求）先进入到漏桶里，人为设置一个最大出水速率，漏桶以&lt;=出水速率的速度出水，当水流入速度过大会直接溢出（拒绝服务）。</p><p>如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-694.png" alt="upload successful"></p><p>该算法思想如下：</p><ol><li>比如设置请求速率为1000QPS，容量池为5000，当请求小于1000QPS时，正常进行处理；</li><li>当请求为2000QPS时，每秒处理1000个请求后会剩下1000个请求；</li><li>当第5s时，容量已满，后续新请求丢弃，直到容量池内有请求被处理掉。</li></ol><p>可以看到这种算法强制限制请求速率，缺点是十分明显的：</p><ul><li>无法面对突发的大流量 —— 比如上述例子，设置请求速率为1000QPS，应用在绝大多数情况下请求小于1000QPS，突然某天活动，用户访问激增，那么此种限流会导致大多数用户无法正常访问服务。</li><li>无法有效利用资源 —— 虽然我们服务处理能力是1000QPS，但这不是绝对的，比如前6s为2000QPS，后面时间为500QPS，一小段时间服务器资源是可以承受这段请求压力的，但是漏桶算法这种情况下会丢弃一部分请求。</li></ul><h3 id="相关代码实现"><a href="#相关代码实现" class="headerlink" title="相关代码实现"></a>相关代码实现</h3><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeakyBucketLimit</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 速率 10QPS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大容量50</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> BURST = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求最新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTime = System.currentTimeMillis() /<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        count = (<span class="keyword">int</span>)Math.max(<span class="number">0</span>,count - (now - lastTime)*RATE);</span><br><span class="line">        lastTime = now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">limit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        refresh();</span><br><span class="line">        <span class="keyword">if</span>(count &lt; BURST)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LeakyBucketLimit limit = <span class="keyword">new</span> LeakyBucketLimit();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;-&gt;&quot;</span>+limit.limit());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-695.png" alt="upload successful"></p><p>可以看到当达到容量50时请求就会被拒绝。</p><p>PS：需要注意的是，实际中当请求完成后，会被释放，池子里请求是动态增加减少的过程。</p><p>通常来说，实际中使用漏桶算法来进行限流的场景并不多。</p><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><h3 id="算法内容-1"><a href="#算法内容-1" class="headerlink" title="算法内容"></a>算法内容</h3><p>令牌桶算法(Token Bucket)是网络流量整形（Traffic Shaping）和限流（Rate Limiting）中最常使用的一种算法，它可用于控制发送到网络上数据的数量并允许突发数据的发送。</p><p>令牌桶算法可以认为是对漏桶算法的一种改进，主要在于令牌桶算法在限制平均调用速率的同时还允许一定程度的突发调用。</p><p>令牌桶算法的实现原理如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-696.png" alt="upload successful"></p><p>整个过程如下：</p><ol><li>系统以恒定的速率产生令牌，然后将令牌放入令牌桶中；</li><li>令牌桶有一个容量，当令牌桶满了的时候，再向其中放入的令牌就会被丢弃；</li><li>每次一个请求过来，需要从令牌桶中获取一个令牌，假设有令牌，那么提供服务；假设没有令牌，那么拒绝服务。</li></ol><p>现在我们来看下为什么令牌桶可以防止一定程度上的突发流量。</p><p>假设我们想要调用速率为1000QPS，那么设置令牌的生成速度1000个/s，第一秒请求800个，那么会余下200个令牌，在第二秒请求时，就支持1200个请求了。</p><p>需要注意的是令牌的生成并不是无上限的，也必须有个容量，比如令牌的生成速度1000个/s，前5秒请求200个/s，那么第6秒支持4000个请求，但这远超系统承受能力，因此令牌桶算法需要设置桶中令牌的上限。</p><p>由于令牌桶算法允许一定程度的突发调用，因此在限流场景里比漏桶算法更加广泛。</p><h3 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a>RateLimiter</h3><p><strong>Google</strong>开源工具包<strong>Guava</strong>提供了限流工具类<code>RateLimiter</code>，该类就是基于令牌桶算法来完成限流，非常易于使用。</p><p><code>RateLimiter</code>经常用于限制对一些物理资源或者逻辑资源的访问速率。它支持两种获取<code>permits</code>接口，一种是如果拿不到立刻返回false，一种会阻塞等待一段时间看能不能拿到。</p><p><code>RateLimiter</code>和 <strong>Java</strong> 中的信号量(<code>java.util.concurrent.Semaphore</code>)类似，<code>Semaphore</code>通常用于限制并发量。</p><p>我们通过<strong>Maven</strong>引入相关<strong>Jar</strong>包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到<code>RateLimiter</code>，我们在源码注释中可以看到如下一些代码及说明。</p><p>比如我们需要处理一个任务列表，但我们不希望每秒的任务提交超过两个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> RateLimiter rateLimiter = RateLimiter.create(<span class="number">2.0</span>); <span class="comment">// rate is &quot;2 permits per second&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitTasks</span><span class="params">(List&lt;Runnable&gt; tasks, Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Runnable task : tasks) &#123;</span><br><span class="line">        rateLimiter.acquire(); <span class="comment">// may wait</span></span><br><span class="line">        executor.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想象下我们制造了一个数据流，并希望以每秒5kb的速率处理它。可以通过要求每个字节代表一个许可，然后指定每秒5000个许可来完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每秒5000个许可</span></span><br><span class="line"><span class="keyword">final</span> RateLimiter rateLimiter = RateLimiter.create(<span class="number">5000.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitPacket</span><span class="params">(<span class="keyword">byte</span>[] packet)</span> </span>&#123;</span><br><span class="line">    rateLimiter.acquire(packet.length);</span><br><span class="line">    networkService.send(packet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一点非常重要，那就是请求的许可数从来不会影响到请求本身的限制（调用acquire(1) 和调用acquire(1000) 将得到相同的限制效果，如果存在这样的调用的话），但会影响下一次请求的限制，也就是说，如果一个高开销的任务抵达一个空闲的<code>RateLimiter</code>，它会被马上许可，但是下一个请求会经历额外的限制，从而来偿付高开销任务。注意：<code>RateLimiter</code> 并不提供公平性的保证。</p><p>因此，可以认为<code>RateLimiter</code>支持预消费的能力。突发流量的处理，在令牌桶算法中有两种方式，一种是有足够的令牌才能消费，一种是先消费后还令牌。</p><h3 id="RateLimiter相关源码"><a href="#RateLimiter相关源码" class="headerlink" title="RateLimiter相关源码"></a>RateLimiter相关源码</h3><p><code>RateLimiter</code>其实是一个<code>abstract类</code>，但是它提供了几个<code>static</code>方法用于创建<code>RateLimiter</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分代码略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个稳定输出令牌的RateLimiter，保证了平均每秒不超过permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * 当请求到来的速度超过了permitsPerSecond，保证每秒只处理permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * 当这个RateLimiter使用较少(即请求到来速度小于permitsPerSecond)，会囤积最多permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permitsPerSecond</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter <span class="title">create</span><span class="params">(<span class="keyword">double</span> permitsPerSecond)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个稳定输出令牌的RateLimiter，保证了平均每秒不超过permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * 还包含一个预热期(warmup period),预热期内，RateLimiter会平滑的将其释放令牌的速率加大，直到起达到最大速率</span></span><br><span class="line"><span class="comment">     * 同样，如果RateLimiter在预热期没有足够的请求,则起速率会逐渐降低到“冷却”状态</span></span><br><span class="line"><span class="comment">     * 设计这个的意图是为了满足那种资源提供方需要预热时间，而不是每次访问都能提供稳定速率的服务的情况(比如带缓存服务，需要定期刷新缓存的)</span></span><br><span class="line"><span class="comment">     * 参数warmupPeriod和unit决定了其从“冷却”状态到达最大速率的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permitsPerSecond</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> warmupPeriod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter <span class="title">create</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">long</span> warmupPeriod, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部调用的 create(double permitsPerSecond, long warmupPeriod, TimeUnit unit)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter <span class="title">create</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, Duration warmupPeriod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create(permitsPerSecond, toNanosSaturated(warmupPeriod), TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RateLimiter</code>提供了两个获取令牌的方法，不带参数表示获取一个令牌。如果没有令牌则一直等待，返回等待的时间(单位为秒)，没有被限流则直接返回0.0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span></span>;</span><br></pre></td></tr></table></figure><p>尝试获取令牌，分为待超时时间和不带超时时间两种。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试获取一个令牌,立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//尝试获取permits个令牌,立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits)</span></span>;</span><br><span class="line"><span class="comment">//尝试获取1个令牌,带超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span>;</span><br><span class="line"><span class="comment">//尝试获取permits个令牌,带超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span></span>;</span><br></pre></td></tr></table></figure><p>我们从<code>acquire</code>来看<code>RateLimiter</code>如何实现限流。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> microsToWait = reserve(permits);</span><br><span class="line">    stopwatch.sleepMicrosUninterruptibly(microsToWait);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * microsToWait / SECONDS.toMicros(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    checkPermits(permits);</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex()) &#123;<span class="comment">//并发加锁</span></span><br><span class="line">      <span class="keyword">return</span> reserveAndGetWaitLength(permits, stopwatch.readMicros());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserveAndGetWaitLength</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> momentAvailable = reserveEarliestAvailable(permits, nowMicros);</span><br><span class="line">    <span class="keyword">return</span> max(momentAvailable - nowMicros, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">reserveEarliestAvailable</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> nowMicros)</span></span>;</span><br></pre></td></tr></table></figure><p><code>RateLimiter</code>的具体实现<code>SmoothRateLimiter</code>里的<code>reserveEarliestAvailable</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserveEarliestAvailable</span><span class="params">(<span class="keyword">int</span> requiredPermits, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//补充令牌</span></span><br><span class="line">    resync(nowMicros);</span><br><span class="line">    <span class="comment">//本次请求获取令牌时间</span></span><br><span class="line">    <span class="keyword">long</span> returnValue = nextFreeTicketMicros;</span><br><span class="line">    <span class="comment">//本次请求能从存储的令牌桶中获取的数量（取的为请求数与存储数的最小值）</span></span><br><span class="line">    <span class="keyword">double</span> storedPermitsToSpend = min(requiredPermits, <span class="keyword">this</span>.storedPermits);</span><br><span class="line">    <span class="comment">//本次请求需要额外补充的令牌（如果存储&gt;请求，该值为0；如果存储&lt;请求，该值&gt;0）</span></span><br><span class="line">    <span class="keyword">double</span> freshPermits = requiredPermits - storedPermitsToSpend;</span><br><span class="line">    <span class="comment">//使用存储令牌等待时间</span></span><br><span class="line">    <span class="keyword">long</span> waitMicros =</span><br><span class="line">        storedPermitsToWaitTime(<span class="keyword">this</span>.storedPermits, storedPermitsToSpend)</span><br><span class="line">            + (<span class="keyword">long</span>) (freshPermits * stableIntervalMicros);</span><br><span class="line">    <span class="comment">//计算下次请求获取令牌时间</span></span><br><span class="line">    <span class="keyword">this</span>.nextFreeTicketMicros = LongMath.saturatedAdd(nextFreeTicketMicros, waitMicros);</span><br><span class="line">    <span class="comment">//令牌存量减少</span></span><br><span class="line">    <span class="keyword">this</span>.storedPermits -= storedPermitsToSpend;</span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">storedPermitsToWaitTime</span><span class="params">(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake)</span></span>;</span><br></pre></td></tr></table></figure><p><code>storedPermitsToWaitTime</code>方法有两种实现，因为获取存储的令牌由于资源不足有可能需要等待时间。</p><p>一种是资源确实不足，这些剩余的资源我们是可以继续使用的；另一种是提供资源的服务过去还没准备好（预热期）。</p><p>为此，<code>RateLimiter</code>对于<code>storedPermitsToWaitTime</code>有两种实现策略，即<code>SmoothBursty</code>和<code>SmoothWarmingUp</code>。</p><h4 id="SmoothBursty"><a href="#SmoothBursty" class="headerlink" title="SmoothBursty"></a>SmoothBursty</h4><p><code>SmoothBursty</code>使用<code>storedPermits</code>不需要额外等待时间。并且默认<code>maxBurstSeconds</code>为1，因此<code>maxPermits</code>为<code>permitsPerSecond</code>，即最多可以存储1秒的剩余令牌，比如QPS=5，则maxPermits=5。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SmoothBursty</span> <span class="keyword">extends</span> <span class="title">SmoothRateLimiter</span> </span>&#123;</span><br><span class="line"><span class="comment">/** The work (permits) of how many seconds can be saved up if this RateLimiter is unused? */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> maxBurstSeconds;</span><br><span class="line"></span><br><span class="line">SmoothBursty(SleepingStopwatch stopwatch, <span class="keyword">double</span> maxBurstSeconds) &#123;</span><br><span class="line">    <span class="keyword">super</span>(stopwatch);</span><br><span class="line">    <span class="keyword">this</span>.maxBurstSeconds = maxBurstSeconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSetRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> stableIntervalMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> oldMaxPermits = <span class="keyword">this</span>.maxPermits;</span><br><span class="line">    maxPermits = maxBurstSeconds * permitsPerSecond;</span><br><span class="line">    <span class="keyword">if</span> (oldMaxPermits == Double.POSITIVE_INFINITY) &#123;</span><br><span class="line">    <span class="comment">// if we don&#x27;t special-case this, we would get storedPermits == NaN, below</span></span><br><span class="line">    storedPermits = maxPermits;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    storedPermits =</span><br><span class="line">        (oldMaxPermits == <span class="number">0.0</span>)</span><br><span class="line">            ? <span class="number">0.0</span> <span class="comment">// initial state</span></span><br><span class="line">            : storedPermits * maxPermits / oldMaxPermits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">storedPermitsToWaitTime</span><span class="params">(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">coolDownIntervalMicros</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stableIntervalMicros;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SmoothWarmingUp"><a href="#SmoothWarmingUp" class="headerlink" title="SmoothWarmingUp"></a>SmoothWarmingUp</h4><p><code>SmoothWarmingUp</code>的<code>maxPermits</code>等于预热(warmup)期间能产生的令牌数，比如QPS=4，warmup为2秒，则maxPermits=8。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SmoothWarmingUp</span> <span class="keyword">extends</span> <span class="title">SmoothRateLimiter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> warmupPeriodMicros;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The slope of the line from the stable interval (when permits == 0), to the cold interval</span></span><br><span class="line"><span class="comment">   * (when permits == maxPermits)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> slope;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> thresholdPermits;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> coldFactor;</span><br><span class="line"></span><br><span class="line">  SmoothWarmingUp(</span><br><span class="line">      SleepingStopwatch stopwatch, <span class="keyword">long</span> warmupPeriod, TimeUnit timeUnit, <span class="keyword">double</span> coldFactor) &#123;</span><br><span class="line">    <span class="keyword">super</span>(stopwatch);</span><br><span class="line">    <span class="keyword">this</span>.warmupPeriodMicros = timeUnit.toMicros(warmupPeriod);</span><br><span class="line">    <span class="keyword">this</span>.coldFactor = coldFactor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doSetRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> stableIntervalMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> oldMaxPermits = maxPermits;</span><br><span class="line">    <span class="keyword">double</span> coldIntervalMicros = stableIntervalMicros * coldFactor;</span><br><span class="line">    thresholdPermits = <span class="number">0.5</span> * warmupPeriodMicros / stableIntervalMicros;</span><br><span class="line">    maxPermits =</span><br><span class="line">        thresholdPermits + <span class="number">2.0</span> * warmupPeriodMicros / (stableIntervalMicros + coldIntervalMicros);</span><br><span class="line">    slope = (coldIntervalMicros - stableIntervalMicros) / (maxPermits - thresholdPermits);</span><br><span class="line">    <span class="keyword">if</span> (oldMaxPermits == Double.POSITIVE_INFINITY) &#123;</span><br><span class="line">      <span class="comment">// if we don&#x27;t special-case this, we would get storedPermits == NaN, below</span></span><br><span class="line">      storedPermits = <span class="number">0.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      storedPermits =</span><br><span class="line">          (oldMaxPermits == <span class="number">0.0</span>)</span><br><span class="line">              ? maxPermits <span class="comment">// initial state is cold</span></span><br><span class="line">              : storedPermits * maxPermits / oldMaxPermits;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">storedPermitsToWaitTime</span><span class="params">(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> availablePermitsAboveThreshold = storedPermits - thresholdPermits;</span><br><span class="line">    <span class="keyword">long</span> micros = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// measuring the integral on the right part of the function (the climbing line)</span></span><br><span class="line">    <span class="keyword">if</span> (availablePermitsAboveThreshold &gt; <span class="number">0.0</span>) &#123;</span><br><span class="line">      <span class="keyword">double</span> permitsAboveThresholdToTake = min(availablePermitsAboveThreshold, permitsToTake);</span><br><span class="line">      <span class="comment">// TODO(cpovirk): Figure out a good name for this variable.</span></span><br><span class="line">      <span class="keyword">double</span> length =</span><br><span class="line">          permitsToTime(availablePermitsAboveThreshold)</span><br><span class="line">              + permitsToTime(availablePermitsAboveThreshold - permitsAboveThresholdToTake);</span><br><span class="line">      micros = (<span class="keyword">long</span>) (permitsAboveThresholdToTake * length / <span class="number">2.0</span>);</span><br><span class="line">      permitsToTake -= permitsAboveThresholdToTake;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// measuring the integral on the left part of the function (the horizontal line)</span></span><br><span class="line">    micros += (<span class="keyword">long</span>) (stableIntervalMicros * permitsToTake);</span><br><span class="line">    <span class="keyword">return</span> micros;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">permitsToTime</span><span class="params">(<span class="keyword">double</span> permits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stableIntervalMicros + permits * slope;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">coolDownIntervalMicros</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> warmupPeriodMicros / maxPermits;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RateLimiter的限制"><a href="#RateLimiter的限制" class="headerlink" title="RateLimiter的限制"></a>RateLimiter的限制</h3><p>需要注意的是<code>RateLimiter</code>虽然很强大，但是它只支持单机环境。</p><p>比如我们服务集群中有5台服务器，要保证1000QPS的集群接口调用量，<code>RateLimiter</code>就无法实现了。</p><p>集群控流通常的做法是采用<strong>Redis</strong>来进行限制，主要有两种方式：</p><ul><li>固定窗口计数</li><li>结合lua脚本，实现分布式的令牌桶算法</li></ul><p>我们这儿就暂不做详细讨论。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文我们介绍了漏桶算法和令牌桶算法，了解了它们各自的特点。</p><p>对漏桶算法进行了简单的代码实现，对令牌桶算法我们分析了<strong>Guava</strong>提供了限流工具类<code>RateLimiter</code>。</p><p>除了讨论了它们的特点，也说明了它们的一些不足。</p><p>不过无论哪种限流算法，都有自己的应用之处，具体场景需要具体分析。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在分布式环境下，为了应对高并发，通常有以下几种手段，优先级从高到低依次为缓存、限流、降级、熔断。&lt;/p&gt;
&lt;p&gt;缓存即是缓存热点数据，以便请求来时可以做出快速反映，减小数据库压力。&lt;/p&gt;
&lt;p&gt;降级和熔断广义上来讲也算是限流的一种，本质上也是阻止请求进来。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis分布式锁之红锁（RedLock）</title>
    <link href="https://www.sakuratears.top/blog/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%8B%E7%BA%A2%E9%94%81%EF%BC%88RedLock%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%8B%E7%BA%A2%E9%94%81%EF%BC%88RedLock%EF%BC%89.html</id>
    <published>2021-05-07T14:37:00.000Z</published>
    <updated>2021-05-07T14:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在许多不同的进程必须以互斥的方式操作共享资源的环境中，分布式锁是非常有用的。</p><p>我们在使用<code>Redis</code>做分布式锁时，使用的一般都是比较简单的方法。</p><p>本文提供一个更规范的算法来实现<code>Redis</code>分布式锁,名为<code>Redlock</code>的算法。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="分布式锁特点"><a href="#分布式锁特点" class="headerlink" title="分布式锁特点"></a>分布式锁特点</h2><p>我们知道，分布式锁应保证以下三点：</p><ul><li>安全性：互斥性。在任何给定时刻，只有一个客户端可以持有一个锁。</li><li>可靠性 A：无死锁。最终，总是有可能获得一个锁，即使锁定资源的客户机崩溃或被分区。</li><li>可靠性 B：容错性。只要大部分Redis节点都是正常的，客户端就可以获取和释放锁。</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在<code>Redis</code>服务中，一般由<code>Redis</code>集群提供服务，设置为主从模式（Master-Slave），主从<code>Redis</code>之间的信息拷贝是异步完成的。</p><p>我们试想，如果当我们请求分布式锁的时候成功了，但是此时 <code>Slave</code> 还没有复制我们的“锁”，如果此时 <code>Master</code> 由于某些原因宕机，<code>Slave</code>服务器变为<code>Master</code>，我们应用继续请求锁的时候，就会成功创建。这就出现了同一个锁获取了不止一次。</p><p>这样肯定会有一些问题。</p><h2 id="单机实例获取锁"><a href="#单机实例获取锁" class="headerlink" title="单机实例获取锁"></a>单机实例获取锁</h2><p>我们先来看下如何在<code>Redis</code>单例模式下实现分布式锁。</p><p>获得锁的主要命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure><p>该命令只在key不存在(NX选项)时设置该key，其过期时间为30000毫秒(PX选项)。该键值被设置为“myrandomvalue”。这个值必须在所有客户端和所有锁请求中是唯一的。使用随机值的目的是为了安全的释放锁。</p><p>释放锁的主要命令如下，我们可以用<code>Lua</code>脚本来实现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[1]) == ARGV[1] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[1])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>为了避免删除另一个客户端创建的锁，这一点很重要。例如，一个客户端可能获得了锁，但在某些操作中阻塞的时间超过了锁的有效时间(key将过期的时间)，然后删除其他客户端已经获得的锁。所以仅仅使用<code>DEL</code>是不安全的，因为一个客户端可能会删除另一个客户端的锁。在上面的脚本中，每个锁都是用随机字符串“签名”的，所以只有当锁仍然是由试图删除它的客户端设置的锁时，锁才会被删除。</p><p>随机字符串的选取我们可以使用一些生成不重复字符串的加密算法，如 <strong>MD5</strong>，或者更简便的可以使用 服务器地址 + Unix 时间戳来表示。</p><p>可以看到在单机模式下，这种方案是安全可用的。</p><h2 id="RedLock算法"><a href="#RedLock算法" class="headerlink" title="RedLock算法"></a>RedLock算法</h2><p>在分布式版本的算法中，我们假设我们有N个<code>Redis master</code>。这些节点是完全独立的，所以我们不用复制等其他处理。</p><p>我们已经描述了如何在单个实例中安全地获取和释放锁。我们想当然地认为，该算法将使用该方法在单个实例中获取和释放锁。</p><p>在我们的例子中，我们设置<code>N=5</code>，所以我们需要在不同的计算机或虚拟机上运行5个<code>Redis master</code>，以确保它们以一种基本独立的方式失败。</p><p>为了获取锁，客户端执行以下操作：</p><ol><li>它以毫秒为单位获取当前时间。</li><li>它尝试在所有N个实例中依次获取锁，在所有实例中使用相同的 <strong>key</strong> 和 <strong>random_value</strong> 。在步骤2中，当在每个实例中设置锁时，客户端使用一个比锁自动释放总时间小的超时来获取锁。例如，如果自动释放时间是10秒，则超时时间可以在 5~50 毫秒范围内。如果一个实例不可用，我们应该尽快尝试与下一个实例进行交互。</li><li>客户端通过从当前时间中减去在步骤1中获得的时间戳来计算为了获得锁花费了多少时间。当且仅当客户端能够在大多数实例(至少3个)中获得锁，并且获取锁的总时间小于锁有效时间时，则认为该锁已被获取。</li><li>如果获得了锁，则将其有效时间视为初始有效时间减去经过的时间，如步骤3中计算的那样。</li><li>如果客户端由于某些原因无法获得锁（要么无法锁定<strong>N/2+1</strong>个实例（半数以上），要么有效时间为负数），它将尝试解锁所有实例（甚至是它认为自己无法锁定的实例）。</li></ol><p>对于释放锁，很简单，只要释放所有实例中的锁，不管客户端是否认为自己能够成功锁定给定实例。</p><p>这也是RedLock的基本原理。</p><h2 id="算法的安全性"><a href="#算法的安全性" class="headerlink" title="算法的安全性"></a>算法的安全性</h2><p>我们假设客户端能在大多数<code>Redis</code>实例中获取锁，所有实例都将包含一个存在时间相同的key。但是，<strong>key</strong>是在不同的时间进行设置的，因此<strong>key</strong>的具体过期时间也不同。</p><p>但我们假设设置第一个<code>Redis</code>实例时时间为<strong>T1</strong>，最后一个<code>Redis</code>实例时时间为<strong>T2</strong>，则我们可以认为锁的有效时间 <code> MIN_VALIDITY = TTL - (T2-T1) </code>，即第一个实例剩余过期时间，其他实例都在后面依次过期。</p><p>可以看到在大多数<strong>key</strong>被设置的时间内，另一个客户端将无法获得锁，因为如果半数以上实例的<strong>key</strong>已经存在，那么<strong>N/2+1</strong>个<code>set NX</code>操作将无法成功。因此，如果获得了一个锁，就不可能同时重新获得它。</p><p>然而，我们也希望确保多个客户端同时尝试获取锁不能同时成功。</p><p>如果客户端锁定大多数实例所用的时间接近或大于锁的最大有效时间（<strong>TTL</strong>），它会认为锁无效，并将解锁实例，因此，我们只需要考虑这样一种情况：<strong>客户端能够在一段时间内锁定大多数实例，而这段时间小于有效时间</strong>。</p><p>在这种情况下，对于上面已经表示的参数 <strong>MIN_VALIDITY</strong>，没有客户端能够重新获得锁。因此，只有当锁定大多数实例的时间大于<strong>TTL</strong>时，多个客户端才能同时锁定<strong>N/2+1</strong>个实例，导致锁定无效。</p><p>关于该算法安全性及其他的一些讨论大家可以参考<code>Redis</code>官网的这篇文章 <a href="https://redis.io/topics/distlock">Distributed locks with Redis</a>。</p><h2 id="相关代码实现"><a href="#相关代码实现" class="headerlink" title="相关代码实现"></a>相关代码实现</h2><p><strong>Java</strong>里<strong>Redission</strong>就实现了<strong>RedLock</strong>算法，我们来看下。</p><p>首先 <strong>Maven</strong> 里要引入相关 <strong>Jar</strong> 包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁最大等待时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> WAIT_TIMEOUT = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁持有时间，获取锁后超过这个时间锁会释放，该时间应大于业务逻辑处理时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> LEASE_TIME = <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_KEY = <span class="string">&quot;REDISSON_LOCK_TEST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Config config1 = <span class="keyword">new</span> Config();</span><br><span class="line">        config1.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient1 = Redisson.create(config1);</span><br><span class="line"></span><br><span class="line">        Config config2 = <span class="keyword">new</span> Config();</span><br><span class="line">        config2.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6380&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient2 = Redisson.create(config2);</span><br><span class="line"></span><br><span class="line">        Config config3 = <span class="keyword">new</span> Config();</span><br><span class="line">        config3.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6381&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient3 = Redisson.create(config3);</span><br><span class="line">        <span class="comment">//拿到RLock对象</span></span><br><span class="line">        RLock lock1 = redissonClient1.getLock(LOCK_KEY);</span><br><span class="line">        RLock lock2 = redissonClient2.getLock(LOCK_KEY);</span><br><span class="line">        RLock lock3 = redissonClient3.getLock(LOCK_KEY);</span><br><span class="line">        <span class="comment">//构建redlock</span></span><br><span class="line">        RedissonRedLock redLock = <span class="keyword">new</span> RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> res = redLock.tryLock(WAIT_TIMEOUT, LEASE_TIME, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                <span class="comment">//do something</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;加锁异常！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            redLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们看下<code>redLock.tryLock</code>方法的实现，相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            return tryLockAsync(waitTime, leaseTime, unit).get();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ExecutionException e) &#123;</span></span><br><span class="line"><span class="comment">//            throw new IllegalStateException(e);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    <span class="keyword">long</span> newLeaseTime = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        newLeaseTime = unit.toMillis(waitTime)*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> remainTime = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (waitTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        remainTime = unit.toMillis(waitTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> lockWaitTime = calcLockWaitTime(remainTime);</span><br><span class="line">    <span class="comment">// 允许加锁失败节点个数限制，半数以上（N-(N/2+1)）</span></span><br><span class="line">    <span class="keyword">int</span> failedLocksLimit = failedLocksLimit();</span><br><span class="line">    <span class="comment">// 遍历所有节点通过EVAL命令执行lua加锁</span></span><br><span class="line">    List&lt;RLock&gt; acquiredLocks = <span class="keyword">new</span> ArrayList&lt;&gt;(locks.size());</span><br><span class="line">    <span class="keyword">for</span> (ListIterator&lt;RLock&gt; iterator = locks.listIterator(); iterator.hasNext();) &#123;</span><br><span class="line">        RLock lock = iterator.next();</span><br><span class="line">        <span class="keyword">boolean</span> lockAcquired;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (waitTime == -<span class="number">1</span> &amp;&amp; leaseTime == -<span class="number">1</span>) &#123;</span><br><span class="line">                lockAcquired = lock.tryLock();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> awaitTime = Math.min(lockWaitTime, remainTime);</span><br><span class="line">                lockAcquired = lock.tryLock(awaitTime, newLeaseTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RedisResponseTimeoutException e) &#123;</span><br><span class="line">            unlockInner(Arrays.asList(lock));</span><br><span class="line">            lockAcquired = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            lockAcquired = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (lockAcquired) &#123;</span><br><span class="line">            acquiredLocks.add(lock);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算已经申请锁失败的节点是否已经到达允许加锁失败节点个数限制 （N-(N/2+1)）</span></span><br><span class="line">            <span class="keyword">if</span> (locks.size() - acquiredLocks.size() == failedLocksLimit()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (failedLocksLimit == <span class="number">0</span>) &#123;</span><br><span class="line">                unlockInner(acquiredLocks);</span><br><span class="line">                <span class="keyword">if</span> (waitTime == -<span class="number">1</span> &amp;&amp; leaseTime == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                failedLocksLimit = failedLocksLimit();</span><br><span class="line">                acquiredLocks.clear();</span><br><span class="line">                <span class="comment">// reset iterator</span></span><br><span class="line">                <span class="keyword">while</span> (iterator.hasPrevious()) &#123;</span><br><span class="line">                    iterator.previous();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                failedLocksLimit--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算 目前从各个节点获取锁已经消耗的总时间，如果已经等于最大等待时间，则认定最终申请锁失败，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (remainTime != -<span class="number">1</span>) &#123;</span><br><span class="line">            remainTime -= System.currentTimeMillis() - time;</span><br><span class="line">            time = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                unlockInner(acquiredLocks);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        List&lt;RFuture&lt;Boolean&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;(acquiredLocks.size());</span><br><span class="line">        <span class="keyword">for</span> (RLock rLock : acquiredLocks) &#123;</span><br><span class="line">            RFuture&lt;Boolean&gt; future = ((RedissonLock) rLock).expireAsync(unit.toMillis(leaseTime), TimeUnit.MILLISECONDS);</span><br><span class="line">            futures.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (RFuture&lt;Boolean&gt; rFuture : futures) &#123;</span><br><span class="line">            rFuture.syncUninterruptibly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其相关源码是非常好理解的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简单介绍了使用<strong>Redis</strong>实现分布式锁可能出现的问题，以及解决此问题的一种算法<strong>RedLock</strong>，并提供了简单的代码使用。</p><p>关于<strong>RedLock</strong>更多内容，可以查看官网  <a href="https://redis.io/topics/distlock">Distributed locks with Redis</a> 这篇文章。</p><p>作者详细讨论了<strong>RedLock</strong>算法的安全性，可靠性等。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在许多不同的进程必须以互斥的方式操作共享资源的环境中，分布式锁是非常有用的。&lt;/p&gt;
&lt;p&gt;我们在使用&lt;code&gt;Redis&lt;/code&gt;做分布式锁时，使用的一般都是比较简单的方法。&lt;/p&gt;
&lt;p&gt;本文提供一个更规范的算法来实现&lt;code&gt;Redis&lt;/code&gt;分布式锁,名为&lt;code&gt;Redlock&lt;/code&gt;的算法。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://www.sakuratears.top/tags/Redis/"/>
    
    <category term="RedLock" scheme="https://www.sakuratears.top/tags/RedLock/"/>
    
  </entry>
  
  <entry>
    <title>Java BitSet类简介及应用</title>
    <link href="https://www.sakuratears.top/blog/Java-BitSet%E7%B1%BB%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%BA%94%E7%94%A8.html"/>
    <id>https://www.sakuratears.top/blog/Java-BitSet%E7%B1%BB%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%BA%94%E7%94%A8.html</id>
    <published>2021-04-18T11:07:00.000Z</published>
    <updated>2021-04-18T11:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面试过程中我们或许被问过如下问题：如何快速判断某个数字在1亿数据中有没有出现过？</p><p>这都要用到我们今天要说的<code>BitSet</code>，我们下面一起来看下吧。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="BitSet简介"><a href="#BitSet简介" class="headerlink" title="BitSet简介"></a>BitSet简介</h2><p><code>BitSet</code>类实现了一个根据需要增长的位向量。<code>BitSet</code>的每个组成部分都有一个布尔值。<code>BitSet</code>的位由非负整数索引。可以检查、设置或清除单个索引位。</p><p>一个<code>BitSet</code>对象可以通过逻辑与、逻辑或、逻辑异或操作来修改另一个<code>BitSet</code>对象的内容。</p><p>默认情况下，集合中的所有位初始值为<code>false</code>。</p><p>每个<code>BitSet</code>都有一个当前大小，即该<code>BitSet</code>当前使用的空间位数。</p><p>需要注意其大小与<code>BitSet</code>的实现有关，因此它可能随实现而改变。<code>BitSet</code>的长度与<code>BitSet</code>的逻辑长度有关，并且与实现无关。</p><p>除非另有说明，否则将<code>null</code>传递给<code>BitSet</code>中的任何方法都会导致<code>NullPointerException</code>。</p><p>如果没有外部同步，<code>BitSet</code>是线程不安全的。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><code>BitSet</code>是位操作的对象，值只有 <strong>0</strong> 或 <strong>1</strong> （<code>false</code>和<code>true</code>），其内部维护了一个<code>long</code>数组，初始只有一个<code>long</code>，所以<code>BitSet</code>最小的长度是<strong>64</strong>，当随着存储的元素越来越多，<code>BitSet</code>内部会动态扩充，最终内部是由<strong>N</strong>个<code>long</code>来存储。</p><p>如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-693.jpg" alt="upload successful"></p><p>我们每个数字对应一个<code>bit</code>位，其值<strong>0</strong> 或 <strong>1</strong>表示该位置数字存不存在，这样一个<code>long</code>（8bit）可以表示64个数据，1G空间（1024 x 1024 x 1024 x 8 = 8589934592 bit）可以表示 85亿数据的相关信息。</p><p>同时位操作也是较快的，这也就是为什么<code>BitSet</code>在处理特定海量数据高效且节省空间的原因。</p><h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><p>Java中的<code>BitSet</code>为我们提供了一些实用的操作方法，我们来看下。</p><h3 id="构造方法部分"><a href="#构造方法部分" class="headerlink" title="构造方法部分"></a>构造方法部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitSet</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//部分代码略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADDRESS_BITS_PER_WORD = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BITS_PER_WORD = <span class="number">1</span> &lt;&lt; ADDRESS_BITS_PER_WORD;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span>[] words;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> wordsInUse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">wordIndex</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bitIndex &gt;&gt; ADDRESS_BITS_PER_WORD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initWords(BITS_PER_WORD);</span><br><span class="line">        sizeIsSticky = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// nbits can&#x27;t be negative; size 0 is OK</span></span><br><span class="line">        <span class="keyword">if</span> (nbits &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NegativeArraySizeException(<span class="string">&quot;nbits &lt; 0: &quot;</span> + nbits);</span><br><span class="line"></span><br><span class="line">        initWords(nbits);</span><br><span class="line">        sizeIsSticky = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWords</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</span><br><span class="line">        words = <span class="keyword">new</span> <span class="keyword">long</span>[wordIndex(nbits-<span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部分代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码可以看到<code>BitSet</code>底层为<code>long</code>数组，<code>wordIndex</code>方法用来计算数据在数组的位置。</p><p><code>initWords</code>方法，初始化<code>long</code>数组，最少为1个<code>long</code>数组。</p><p><code>wordsInUse</code> 是检查当前的<code>long</code>数组中，实际使用的<code>long</code>的个数，即<code>long[wordsInUse-1]</code>是当前最后一个存储有有效bit的<code>long</code>。这个值是用于保存<code>BitSet</code>有效大小的。</p><h3 id="内部方法部分"><a href="#内部方法部分" class="headerlink" title="内部方法部分"></a>内部方法部分</h3><p>下面再来看下四个比较重要的内部方法：<code>ensureCapacity</code>、<code>expandTo</code>、<code>checkInvariants</code>、<code>recalculateWordsInUse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> wordsRequired)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (words.length &lt; wordsRequired) &#123;</span><br><span class="line">        <span class="comment">// Allocate larger of doubled size or required size</span></span><br><span class="line">        <span class="keyword">int</span> request = Math.max(<span class="number">2</span> * words.length, wordsRequired);</span><br><span class="line">        words = Arrays.copyOf(words, request);</span><br><span class="line">        sizeIsSticky = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expandTo</span><span class="params">(<span class="keyword">int</span> wordIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wordsRequired = wordIndex+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (wordsInUse &lt; wordsRequired) &#123;</span><br><span class="line">        ensureCapacity(wordsRequired);</span><br><span class="line">        wordsInUse = wordsRequired;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkInvariants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span>(wordsInUse == <span class="number">0</span> || words[wordsInUse - <span class="number">1</span>] != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">assert</span>(wordsInUse &gt;= <span class="number">0</span> &amp;&amp; wordsInUse &lt;= words.length);</span><br><span class="line">    <span class="keyword">assert</span>(wordsInUse == words.length || words[wordsInUse] == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recalculateWordsInUse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Traverse the bitset until a used word is found</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = wordsInUse-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (words[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    wordsInUse = i+<span class="number">1</span>; <span class="comment">// The new logical size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>checkInvariants</code>函数检查内部状态，校验<code>wordsInUse</code>等参数是否合法。在每一个<code>public</code>方法最后都会被调用。</p><p><code>recalculateWordsInUse</code>会计算<code>wordsInUse</code>的位置。</p><p><code>expandTo</code>和<code>ensureCapacity</code>为扩容方法，扩容条件是<code>wordsInUse < wordIndex+1</code>，扩容大小为 <code>2 * words.length</code>和<code>wordIndex+1</code>中的最大值。</p><h3 id="主要方法部分"><a href="#主要方法部分" class="headerlink" title="主要方法部分"></a>主要方法部分</h3><p>再来看下<code>BitSet</code>常用的几个主要方法:<code>set</code>，<code>clear</code>，<code>get</code>，<code>flip</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    expandTo(wordIndex);</span><br><span class="line"></span><br><span class="line">    words[wordIndex] |= (<span class="number">1L</span> &lt;&lt; bitIndex); <span class="comment">// Restores invariants</span></span><br><span class="line"></span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>set</code>方法设置某一指定位，操作主要有两步，找到对应的<code>long</code>，获取mask并与指定的位进行 按位或（OR） 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    <span class="keyword">if</span> (wordIndex &gt;= wordsInUse)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    words[wordIndex] &amp;= ~(<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clear</code>方法清除某一指定位，操作也基本分两步，找到对应的<code>long</code>，获取mask并与指定的位进行 按位与（AND） 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    expandTo(wordIndex);</span><br><span class="line"></span><br><span class="line">    words[wordIndex] ^= (<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flip</code>方法翻转某一指定位，操作也基本分两步，找到对应的<code>long</code>，获取mask并与指定的位进行 异或（XOR） 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    checkInvariants();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    <span class="keyword">return</span> (wordIndex &lt; wordsInUse)</span><br><span class="line">        &amp;&amp; ((words[wordIndex] &amp; (<span class="number">1L</span> &lt;&lt; bitIndex)) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get</code>方法获取某一指定位值，同样的两步走，这里的位操作是按位与（AND）。可以看到，如果指定的<code>bit</code>不存在的话，返回的是<code>false</code>，即没有设置。</p><p>主要方法处理上述部分外，还有重载的一些方法。</p><p>如对某个位置设置具体的布尔值，设置某一区间的值等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value)</span><br><span class="line">        set(bitIndex);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        clear(bitIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这儿就不过多介绍了。</p><h3 id="两个BitSet相关操作方法"><a href="#两个BitSet相关操作方法" class="headerlink" title="两个BitSet相关操作方法"></a>两个BitSet相关操作方法</h3><p>主要有以下四个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">and</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == set)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (wordsInUse &gt; set.wordsInUse)</span><br><span class="line">        words[--wordsInUse] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform logical AND on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInUse; i++)</span><br><span class="line">        words[i] &amp;= set.words[i];</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">or</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == set)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordsInCommon = Math.min(wordsInUse, set.wordsInUse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wordsInUse &lt; set.wordsInUse) &#123;</span><br><span class="line">        ensureCapacity(set.wordsInUse);</span><br><span class="line">        wordsInUse = set.wordsInUse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform logical OR on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInCommon; i++)</span><br><span class="line">        words[i] |= set.words[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy any remaining words</span></span><br><span class="line">    <span class="keyword">if</span> (wordsInCommon &lt; set.wordsInUse)</span><br><span class="line">        System.arraycopy(set.words, wordsInCommon,</span><br><span class="line">                            words, wordsInCommon,</span><br><span class="line">                            wordsInUse - wordsInCommon);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recalculateWordsInUse() is unnecessary</span></span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xor</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wordsInCommon = Math.min(wordsInUse, set.wordsInUse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wordsInUse &lt; set.wordsInUse) &#123;</span><br><span class="line">        ensureCapacity(set.wordsInUse);</span><br><span class="line">        wordsInUse = set.wordsInUse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform logical XOR on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInCommon; i++)</span><br><span class="line">        words[i] ^= set.words[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy any remaining words</span></span><br><span class="line">    <span class="keyword">if</span> (wordsInCommon &lt; set.wordsInUse)</span><br><span class="line">        System.arraycopy(set.words, wordsInCommon,</span><br><span class="line">                            words, wordsInCommon,</span><br><span class="line">                            set.wordsInUse - wordsInCommon);</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andNot</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Perform logical (a &amp; !b) on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = Math.min(wordsInUse, set.wordsInUse) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        words[i] &amp;= ~set.words[i];</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>and(BitSet set)</code>方法相当于对当前<code>BitSet</code>和参数<code>BitSet</code>执行按位与（AND）操作。</p><p><code>or(BitSet set)</code>方法相当于对当前<code>BitSet</code>和参数<code>BitSet</code>执行按位或（OR）操作。</p><p><code>xor(BitSet set)</code>方法相当于对当前<code>BitSet</code>和参数<code>BitSet</code>执行异或（XOR）操作。</p><p><code>andNot(BitSet set)</code>方法相当于对参数<code>BitSet</code>取反，然后和当前<code>BitSet</code>执行按位与（AND）操作。</p><h2 id="相关应用"><a href="#相关应用" class="headerlink" title="相关应用"></a>相关应用</h2><p>了解了<code>BitSet</code>相关方法和原理后，我们来看下<code>BitSet</code>的一些应用场景。</p><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><p><code>BitSet</code>一个典型的应用就是布隆过滤器，布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。</p><p>布隆过滤器通过一个<strong>Hash</strong>函数将一个元素映射成一个位阵列（Bit array）中的一个点。这样一来，我们只要看看这个点是不是1就可以知道集合中有没有它了。这就是布隆过滤器的基本思想。</p><p><strong>Hash</strong>面临的问题就是冲突。假设<strong>Hash</strong>函数是良好的，如果我们的位阵列长度为m个点，那么如果我们想将冲突率降低到例如1%, 这个散列表就只能容纳 <strong>m / 100</strong> 个元素。显然这就不叫空间效率了（Space-efficient）。解决方法也简单，就是使用多个<strong>Hash</strong>，如果它们有一个说元素不在集合中，那肯定就不在。如果它们都说在，虽然也有一定可能性它们在说谎，不过直觉上判断这种事情的概率是比较低的。</p><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个长度为10 亿的比特位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">256</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为了降低错误率，使用加法hash算法，所以定义一个8个元素的质数数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] seeds = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">61</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于构建 8 个不同的hash算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashFunction[] functions = <span class="keyword">new</span> HashFunction[seeds.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化布隆过滤器的 bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BitSet bitset = <span class="keyword">new</span> BitSet(DEFAULT_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要加入的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (HashFunction f : functions) &#123;</span><br><span class="line">                <span class="comment">//计算 hash 值并修改 bitmap 中相应位置为 true</span></span><br><span class="line">                bitset.set(f.hash(value), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断相应元素是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要判断的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> ret = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (HashFunction f : functions) &#123;</span><br><span class="line">            ret = bitset.get(f.hash(value));</span><br><span class="line">            <span class="comment">//一个 hash 函数返回 false 则跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seeds.length; i++) &#123;</span><br><span class="line">            functions[i] = <span class="keyword">new</span> HashFunction(DEFAULT_SIZE, seeds[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加1亿数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            add(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        String id = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">        add(id);</span><br><span class="line"></span><br><span class="line">        System.out.println(contains(id));   <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + contains(<span class="string">&quot;234567890&quot;</span>));  <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashFunction</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.seed = seed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = value.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            result = seed * result + value.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (size - <span class="number">1</span>) &amp; result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到布隆过滤器可以解决我们上面所说的问题：如何快速判断某个数字在1亿数据中有没有出现过？</p><p>除了这个问题，布隆过滤器也可以解决邮箱黑名单等一系列问题。</p><p>使用<code>BitSet</code>，还可以对有限范围的大量正整数进行快速排序，我们来看一下。</p><h3 id="使用BitSet排序"><a href="#使用BitSet排序" class="headerlink" title="使用BitSet排序"></a>使用BitSet排序</h3><p>需要注意的是，使用<code>BitSet</code>进行排序时，需要数据为正整数，且需要知道数据范围（最大值范围），并且在排序时，如果有相同元素，<code>BitSet</code>需要变种，进行额外处理。</p><p>其实也是比较好理解的，<code>BitSet</code>可以表示<code> 1 ~ +∞ </code> 范围的数据，知道数据范围，我们将数组数据放到<code>BitSet</code>对应的位置上，然后遍历拿到<code>true</code>的数据即可。</p><p>相同元素会被覆盖，因此普通的<code>BitSet</code>是无法统计数据数量的，也就是如果数组存在相同元素，<code>BitSet</code>需要变化一下才能适应对此的排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitSetSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNumber(<span class="keyword">int</span> size, <span class="keyword">int</span> max) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">//[0,max)</span></span><br><span class="line">            nums[i] = RandomUtils.nextInt(max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用BitSet进行排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max  最大值范围，不需要知道最大值，这个值不小于最大值即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bitSetSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//辅助map，用于记录相同元素次数</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet(max);</span><br><span class="line">        bitSet.set(<span class="number">0</span>, max, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//更改数据位为true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (bitSet.get(pos)) &#123;</span><br><span class="line">                Integer value = map.get(pos);</span><br><span class="line">                value = value == <span class="keyword">null</span> ? <span class="number">0</span> : value;</span><br><span class="line">                value++;</span><br><span class="line">                map.put(pos, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bitSet.set(pos, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历bitSet</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bitSet.get(i)) &#123;</span><br><span class="line">                nums[k] = i;</span><br><span class="line">                k++;</span><br><span class="line">                Integer value = map.get(i);</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; value; s++) &#123;</span><br><span class="line">                        nums[k] = i;</span><br><span class="line">                        k++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = generateNumber(<span class="number">100000000</span>, <span class="number">10000000</span>);</span><br><span class="line">        <span class="keyword">long</span> start1 = System.currentTimeMillis();</span><br><span class="line">        bitSetSort(nums, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">long</span> end1 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;BitSet排序耗时--&gt; &quot;</span> + (end1-start1) +<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们这儿借助<code>HashMap</code>来存储相同元素个数，如果待排序的数据不重复，则不引入<code>HashMap</code>即可，同时可以达到很高的效率。</p><p>我们也可以使用1bit来记录该位置是否有多个相同元素，有的话再去<code>Map</code>里获取，这样也能提高不少效率，其也属于<code>BitSet</code>的变种。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本篇文章我们了解了<code>BitSet</code>的原理及一些使用场景，在特定的情况下，使用<code>BitSet</code>或许是个不错的选择。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;面试过程中我们或许被问过如下问题：如何快速判断某个数字在1亿数据中有没有出现过？&lt;/p&gt;
&lt;p&gt;这都要用到我们今天要说的&lt;code&gt;BitSet&lt;/code&gt;，我们下面一起来看下吧。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://www.sakuratears.top/tags/Java/"/>
    
    <category term="BitSet" scheme="https://www.sakuratears.top/tags/BitSet/"/>
    
  </entry>
  
  <entry>
    <title>分布式缓存算法原理</title>
    <link href="https://www.sakuratears.top/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.html"/>
    <id>https://www.sakuratears.top/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.html</id>
    <published>2021-04-18T10:59:00.000Z</published>
    <updated>2021-04-18T11:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在使用缓存型数据库时，如<strong>Redis</strong>，为保证缓存数据库的高可用，提高缓存数据库的读写性能，最简单的方式是我们做缓存数据库的读写分离，组成<strong>Master-Master</strong>或者<strong>Master-Slave</strong>的形式，或者搭建缓存数据库集群。</p><p>当数据量更大时，和数据库类似，我们可以对缓存数据库进行“分库分表”操作。</p><p>在对缓存数据库进行“分库分表”操作中，便会涉及到分布式缓存算法的一些内容。我们来看下。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>现在假设我们有一个网站，需要使用缓存数据库<strong>Redis</strong>存储图片资源，存储的格式为键值对，key值为图片名称，value为该图片所在文件服务器的路径，我们需要根据文件名查找该文件所在文件服务器上的路径，数据量大概有2000W左右，按照我们约定的规则进行分库，规则就是随机分配，我们可以部署8台缓存服务器，每台服务器大概含有500W条数据，并且进行主从复制，示意图如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-683.jpg" alt="upload successful"></p><p>由于规则随机，所以我们的数据可能存储在任何一组<strong>Redis</strong>中，我们如果想找某张图片，比如“a.png”，则需要遍历4组<strong>Redis</strong>查询，这显然是不能接受的。</p><p>我们可以使用数据库“分库分表”的一些规则来，如按照Hash值，按照类别，按照某个字段值来进行分配。</p><p><strong>Redis</strong>作为通用缓存数据库，我们按照数据key的Hash值来对数据分类较好，因为Hash值不涉及到具体的业务逻辑。</p><h2 id="使用Hash"><a href="#使用Hash" class="headerlink" title="使用Hash"></a>使用Hash</h2><p>可以知道，我们使用Hash，每一张图片在分库时都可以定位到特定的服务器，如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-684.jpg" alt="upload successful"></p><p>上图中，假设我们查找的是”a.png”，由于有4台服务器（排除从库），因此公式为<strong>hash(a.png) % 4 = 2</strong> ，可知定位到了第2号服务器，这样的话就不会遍历所有的服务器，大大提升了性能。</p><h2 id="使用Hash的问题"><a href="#使用Hash的问题" class="headerlink" title="使用Hash的问题"></a>使用Hash的问题</h2><p>上述的方式虽然提升了性能，我们不再需要对整个Redis服务器进行遍历。但是，使用上述Hash算法进行缓存时，会出现一些缺陷，主要体现在服务器数量变动的时候，所有缓存的位置都要发生改变。</p><p>试想一下，如果4台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？</p><p>很简单，多增加几台缓存服务器不就行了。</p><p>假设我们增加了一台缓存服务器，那么缓存服务器的数量就由4台变成了5台。那么原本<strong>hash(a.png) % 4 = 2</strong> 的公式就变成了 <strong>hash(a.png) % 5 =？</strong> 。</p><p>假设有20个数据需要存储，在有4个<strong>Redis</strong>节点的时候如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-685.jpg" alt="upload successful"></p><p>当我们添加1个<strong>Redis</strong>节点之后，数据的分布如下图所示：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-686.jpg" alt="upload successful"></p><p>上图中蓝色部分代表与4个节点时存储位置一致的数据，其命中率为：4/20=20%。也就是说这种情况带来的结果就是当服务器数量变动时，很多缓存的位置都要发生改变。</p><p>也就是当服务器数量发生改变时，所有缓存在一定时间内是失效的，当应用无法从缓存获取数据时，大量请求会调用数据库获取数据，导致数据库瘫痪（缓存雪崩）。</p><p>同样的，如果一台服务器出现故障，我们要将其移除，缓存服务器数量从4台变为3台，也会出现上述问题。</p><p>我们应该避免这种问题，这种问题是由于Hash算法本身的缘故，使用取模法进行缓存时，这种情况是无法避免的。</p><p>为了解决上述问题，一致性Hash算法诞生了。</p><h2 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h2><p>一致性Hash算法也是使用取模的方法，只是，上述的取模法是对服务器的数量进行取模，而一致性Hash算法是对<strong>2^32-1</strong>取模。</p><p>简单来说，一致性Hash算法将整个Hash值空间组织成一个虚拟的圆环，如假设某Hash函数H的值空间为<strong>0-2^32-1</strong>（即Hash值是一个32位无符号整形），整个Hash空间环如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-687.jpg" alt="upload successful"></p><p>整个空间按顺时针方向组织。<strong>0~2^32-1</strong>在零点中方向重合。</p><p>下一步将各个服务器使用Hash进行处理，具体可以选择服务器的ip或主机名作为关键字进行Hash，这样每台机器就能确定其在Hash环上的位置，这里假设将上文中四台服务器使用ip地址Hash后在环空间的位置如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-688.png" alt="upload successful"></p><p>接下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。</p><p>例如我们有<strong>Object A</strong>、<strong>Object B</strong>、<strong>Object C</strong>、<strong>Object D</strong>四个数据对象，经过哈希计算后，在环空间上的位置如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-689.png" alt="upload successful"></p><p>根据一致性哈希算法，数据<strong>A</strong>会被定为到<strong>Node A</strong>上，<strong>B</strong>被定为到<strong>Node B</strong>上，<strong>C</strong>被定为到<strong>Node C</strong>上，<strong>D</strong>被定为到<strong>Node D</strong>上。</p><h2 id="一致性Hash算法的容错性和可扩展性"><a href="#一致性Hash算法的容错性和可扩展性" class="headerlink" title="一致性Hash算法的容错性和可扩展性"></a>一致性Hash算法的容错性和可扩展性</h2><p>下面分析一致性哈希算法的容错性和可扩展性。</p><p>现假设<strong>Node C</strong>不幸宕机，可以看到此时对象<strong>A</strong>、<strong>B</strong>、<strong>D</strong>不会受到影响，只有<strong>C</strong>对象被重定位到<strong>Node D</strong>。一般的，在一致性哈希算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。</p><p>下面考虑另外一种情况，如果在系统中增加一台服务器<strong>Node X</strong>，如下图所示：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-690.png" alt="upload successful"></p><p>此时对象<strong>Object A</strong>、<strong>B</strong>、<strong>D</strong>不受影响，只有对象<strong>C</strong>需要重定位到新的<strong>Node X</strong> 。一般的，在一致性哈希算法中，如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它数据也不会受到影响。</p><p>综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</p><h2 id="一致性Hash算法的数据倾斜问题"><a href="#一致性Hash算法的数据倾斜问题" class="headerlink" title="一致性Hash算法的数据倾斜问题"></a>一致性Hash算法的数据倾斜问题</h2><p>另外，一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-691.png" alt="upload successful"></p><p>此时必然造成大量数据集中到<strong>Node A</strong>上，而只有极少量会定位到<strong>Node B</strong>上。</p><p>为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。具体做法可以在服务器ip或主机名的后面增加编号来实现。</p><p>例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 <strong>Node A#1</strong>、<strong>Node A#2</strong>、<strong>Node A#3</strong>、<strong>Node B#1</strong>、<strong>Node B#2</strong>、<strong>Node B#3</strong>的哈希值，于是形成六个虚拟节点：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-692.png" alt="upload successful"></p><p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到<strong>Node A#1</strong>、<strong>Node A#2</strong>、<strong>Node A#3</strong>三个虚拟节点的数据均定位到<strong>Node A</strong>上。这样就解决了服务节点少时数据倾斜的问题。</p><p>在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p><h2 id="Java简单实现"><a href="#Java简单实现" class="headerlink" title="Java简单实现"></a>Java简单实现</h2><p>下面我们通过代码来简单实现下一致性Hash算法的效果。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistHash</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一致性Hash算法最大值，0 - 2^32 -1</span></span><br><span class="line"><span class="comment">     * Integer的范围，- 2^31 --- 2^31 -1</span></span><br><span class="line"><span class="comment">     * 我们取模后为方便都以无符号整数来统计</span></span><br><span class="line"><span class="comment">     * Java中hashCode范围即Integer范围，取到负数后，我们取其绝对值+Integer.MAX_VALUE 来表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_VALUE = <span class="number">0xffffffffL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MIN_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> List&lt;Long&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟缓存类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map&lt;Long,RedisServer&lt;K,V&gt;&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; serverList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsistHash</span><span class="params">(List&lt;String&gt; serverList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverList = serverList;</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(serverList))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;服务器列表为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        initHashLoop(serverList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象生成hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hash;</span><br><span class="line">        <span class="keyword">int</span> hashCode = object.hashCode();</span><br><span class="line">        <span class="keyword">if</span>(hashCode &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            hash = (<span class="keyword">long</span>)(-hashCode) + (<span class="keyword">long</span>)Integer.MAX_VALUE;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            hash = hashCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据服务器初始化Hash环</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serverList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHashLoop</span><span class="params">(List&lt;String&gt; serverList)</span></span>&#123;</span><br><span class="line">        <span class="comment">//构建服务节点</span></span><br><span class="line">        <span class="keyword">for</span> (String s : serverList) &#123;</span><br><span class="line">            <span class="comment">//每个服务器计算Hash</span></span><br><span class="line">            <span class="keyword">long</span> h = hash(s);</span><br><span class="line">            <span class="comment">//快速查找数据节点位置</span></span><br><span class="line">            list.add(h);</span><br><span class="line">            <span class="comment">//建立映射关系</span></span><br><span class="line">            cache.put(h,<span class="keyword">new</span> RedisServer&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入缓存对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//计算hash</span></span><br><span class="line">        <span class="keyword">long</span> h = hash(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> temp = list.get(i);</span><br><span class="line">            <span class="comment">//小于第一个hash值归到第一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; h &lt;= temp)&#123;</span><br><span class="line">               cache.get(temp).set(key,value);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大于当前hash且小于下一个hash归到下一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; list.size() &amp;&amp; h &gt; temp &amp;&amp; h &lt;= list.get(i+<span class="number">1</span>))&#123;</span><br><span class="line">                cache.get(list.get(i+<span class="number">1</span>)).set(key,value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比最后的hash还要大，归到第一个hash缓存（顺时针）</span></span><br><span class="line">            <span class="keyword">if</span>(h &gt; list.get(list.size() -<span class="number">1</span>))&#123;</span><br><span class="line">                cache.get(list.get(<span class="number">0</span>)).set(key,value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="comment">//计算hash</span></span><br><span class="line">        <span class="keyword">long</span> h = hash(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> temp = list.get(i);</span><br><span class="line">            <span class="comment">//小于第一个hash值归到第一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; h &lt;= temp)&#123;</span><br><span class="line">                <span class="keyword">return</span> cache.get(temp).get(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大于当前hash且小于下一个hash归到下一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; list.size() &amp;&amp; h &gt; temp &amp;&amp; h &lt;= list.get(i+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> cache.get(list.get(i+<span class="number">1</span>)).get(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比最后的hash还要大，归到第一个hash缓存（顺时针）</span></span><br><span class="line">            <span class="keyword">if</span>(h &gt; list.get(list.size() -<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> cache.get(list.get(<span class="number">0</span>)).get(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟删除一个Redis缓存服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeServer</span><span class="params">(String server)</span></span>&#123;</span><br><span class="line">        Long h = hash(server);</span><br><span class="line">        list.remove(h);</span><br><span class="line">        cache.remove(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟添加一个Redis缓存服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addServer</span><span class="params">(String server)</span></span>&#123;</span><br><span class="line">        Long h = hash(server);</span><br><span class="line">        list.add(h);</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        cache.put(h,<span class="keyword">new</span> RedisServer&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印缓存情况</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringJoiner sj1 = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        list.forEach(e-&gt;&#123;</span><br><span class="line">            sj1.add(e.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(sj1);</span><br><span class="line"></span><br><span class="line">        StringJoiner sj2 = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        cache.forEach((k,v)-&gt;&#123;</span><br><span class="line">            StringJoiner sj3 = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            v.map.forEach((a,b)-&gt;&#123;</span><br><span class="line">                sj3.add(<span class="string">&quot;[&quot;</span>+a+<span class="string">&quot;-&gt;&quot;</span>+b+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            sj2.add(k+<span class="string">&quot;:&#123;&quot;</span>+sj3.toString()+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(sj2.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟Redis服务</span></span><br><span class="line"><span class="comment">     * 当然Redis拿不到就会去数据库取数据，我们这儿简化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServer</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K,V&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">            map.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;10.1.1.2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;10.2.2.3&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;10.3.4.4&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;10.10.2.5&quot;</span>);</span><br><span class="line">        ConsistHash&lt;String,String&gt; consistHash = <span class="keyword">new</span> ConsistHash&lt;&gt;(list);</span><br><span class="line"></span><br><span class="line">        consistHash.set(<span class="string">&quot;key1111133132311&quot;</span>,<span class="string">&quot;key11111&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>,<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12232433sfddsf&quot;</span>,<span class="string">&quot;12232433sfddsf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;xsdsf567899&quot;</span>,<span class="string">&quot;xsdsf567899&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12qwqs&quot;</span>,<span class="string">&quot;12qwqs&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ffffffff&quot;</span>,<span class="string">&quot;ffffffff&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;宕机前：&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟宕机，查看缓存分别情况</span></span><br><span class="line">        consistHash.removeServer(<span class="string">&quot;10.1.1.2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;宕机后：&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重新放入值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数据重新分布：&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;key1111133132311&quot;</span>,<span class="string">&quot;key11111&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>,<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12232433sfddsf&quot;</span>,<span class="string">&quot;12232433sfddsf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;xsdsf567899&quot;</span>,<span class="string">&quot;xsdsf567899&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12qwqs&quot;</span>,<span class="string">&quot;12qwqs&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ffffffff&quot;</span>,<span class="string">&quot;ffffffff&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line"></span><br><span class="line">        consistHash.addServer(<span class="string">&quot;10.1.1.2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加一个服务器：&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;key1111133132311&quot;</span>,<span class="string">&quot;key11111&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>,<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12232433sfddsf&quot;</span>,<span class="string">&quot;12232433sfddsf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;xsdsf567899&quot;</span>,<span class="string">&quot;xsdsf567899&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12qwqs&quot;</span>,<span class="string">&quot;12qwqs&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ffffffff&quot;</span>,<span class="string">&quot;ffffffff&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，需要注意的点如下：</p><ul><li>我们用了一个简易的<code>RedisServer</code>类来模拟<strong>Redis</strong>服务；</li><li>Hash算法也非常简单，采用了<strong>Java</strong>中对象的<code>hashCode</code>方法，如果取到负值，变为正值并加上<code>Integer.MAX_VALUE</code>；</li><li>其实上面的Hash算法直接用<code>hashCode</code>方法也是可以的，当然Hash数据范围变为<code>Integer.MIN_VALUE</code> - <code>Integer.MAX_VALUE</code>;</li><li>我们运行测试类，可以看到其实服务器Hash后分布并不是很均匀的(数据倾斜)，我们可以通过上面说的“虚拟节点”来解决，这儿就不上代码了。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文中，我们了解到了什么是一致性Hash算法，并通过代码加深了对算法的理解。</p><p>由于分布式系统中，每个节点都有可能新增或失效，如何保证系统能够正常运行，并对外提供稳定服务，一致性Hash算法即提供了处理这种问题的一个思路。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cnblogs.com/lpfuture/p/5796398.html">一致性Hash算法原理</a></li><li><a href="https://www.cnblogs.com/study-everyday/p/8629100.html">一致性Hash算法</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在使用缓存型数据库时，如&lt;strong&gt;Redis&lt;/strong&gt;，为保证缓存数据库的高可用，提高缓存数据库的读写性能，最简单的方式是我们做缓存数据库的读写分离，组成&lt;strong&gt;Master-Master&lt;/strong&gt;或者&lt;strong&gt;Master-Slave&lt;/strong&gt;的形式，或者搭建缓存数据库集群。&lt;/p&gt;
&lt;p&gt;当数据量更大时，和数据库类似，我们可以对缓存数据库进行“分库分表”操作。&lt;/p&gt;
&lt;p&gt;在对缓存数据库进行“分库分表”操作中，便会涉及到分布式缓存算法的一些内容。我们来看下。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="一致性Hash算法" scheme="https://www.sakuratears.top/tags/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>缓存淘汰算法（LFU、LRU、FIFO、ARC、MRU）</title>
    <link href="https://www.sakuratears.top/blog/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%EF%BC%88LFU%E3%80%81LRU%E3%80%81FIFO%E3%80%81ARC%E3%80%81MRU%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%EF%BC%88LFU%E3%80%81LRU%E3%80%81FIFO%E3%80%81ARC%E3%80%81MRU%EF%BC%89.html</id>
    <published>2021-04-05T07:50:00.000Z</published>
    <updated>2021-04-05T08:44:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般情况下，我们读取数据，无论从数据库还是磁盘，都是比较慢的，要加快数据读取可以使用缓存，将数据缓存下来。例如比较有名的工具<strong>Redis</strong>等。</p><p>无论如何缓存数据，随着数据量增大，内存容量是有一定限制的，因此我们只能缓存定量的数据。</p><p>对于我们来说，肯定要缓存经常使用或者未来很大概率被使用的数据，这样才有利于我们的业务。</p><p>因此对于定量的缓存，如果缓存量过大，势必要删除一部分缓存数据，这就涉及到了缓存的淘汰策略问题。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>常用的缓存淘汰算法一般有5种，<strong>FIFO</strong>、<strong>LRU</strong>、<strong>LFU</strong>、<strong>ARC</strong>、<strong>MRU</strong>。</p><p>如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-682.jpg" alt="upload successful"></p><p>最常使用的是<strong>LRU</strong>和<strong>LFU</strong>缓存淘汰算法。</p><p>接下来我们分别来看下这5种缓存淘汰算法。</p><p>由于每种算法都写了一些Java代码实现，对其进行整理后，我们需要实现以下两个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向缓存放入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><p><strong>FIFO(First In First Out)</strong> 先进先出淘汰算法，这种淘汰算法非常好理解，我们不关心缓存数据实际访问情况，如果缓存满了后，自动删除较早放入的缓存数据。</p><p>一般我们使用队列就可以实现这种淘汰算法。</p><p>优点：内存占用低、速度快、实现简单。</p><p>缺点：缓存命中率低、使用价值也不高。</p><p>这儿我提供了两种相关<strong>FIFO</strong>淘汰算法的实现，一种借助Java中的工具类<code>LinkedList</code>，一种是自己手写了一个先进先出（<strong>FIFO</strong>）队列。</p><p><strong>FIFO</strong>相关接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现方案一：借助<code>LinkedList</code>。</p><p>该方案 内存占用高，但借助<code>HashMap</code>，可以实现接近O(1)的查找效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IFIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * linkedList可以遵循先进先出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;K&gt; linkedList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来存储value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; hashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FIFOCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hashMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置值时，判断K存不存在</span></span><br><span class="line">        V v = hashMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有的话新增即可</span></span><br><span class="line">            hashMap.put(key,value);</span><br><span class="line">            <span class="comment">//添加到链表尾</span></span><br><span class="line">            linkedList.add(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//存在更新即可</span></span><br><span class="line">            hashMap.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断容量</span></span><br><span class="line">        <span class="keyword">int</span> size = linkedList.size();</span><br><span class="line">        <span class="keyword">if</span>(size &gt; capacity)&#123;</span><br><span class="line">            <span class="comment">//删除头部元素</span></span><br><span class="line">            K k = linkedList.poll();</span><br><span class="line">            hashMap.remove(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现方案二，手写一个先进先出队列，头部删除旧元素，尾部放入新元素。</p><p>该方案 内存占用低，但查找时需要遍历链表，时间复杂度较高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIFOCache1</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IFIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoublePointLinkedList&lt;K,V&gt; linkedList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FIFOCache1</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedList = <span class="keyword">new</span> DoublePointLinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        DoublePointLinkedList&lt;K,V&gt;.Node&lt;K,V&gt; node = linkedList.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        DoublePointLinkedList&lt;K,V&gt;.Node&lt;K,V&gt; node = linkedList.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//更新一下值</span></span><br><span class="line">            node.value = value;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//长度超过容量，删除头部元素</span></span><br><span class="line">            <span class="keyword">if</span>(linkedList.size &gt;= capacity)&#123;</span><br><span class="line">                linkedList.delHead();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将新值添加到队尾</span></span><br><span class="line">            linkedList.addTail(key,value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublePointLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; head;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; next;</span><br><span class="line">            <span class="keyword">private</span> K key;</span><br><span class="line">            <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoublePointLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">addHead</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.next = head;</span><br><span class="line">                head = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">addTail</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail.next = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node&lt;K,V&gt; <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = head;</span><br><span class="line">            <span class="keyword">while</span> (node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.key.equals(key))&#123;</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//只有一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">1</span> &amp;&amp; head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                head = <span class="keyword">null</span>;</span><br><span class="line">                tail = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p><strong>LRU(Least Recently used)</strong> 最近最少使用缓存淘汰算法，其淘汰最近一段时间最少被访问的缓存数据。</p><p>其核心思想是如果数据最近被访问过，那么将来被访问的几率也更高，其不关心数据的访问频次。</p><p>我们使用队列可以实现这种淘汰算法，对于访问的元素，移动到链表尾，这样链表头为较旧的元素，当容量满时，淘汰掉链表头元素即可。</p><p>优点：实现方式较简单，且缓存命中率也较高，占用内存也不高。</p><p>缺点：需要遍历链表查询，效率较低；该方式仅从时间维度考虑数据，未考虑数据访问频次，如果一个经常访问的热点数据近期没有被访问（偶发性），导致缓存将其删除，而后在访问时无法命中，导致<strong>LRU</strong>命中率下降。</p><p>借助Java里的工具类<code>LinkedHashMap</code>，我们可以方便的实现<strong>LRU</strong>。<code>LinkedHashMap</code>有个参数<code>accessOrder</code>，当设置为<code>true</code>时，被访问的元素（较新的）会被移动到链表尾。同时如果重写了<code>removeEldestEntry</code>方法，当达到条件时，<code>LinkedHashMap</code>便会删除链表头（较旧的）元素。</p><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助<code>LinkedHashMap</code>，我们可以实现查找接近O(1)的<strong>LRU</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; linkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        linkedHashMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置使用的LinkedHashMap</span></span><br><span class="line"><span class="comment">     * 删除旧元素的条件是长度超过容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TLinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(capacity,<span class="number">0.75f</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LRU-K"><a href="#LRU-K" class="headerlink" title="LRU-K"></a>LRU-K</h3><p><strong>LRU-K</strong>中的<strong>K</strong>代表次数，相比于普通的<strong>LRU</strong>（可以认为<strong>LRU-1</strong>），其主要为了解决上面提到的偶发性问题。</p><p>核心思想是将最近使用过1次的判断标准改为最近使用过<strong>K</strong>次。</p><p>优点：相比于<strong>LRU</strong>，对于偶发性数据<strong>LRU-K</strong>有更好的适应性，命中率也比普通<strong>LRU</strong>更高。<br>缺点：<strong>LRU-K</strong>需要额外记录历史缓存数据，内存消耗要比<strong>LRU</strong>要高。</p><p>我们通过两个<code>LinkedHashMap</code>来实现<strong>LRU-K</strong>。</p><p>其实现原理如下：</p><ol><li>数据第一次被访问，加入到访问历史列表；</li><li>如果数据在访问历史列表里后没有达到K次访问，则按照一定规则（<strong>FIFO</strong>，<strong>LRU</strong>）淘汰；</li><li>当访问历史队列中的数据访问次数达到K次后，将数据索引从历史队列删除，将数据移到缓存队列中，并缓存此数据，缓存队列重新按照时间排序；</li><li>缓存数据队列中被再次访问后，重新排序；</li><li>需要淘汰数据时，淘汰缓存队列中排在末尾的数据，即淘汰“倒数第K次访问离现在最久”的数据。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRU_KCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> helpCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该队列用户缓存历史所有访问数据（删除数据方法：删除时间最早的元素）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,Cache&lt;K,V&gt;&gt; helpLinkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; linkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义一个构造方法，辅助队列容量默认为缓存队列的50倍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRU_KCache</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(count,capacity,<span class="number">50</span>*capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRU_KCache</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> capacity, <span class="keyword">int</span> helpCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span> || helpCapacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;次数不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.helpCapacity = helpCapacity;</span><br><span class="line"></span><br><span class="line">        linkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="comment">//辅助队列，用于存储历史访问记录</span></span><br><span class="line">        helpLinkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(helpCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先从缓存队列里获取数据</span></span><br><span class="line">        V v = linkedHashMap.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不存在，尝试从辅助队列里获取数据</span></span><br><span class="line">        <span class="keyword">if</span>(v == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Cache&lt;K,V&gt; cache = helpLinkedHashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(cache != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//增加访问次数</span></span><br><span class="line">                <span class="keyword">int</span> temp = cache.addCount();</span><br><span class="line">                v = cache.getValue();</span><br><span class="line">                <span class="comment">//达到指定次数后移至缓存队列</span></span><br><span class="line">                <span class="keyword">if</span>(temp &gt;= count)&#123;</span><br><span class="line">                    linkedHashMap.put(key,v);</span><br><span class="line">                    helpLinkedHashMap.remove(key);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//没达到指定次数，更新下辅助队列数据</span></span><br><span class="line">                    helpLinkedHashMap.put(key,cache);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作，首先判断缓存队列里是否有数据</span></span><br><span class="line">        V v = linkedHashMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//更新最新值</span></span><br><span class="line">            linkedHashMap.put(key,value);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//没有值的话去辅助队列获取</span></span><br><span class="line">            Cache&lt;K,V&gt; cache = helpLinkedHashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(cache != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//增加访问次数</span></span><br><span class="line">                <span class="keyword">int</span> temp = cache.addCount();</span><br><span class="line">                cache.setValue(value);</span><br><span class="line">                <span class="comment">//达到指定次数后移至缓存队列</span></span><br><span class="line">                <span class="keyword">if</span>(temp &gt;= count)&#123;</span><br><span class="line">                    linkedHashMap.put(key,value);</span><br><span class="line">                    helpLinkedHashMap.remove(key);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//没达到指定次数，更新下辅助队列数据</span></span><br><span class="line">                    helpLinkedHashMap.put(key,cache);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//没有数据，新增即可</span></span><br><span class="line">                cache = <span class="keyword">new</span> Cache&lt;&gt;(key,value);</span><br><span class="line">                helpLinkedHashMap.put(key,cache);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存队列移除元素原则：</span></span><br><span class="line"><span class="comment">     * 队列达到指定长度，队列里存的都是访问k次（及以上）的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TLinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(capacity,<span class="number">0.75f</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cache</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 增加次数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2Q"><a href="#2Q" class="headerlink" title="2Q"></a>2Q</h3><p><strong>2Q(Two queues)</strong> 算法类似于<strong>LRU-2</strong>，不同点在于<strong>2Q</strong>将<strong>LRU-2</strong>算法中的访问历史队列改为一个<strong>FIFO</strong>缓存队列，即：<strong>2Q</strong>算法有两个缓存队列，一个是<strong>FIFO</strong>队列，一个是<strong>LRU</strong>队列。</p><p>其工作原理如下：</p><ol><li>新访问的数据插入到<strong>FIFO</strong>队列；</li><li>如果数据在<strong>FIFO</strong>队列中一直没有被再次访问，则最终按照<strong>FIFO</strong>规则淘汰；</li><li>如果数据在<strong>FIFO</strong>队列中被再次访问，则将数据移到<strong>LRU</strong>队列；</li><li>如果数据在<strong>LRU</strong>队列再次被访问，则按照<strong>LRU</strong>规则进行；</li><li><strong>LRU</strong>队列淘汰旧的数据。</li></ol><p>其相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoQueueCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FIFOCache&lt;K,V&gt; fifoQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LRUCache&lt;K,V&gt; lruQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoQueueCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.fifoQueue = <span class="keyword">new</span> FIFOCache&lt;&gt;(<span class="number">50</span> * capacity);</span><br><span class="line">        <span class="keyword">this</span>.lruQueue = <span class="keyword">new</span> LRUCache&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先判断lru是否有数据</span></span><br><span class="line">        V v = lruQueue.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有查询fifo队列是否有数据</span></span><br><span class="line">        v = fifoQueue.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放入lru队列</span></span><br><span class="line">            lruQueue.set(key,v);</span><br><span class="line">            <span class="comment">//fifo删除数据</span></span><br><span class="line">            fifoQueue.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查不到返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先查询lru是否存在数据</span></span><br><span class="line">        <span class="keyword">if</span>(lruQueue.contains(key))&#123;</span><br><span class="line">            lruQueue.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断fifo队列是否存在</span></span><br><span class="line">        V v = fifoQueue.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放入lru队列</span></span><br><span class="line">            lruQueue.set(key,value);</span><br><span class="line">            <span class="comment">//fifo删除数据</span></span><br><span class="line">            fifoQueue.remove(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fifo队列不存在，直接放入</span></span><br><span class="line">        fifoQueue.set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><p><strong>LFU(Least Frequently Used)</strong> 最近最不常用，其是基于数据的访问频次及访问时间来对缓存数据进行淘汰的算法。</p><p>相比于<strong>LRU</strong>，<strong>LFU</strong>对于偶发性数据具有更好的适应性，其淘汰数据依据两点：访问频次、访问时间。</p><p>其核心思想是如果数据过去被访问多次，那么将来被访问的频率也更高。</p><p>优点：命中率较高</p><p>缺点：实现较复杂，内存占用较高，需要记录数据的访问频次和最新时间，实现不好的话，时间复杂度也可能较高。</p><p>我们来看下相关代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方案一</strong></p><p>借助<code>HashMap</code>来实现（删除访问次数较少并且更新时间较早的数据时需要遍历），删除元素时需要遍历缓存Map找到“最小”数据并删除，实现简单，不过效率低下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache0</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,CacheObject&lt;V&gt;&gt; cacheMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache0</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据k获取某个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>&#123;</span><br><span class="line">        <span class="comment">//取不到返回null</span></span><br><span class="line">        CacheObject&lt;V&gt; object = cacheMap.get(k);</span><br><span class="line">        <span class="keyword">if</span>(object == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取到更新次数及时间</span></span><br><span class="line">        <span class="keyword">return</span> object.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置某个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K k,V v)</span></span>&#123;</span><br><span class="line">        <span class="comment">//容量不能为0</span></span><br><span class="line">        <span class="keyword">if</span>(capacity == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先尝试获取缓存数据</span></span><br><span class="line">        CacheObject&lt;V&gt; object = cacheMap.get(k);</span><br><span class="line">        <span class="keyword">if</span>(object == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放入前先检查容量，如果已满，删除访问次数较少并且更新时间较早的数据</span></span><br><span class="line">            <span class="keyword">if</span>(cacheMap.size() &gt;= capacity)&#123;</span><br><span class="line">                cacheMap.entrySet().stream().min(Comparator.comparing(Map.Entry::getValue)).ifPresent(e-&gt;&#123;</span><br><span class="line">                    cacheMap.remove(e.getKey());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            object = <span class="keyword">new</span> CacheObject&lt;&gt;(v);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//有数据，直接进行更新</span></span><br><span class="line">            object.setValue(v);</span><br><span class="line">        &#125;</span><br><span class="line">        cacheMap.put(k,object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据缓存类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObject</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">CacheObject</span>&lt;<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最后更新时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> lastUpdateTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 访问次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> accessCount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CacheObject</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(CacheObject&lt;V&gt; o)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//比较次数大小</span></span><br><span class="line">            <span class="keyword">int</span> value = Integer.compare(<span class="keyword">this</span>.accessCount,o.accessCount);</span><br><span class="line">            <span class="comment">//如果次数相同，比较时间大小</span></span><br><span class="line">            <span class="keyword">return</span> value == <span class="number">0</span> ? Long.compare(<span class="keyword">this</span>.lastUpdateTime,o.lastUpdateTime) : value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方案二</strong></p><p>借助<code>TreeSet</code>和<code>HashMap</code>来实现，<code>TreeSet</code>自动排序，删除操作O(1)复杂度；但额外引入了<code>TreeSet</code>，空间复杂度增加，同时每放入一个元素，需要重新排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache1</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,CacheObject&lt;K,V&gt;&gt; cacheMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序Set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeSet&lt;CacheObject&lt;K,V&gt;&gt; treeSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache1</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;(CacheObject&lt;K,V&gt;::compareTo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        CacheObject&lt;K,V&gt; cache = cacheMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(cache == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除该对象</span></span><br><span class="line">        treeSet.remove(cache);</span><br><span class="line">        <span class="comment">//拿到value（同时更新访问次数和时间）</span></span><br><span class="line">        V value = cache.getValue();</span><br><span class="line">        <span class="comment">//添加该对象（treeSet会根据compare进行排序）</span></span><br><span class="line">        treeSet.add(cache);</span><br><span class="line">        cacheMap.put(key,cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CacheObject&lt;K,V&gt; cache = cacheMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(cache == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cacheMap.size() &gt;= capacity)&#123;</span><br><span class="line">                <span class="comment">//treeSet头部元素为最小元素（访问次数较少并且更新时间较早）</span></span><br><span class="line">                <span class="comment">//删除Map和treeSet中此条数据</span></span><br><span class="line">                cacheMap.remove(treeSet.first().getKey());</span><br><span class="line">                treeSet.pollFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            cache = <span class="keyword">new</span> CacheObject&lt;&gt;(key,value);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            treeSet.remove(cache);</span><br><span class="line">            cache.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        treeSet.add(cache);</span><br><span class="line">        cacheMap.put(key,cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObject</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">CacheObject</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最后更新时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> lastUpdateTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 访问次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> accessCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CacheObject</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(CacheObject&lt;K,V&gt; o)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//比较次数大小</span></span><br><span class="line">            <span class="keyword">int</span> value = Integer.compare(<span class="keyword">this</span>.accessCount,o.accessCount);</span><br><span class="line">            <span class="comment">//如果次数相同，比较时间大小</span></span><br><span class="line">            <span class="keyword">return</span> value == <span class="number">0</span> ? Long.compare(<span class="keyword">this</span>.lastUpdateTime,o.lastUpdateTime) : value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            CacheObject&lt;?, ?&gt; that = (CacheObject&lt;?, ?&gt;) o;</span><br><span class="line">            <span class="keyword">return</span> lastUpdateTime == that.lastUpdateTime &amp;&amp;</span><br><span class="line">                    accessCount == that.accessCount &amp;&amp;</span><br><span class="line">                    Objects.equals(key, that.key) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, that.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(key, value, lastUpdateTime, accessCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们提供两种时间复杂度接近O(1)的<strong>LFU</strong>代码示例。</p><p><strong>实现方案三</strong></p><p>借助<code>LinkedHashMap</code>、双向链表、<code>HashMap</code>来实现。</p><p>原理：</p><ol><li>用一个双向链表来保存命中数；</li><li>命中数相同的放在一个双向链表的<code>LinkedHashMap</code>中，主要是利用了它的accessOrder属性来实现根据访问顺序来排序；</li><li><code>HashMap</code>集合来保存所有的元素，因为只要key的hash算法合理的理想情况下，put，get操作是O(1)；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache2</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, CacheObject&lt;K,V&gt;&gt; cacheMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;K&gt; countHead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache2</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;参数错误，容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line"></span><br><span class="line">        cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一个节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;K&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上一个节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;K&gt; prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果访问次数相同，会被存入linkMap中，最先被访问过的放在链表后面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        LinkedHashMap&lt;K,Object&gt; linkMap;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;K&gt; prev, <span class="keyword">int</span> count, Node&lt;K&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObject</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K&gt; node;</span><br><span class="line">        CacheObject(V val, Node&lt;K&gt; node) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = val;</span><br><span class="line">            <span class="keyword">this</span>.node = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容量不足时缓存删除</span></span><br><span class="line">        removeCache(key);</span><br><span class="line">        <span class="comment">// 放入缓存</span></span><br><span class="line">        putVal(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeCache</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果有K,不需要判定容量问题</span></span><br><span class="line">        <span class="keyword">if</span> (cacheMap.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; first;</span><br><span class="line"></span><br><span class="line">        K removeKey = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超过最大缓存容量</span></span><br><span class="line">        <span class="keyword">while</span>(cacheMap.size() &gt;= capacity) &#123;</span><br><span class="line">            <span class="comment">// 第一个节点</span></span><br><span class="line">            <span class="keyword">if</span> ((first=countHead) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 节点元素存在</span></span><br><span class="line">                <span class="keyword">if</span> (first.linkMap != <span class="keyword">null</span> &amp;&amp; !first.linkMap.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 该节点只有一个元素的场合</span></span><br><span class="line">                    <span class="keyword">if</span> (first.linkMap.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                        removeKey = (K) first.linkMap.keySet().toArray()[<span class="number">0</span>];</span><br><span class="line">                        countHead = first.next;</span><br><span class="line">                        countHead.prev = <span class="keyword">null</span>;</span><br><span class="line">                        first = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Iterator&lt;K&gt; iterator = first.linkMap.keySet().iterator();</span><br><span class="line">                        <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">                            removeKey = iterator.next();</span><br><span class="line">                            first.linkMap.remove(removeKey);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cacheMap.remove(removeKey);</span><br><span class="line">                    <span class="comment">// 节点元素不存在</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    countHead = first.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putVal</span><span class="params">(K key, V val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; be = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 新加入缓存的场合</span></span><br><span class="line">        <span class="keyword">if</span> (!cacheMap.containsKey(key)) &#123;</span><br><span class="line"></span><br><span class="line">            LinkedHashMap&lt;K,Object&gt; newLinkMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(capacity, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 有缓存一次的场合</span></span><br><span class="line">            <span class="keyword">if</span> (countHead != <span class="keyword">null</span> &amp;&amp; countHead.count == <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (countHead.linkMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    countHead.linkMap = newLinkMap;</span><br><span class="line">                &#125;</span><br><span class="line">                countHead.linkMap.put(key,PRESENT);</span><br><span class="line">                be = countHead;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K&gt; first = countHead;</span><br><span class="line">                Node&lt;K&gt; node = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="number">1</span>, countHead == <span class="keyword">null</span> ? <span class="keyword">null</span> : first);</span><br><span class="line">                newLinkMap.put(key,PRESENT);</span><br><span class="line">                node.linkMap = newLinkMap;</span><br><span class="line">                be = node;</span><br><span class="line">                <span class="comment">// 缓存不为空，即存在大于1的缓存，把1放在前面</span></span><br><span class="line">                <span class="keyword">if</span> (countHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    first.prev = node;</span><br><span class="line">                &#125;</span><br><span class="line">                countHead = node;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            moveCount(key);</span><br><span class="line">        &#125;</span><br><span class="line">        cacheMap.put(key, <span class="keyword">new</span> CacheObject&lt;&gt;(val, be));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中取得数据，同时随着访问次数的增加，移动元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!cacheMap.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        moveCount(key);</span><br><span class="line">        <span class="keyword">return</span> cacheMap.get(key).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随着访问次数增加来移动元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveCount</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; currentNode = cacheMap.get(key).node;</span><br><span class="line">        currentNode.linkMap.remove(key);</span><br><span class="line">        <span class="keyword">int</span> currentCount = currentNode.count;</span><br><span class="line">        <span class="keyword">int</span> nextCount = currentCount + <span class="number">1</span>;</span><br><span class="line">        LinkedHashMap&lt;K,Object&gt; newLinkMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(capacity, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; after = currentNode.next;</span><br><span class="line">        Node&lt;K&gt; before = currentNode.prev;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.linkMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            currentNode = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            before = currentNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下一个节点没有的场合,新增一个+1的节点放到最后</span></span><br><span class="line">        <span class="keyword">if</span> (after == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K&gt; node = <span class="keyword">new</span> Node&lt;&gt;(before, nextCount, <span class="keyword">null</span>);</span><br><span class="line">            newLinkMap.put(key, PRESENT);</span><br><span class="line">            node.linkMap = newLinkMap;</span><br><span class="line">            cacheMap.get(key).node = node;</span><br><span class="line">            before.next = node;</span><br><span class="line">            <span class="comment">// 下一个正好是+1次数的节点，直接追加</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (after.count == nextCount) &#123;</span><br><span class="line">            after.linkMap.put(key, PRESENT);</span><br><span class="line">            before.next = after;</span><br><span class="line">            after.prev = before;</span><br><span class="line">            cacheMap.get(key).node = after;</span><br><span class="line">            <span class="comment">// 下一个节点的次数&gt;+1次数，新建+1节点，再连接前后节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (after.count &gt; nextCount) &#123;</span><br><span class="line">            Node&lt;K&gt; node = <span class="keyword">new</span> Node&lt;&gt;(before, nextCount, after);</span><br><span class="line">            newLinkMap.put(key, PRESENT);</span><br><span class="line">            node.linkMap = newLinkMap;</span><br><span class="line">            cacheMap.get(key).node = node;</span><br><span class="line">            before.next = node;</span><br><span class="line">            after.prev  = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方案四</strong></p><p>只借助<code>HashMap</code>和双向链表实现O(1)的<strong>LFU</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache3</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, Node&lt;K,V&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, DoubleLinkedList&lt;K,V&gt;&gt; countMap;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小频次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        Node&lt;K,V&gt; prev;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Node(K key, V value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache3</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;参数错误，容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.min = Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handle(node, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键函数，当put/set操作发生后调用此函数，分为新增结点以及对现有结点操作</span></span><br><span class="line"><span class="comment">     * 1、新增结点：直接接到对于频次的双向链表头部</span></span><br><span class="line"><span class="comment">     * 2、已存在结点：从老结点所在频次对应的双向链表中删除此结点后，再将其加入到频次+1对应的双向链表的头部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isNew 是否是新增结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Node&lt;K,V&gt; node, <span class="keyword">boolean</span> isNew)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = node.count;</span><br><span class="line">        <span class="comment">//维护全局最小频次</span></span><br><span class="line">        min = Math.min(count, min);</span><br><span class="line">        <span class="comment">//如果有这个次数的Map</span></span><br><span class="line">        <span class="keyword">if</span> (countMap.containsKey(node.count)) &#123;</span><br><span class="line">            <span class="comment">//拿到旧链表</span></span><br><span class="line">            DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(node.count);</span><br><span class="line">            <span class="keyword">if</span> (!isNew) &#123;</span><br><span class="line">                <span class="comment">//不是新增的话，由于访问次数变化，需要在链表下删除该节点</span></span><br><span class="line">                node.count++;</span><br><span class="line">                oldList.delNode(node);</span><br><span class="line">                <span class="comment">// 如果</span></span><br><span class="line">                <span class="comment">// 1、当前结点不为新增结点</span></span><br><span class="line">                <span class="comment">// 2、当前结点频次==全局最小频次</span></span><br><span class="line">                <span class="comment">// 3、且删除该结点后，对应频次双向链表为空，</span></span><br><span class="line">                <span class="comment">// 则全局最小频次+1</span></span><br><span class="line">                <span class="keyword">if</span> (count == min &amp;&amp; oldList.size == <span class="number">0</span>) &#123;</span><br><span class="line">                    countMap.remove(min);</span><br><span class="line">                    min++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有需要新增一个</span></span><br><span class="line">        <span class="keyword">if</span> (!countMap.containsKey(node.count)) &#123;</span><br><span class="line">            countMap.put(node.count, <span class="keyword">new</span> DoubleLinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        DoubleLinkedList&lt;K,V&gt; newList = countMap.get(node.count);</span><br><span class="line">        newList.addHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V val)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; node;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            node = map.get(key);</span><br><span class="line">            node.value = val;</span><br><span class="line">            handle(node, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = <span class="keyword">new</span> Node&lt;&gt;(key, val);</span><br><span class="line">            <span class="comment">//容量超出，则删除全局最小频次对应双向链表中的尾部结点</span></span><br><span class="line">            <span class="keyword">if</span> (map.size() &gt;= capacity) &#123;</span><br><span class="line">                DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(min);</span><br><span class="line">                Node&lt;K,V&gt; tail = oldList.delTail();</span><br><span class="line">                map.remove(tail.key);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            handle(node, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        Node&lt;K,V&gt; head;</span><br><span class="line">        Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.head.next = tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            node.next = head.next;</span><br><span class="line">            head.next.prev = node;</span><br><span class="line">            node.prev = head;</span><br><span class="line">            head.next = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">delNode</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; prev = node.prev;</span><br><span class="line">            Node&lt;K,V&gt; next = node.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">delTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">this</span>.tail.prev;</span><br><span class="line">            node.prev.next = <span class="keyword">this</span>.tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = node.prev;</span><br><span class="line">            node.prev = <span class="keyword">null</span>;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MRU"><a href="#MRU" class="headerlink" title="MRU"></a>MRU</h2><p><strong>MRU(Most recently used)</strong> 最近最常使用，这种缓存淘汰算法使用的较少，其淘汰最近常用的项目。一般用于处理一个条目越久，越容易被访问的情况。</p><p>核心原理：一条数据很久没有被访问，则它将来被访问的概率可能会很高。</p><p>可以看到它和<strong>LRU</strong>是正好相反的。</p><p>优点：对于一些特定的场景，可能会有很好的效果。<br>缺点：适用范围比较窄。</p><p>其相关代码如下，这儿使用双向链表来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这中方案查询会遍历双向链表，时间复杂度较高，如果实现接近O(1)的<strong>MRU</strong>可以借助<code>HashMap</code>，当然空间复杂度会变高，与<strong>LRU</strong>类似，这儿不再过多介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IMRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列</span></span><br><span class="line">    <span class="keyword">private</span> DoubleWayLinkedList&lt;K,V&gt; linkedList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">//accessOrder为true的话，最近访问的都会在底部，我们达到容量后直接删除底部元素即可</span></span><br><span class="line">        <span class="comment">//由于linkedHashMap不支持public的删除底端元素，因此我们手动写一个双端队列，添加、访问数据后会进行排序，将最新访问的数据移动到尾部</span></span><br><span class="line">        linkedList = <span class="keyword">new</span> DoubleWayLinkedList&lt;&gt;(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedList.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断容量是否达到</span></span><br><span class="line">        <span class="keyword">int</span> size = linkedList.getSize();</span><br><span class="line">        <span class="keyword">if</span>(size &gt;= capacity)&#123;</span><br><span class="line">            <span class="comment">//删除最新元素(尾部为最新元素)</span></span><br><span class="line">            linkedList.delTail();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        linkedList.add(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表，旧的元素在头部，新的元素在尾部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleWayLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> accessOrder;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> K key;</span><br><span class="line">            <span class="keyword">private</span> V value;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; left;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; right;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleWayLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.accessOrder = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleWayLinkedList</span><span class="params">(<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = getNode(key);</span><br><span class="line">            <span class="keyword">if</span>(node ==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(accessOrder)&#123;</span><br><span class="line">                <span class="comment">//排序，将刚访问的放到尾部</span></span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">add</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">            <span class="comment">//先判断元素key存不存在</span></span><br><span class="line">            Node&lt;K,V&gt; node = getNode(key);</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//新增数据直接添加到链表尾部</span></span><br><span class="line">                <span class="keyword">return</span> addTail(key,value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//存在数据的话，直接更新数据，并移动到链表尾部</span></span><br><span class="line">                node.value = value;</span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = head;</span><br><span class="line">            <span class="keyword">while</span> (node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.key.equals(key))&#123;</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">            Node&lt;K,V&gt; last;</span><br><span class="line">            <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = e, b = p.left, a = p.right;</span><br><span class="line">                p.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = a;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    b.right = a;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    a.left = b;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    last = b;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = p;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    p.left = last;</span><br><span class="line">                    last.right = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tail = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> V <span class="title">addHead</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                head.left = node;</span><br><span class="line">                node.right = head;</span><br><span class="line">                head = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> V <span class="title">addTail</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.left = tail;</span><br><span class="line">                tail.right = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">delHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.right;</span><br><span class="line">            <span class="comment">//只有一个节点，此时head.right=null，赋值head=null</span></span><br><span class="line">            <span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">                head.left = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail.left;</span><br><span class="line">            <span class="keyword">if</span> (tail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                tail.right = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h2><p><strong>ARC(Adaptive Replacement Cache)</strong> 自适应缓存替换，这种缓存淘汰策略结合了 <strong>LRU</strong> 和 <strong>LFU</strong> 的特点。</p><p><strong>ARC</strong> 的精髓就是根据被淘汰数据的访问情况，而增加对应 <strong>LRU</strong> 还是 <strong>LFU</strong> 链表的大小。</p><p><strong>ARC</strong> 包含了四个链表。 <strong>LRU</strong> 和 <strong>LRU Ghost</strong> ， <strong>LFU</strong> 和 <strong>LFU Ghost</strong>， <strong>Ghost</strong> 链表为对应淘汰的数据记录链表，不记录数据，只记录 <strong>ID</strong> 等信息。</p><p>当数据 A 加入 <strong>LRU</strong> 后，如果 A 再次被访问，则同时被放到 <strong>LFU</strong> 链表中。所以 <strong>LFU</strong> 链表的缓存为 <strong>LRU</strong> 链表的多次访问的数据。</p><p>当 <strong>LRU</strong> 链表淘汰了 B，那么 B 的信息则进入到 <strong>LRU Ghost</strong> 链表。如果 B 在之后再次被访问，则增加 <strong>LRU</strong> 链表的大小，同时缩减 <strong>LFU</strong> 链表的大小。<strong>LFU</strong> 链表同理。</p><p>所以，这是一个根据最近未使用和最少频率使用动态调整的算法。</p><p>优点：这种算法具有很高的命中率，且可以根据数据使用方式动态调整<strong>LRU</strong>或<strong>LFU</strong>内存大小。</p><p>缺点：实现较复杂，且内存占用较高。</p><p>我们用代码来实现一个<strong>ARC</strong>。</p><p>根据上面的<strong>LRU</strong>和<strong>LFU</strong>代码示例，由于Java自带的<code>LinkedHashMap</code>不能方便的操作内部旧元素。因此对于<strong>ARC</strong>内部使用的<strong>LRU</strong>，我们需要自写一个。而<strong>LFU</strong>可以采用上面的<code>LFUCache3</code>，但仍有一些方法需要补充。</p><p>因此我提供了两个时间复杂度接近O(1)的<strong>LRU</strong>和<strong>LFU</strong>用来实现<strong>ARC</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARC_LRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TLinkedHashMap&lt;K,V&gt; linkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ARC_LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(capacity,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        linkedHashMap.add(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.contains(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        linkedHashMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">removeEldest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.removeEldest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表，旧的元素在头部，新的元素在尾部</span></span><br><span class="line"><span class="comment">     * 由于原来使用Java自带的LinkedHashMap没法方便的操作旧元素，仿照LinkedHashMap自写一个即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TLinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; head;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; tail;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;K,Node&lt;K,V&gt;&gt; hashMap;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> accessOrder;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> K key;</span><br><span class="line">            <span class="keyword">private</span> V value;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; left;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; right;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity,<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(capacity,<span class="number">0.75f</span>,accessOrder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity,<span class="keyword">float</span> loadFactor,<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">            <span class="keyword">this</span>.hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity,loadFactor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = hashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(accessOrder)&#123;</span><br><span class="line">                <span class="comment">//排序，将刚访问的放到尾部</span></span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">add</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">            <span class="comment">//先判断元素key存不存在</span></span><br><span class="line">            Node&lt;K,V&gt; node = hashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">                <span class="comment">//新增数据直接添加到链表尾部</span></span><br><span class="line">                hashMap.put(key,node);</span><br><span class="line">                addTail(node);</span><br><span class="line">                <span class="comment">//判断容量是否超出，超出移除老元素</span></span><br><span class="line">                <span class="keyword">if</span>(size &gt; capacity)&#123;</span><br><span class="line">                    removeEldest();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//存在数据的话，直接更新数据，并移动到链表尾部</span></span><br><span class="line">                node.value = value;</span><br><span class="line">                hashMap.put(key,node);</span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">removeEldest</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = delHead();</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                hashMap.remove(node.key);</span><br><span class="line">                <span class="keyword">return</span> node.key;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 元素被访问，将其移动到链表尾部</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; last;</span><br><span class="line">            <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = e, b = p.left, a = p.right;</span><br><span class="line">                p.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = a;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    b.right = a;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    a.left = b;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    last = b;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = p;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    p.left = last;</span><br><span class="line">                    last.right = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tail = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTail</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.left = tail;</span><br><span class="line">                tail.right = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title">delHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node&lt;K,V&gt; temp = head;</span><br><span class="line">            head = head.right;</span><br><span class="line">            <span class="comment">//只有一个节点，此时head.right=null，赋值head=null</span></span><br><span class="line">            <span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">                head.left = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; prev = node.left;</span><br><span class="line">            Node&lt;K,V&gt; next = node.right;</span><br><span class="line">            <span class="keyword">if</span>(prev != <span class="keyword">null</span>)&#123;</span><br><span class="line">                prev.right = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                next.left = prev;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hashMap.containsKey(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = hashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                delNode(node);</span><br><span class="line">                hashMap.remove(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARC_LFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, Node&lt;K,V&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, DoubleLinkedList&lt;K,V&gt;&gt; countMap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        Node&lt;K,V&gt; prev;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Node(K key, V value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ARC_LFUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;参数错误，容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.min = Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handle(node, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询lfu中是否包含指定key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(countMap.containsKey(node.count))&#123;</span><br><span class="line">            <span class="comment">//拿到双向链表</span></span><br><span class="line">            DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(node.count);</span><br><span class="line">            <span class="comment">//删除</span></span><br><span class="line">            oldList.delNode(node);</span><br><span class="line">            <span class="comment">//判断是否全局最小值</span></span><br><span class="line">            <span class="keyword">if</span>(node.count == min &amp;&amp; oldList.size == <span class="number">0</span>)&#123;</span><br><span class="line">                countMap.remove(min);</span><br><span class="line">                min = countMap.keySet().stream().min(Integer::compareTo).orElse(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">removeEldest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到全局最小频次数据，删除尾节点（时间较旧的数据）</span></span><br><span class="line">        DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(min);</span><br><span class="line">        <span class="keyword">if</span>(oldList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; tail = oldList.delTail();</span><br><span class="line">        K key = tail.key;</span><br><span class="line">        map.remove(key);</span><br><span class="line">        <span class="comment">//删除后，需要判断最小频次是否变化</span></span><br><span class="line">        <span class="keyword">if</span>(tail.count == min &amp;&amp; oldList.size == <span class="number">0</span>)&#123;</span><br><span class="line">            countMap.remove(min);</span><br><span class="line">            min = countMap.keySet().stream().min(Integer::compareTo).orElse(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Node&lt;K,V&gt; node, <span class="keyword">boolean</span> isNew)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = node.count;</span><br><span class="line">        <span class="comment">//维护全局最小频次</span></span><br><span class="line">        min = Math.min(count, min);</span><br><span class="line">        <span class="comment">//如果有这个次数的Map</span></span><br><span class="line">        <span class="keyword">if</span> (countMap.containsKey(node.count)) &#123;</span><br><span class="line">            <span class="comment">//拿到旧链表</span></span><br><span class="line">            DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(node.count);</span><br><span class="line">            <span class="keyword">if</span> (!isNew) &#123;</span><br><span class="line">                <span class="comment">//不是新增的话，由于访问次数变化，需要在链表下删除该节点</span></span><br><span class="line">                node.count++;</span><br><span class="line">                oldList.delNode(node);</span><br><span class="line">                <span class="comment">// 如果</span></span><br><span class="line">                <span class="comment">// 1、当前结点不为新增结点</span></span><br><span class="line">                <span class="comment">// 2、当前结点频次==全局最小频次</span></span><br><span class="line">                <span class="comment">// 3、且删除该结点后，对应频次双向链表为空，</span></span><br><span class="line">                <span class="comment">// 则全局最小频次+1</span></span><br><span class="line">                <span class="keyword">if</span> (count == min &amp;&amp; oldList.size == <span class="number">0</span>) &#123;</span><br><span class="line">                    countMap.remove(min);</span><br><span class="line">                    min++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有需要新增一个</span></span><br><span class="line">        <span class="keyword">if</span> (!countMap.containsKey(node.count)) &#123;</span><br><span class="line">            countMap.put(node.count, <span class="keyword">new</span> DoubleLinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        DoubleLinkedList&lt;K,V&gt; newList = countMap.get(node.count);</span><br><span class="line">        newList.addHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V val)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; node;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            node = map.get(key);</span><br><span class="line">            node.value = val;</span><br><span class="line">            handle(node, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = <span class="keyword">new</span> Node&lt;&gt;(key, val);</span><br><span class="line">            <span class="comment">//容量超出，则删除全局最小频次对应双向链表中的尾部结点</span></span><br><span class="line">            <span class="keyword">if</span> (map.size() &gt;= capacity) &#123;</span><br><span class="line">                DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(min);</span><br><span class="line">                Node&lt;K,V&gt; tail = oldList.delTail();</span><br><span class="line">                map.remove(tail.key);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            handle(node, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        Node&lt;K,V&gt; head;</span><br><span class="line">        Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.head.next = tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            node.next = head.next;</span><br><span class="line">            head.next.prev = node;</span><br><span class="line">            node.prev = head;</span><br><span class="line">            head.next = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">delNode</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; prev = node.prev;</span><br><span class="line">            Node&lt;K,V&gt; next = node.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">delTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">this</span>.tail.prev;</span><br><span class="line">            node.prev.next = <span class="keyword">this</span>.tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = node.prev;</span><br><span class="line">            node.prev = <span class="keyword">null</span>;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用上面的<strong>LRU</strong>和<strong>LFU</strong>来构建<strong>ARC</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IARCCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARCCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IARCCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自适应值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ARC_LRUCache&lt;K,V&gt; lruCache;</span><br><span class="line">    <span class="keyword">private</span> ARC_LRUCache&lt;K,Object&gt; lruCacheGhost;</span><br><span class="line">    <span class="keyword">private</span> ARC_LFUCache&lt;K,V&gt; lfuCache;</span><br><span class="line">    <span class="keyword">private</span> ARC_LFUCache&lt;K,Object&gt; lfuCacheGhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ARCCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LRU和LFU的淘汰我们在当前类进行控制</span></span><br><span class="line">        <span class="comment">//LRU、LFU、LRUGhost、LFUGhost最大只能达到capacity，</span></span><br><span class="line">        <span class="comment">// 我们初始化为capacity+1，这样原来的内部淘汰策略就不会触发（因为淘汰时要加入ghost，我们手动控制）</span></span><br><span class="line">        lruCache = <span class="keyword">new</span> ARC_LRUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        lruCacheGhost = <span class="keyword">new</span> ARC_LRUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        lfuCache = <span class="keyword">new</span> ARC_LFUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        lfuCacheGhost = <span class="keyword">new</span> ARC_LFUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从lru获取数据，如果存在，lru移除并将其放入LFU</span></span><br><span class="line">        V v = lruCache.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            lruCache.remove(key);</span><br><span class="line">            lfuCache.set(key,v);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//尝试从lfu获取数据，存在直接返回数据</span></span><br><span class="line">        v = lfuCache.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//都不存在，直接返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查lru是否有该值，有的话移除并放入lfu</span></span><br><span class="line">        <span class="keyword">if</span>(lruCache.contains(key))&#123;</span><br><span class="line">            lruCache.remove(key);</span><br><span class="line">            lfuCache.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查lfu是否已经有该key</span></span><br><span class="line">        <span class="keyword">if</span>(lfuCache.contains(key))&#123;</span><br><span class="line">            <span class="comment">//存在更新并返回</span></span><br><span class="line">            lfuCache.set(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//都不存在</span></span><br><span class="line">        <span class="comment">//查询lru ghost情况</span></span><br><span class="line">        <span class="keyword">if</span>(lruCacheGhost.contains(key))&#123;</span><br><span class="line">            <span class="comment">//lru过小，需要增大p值</span></span><br><span class="line">            <span class="comment">//根据 lruGhost和lfuGhost比例来计算p值，delta默认1</span></span><br><span class="line">            <span class="comment">//如果 lfuGhost数据量 &gt; lruGhost 数据量，说明lfu淘汰数据数据较快（命中率低），lru淘汰数据较慢（命中率高）</span></span><br><span class="line">            <span class="comment">//此时 delta = lfuGhostSize / lruGhostSize 大于1，也就是快速增大lru，以适应当前数据情况</span></span><br><span class="line">            <span class="keyword">int</span> delta = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> lruGhostSize = lruCacheGhost.size();</span><br><span class="line">            <span class="keyword">int</span> lfuGhostSize = lfuCacheGhost.size();</span><br><span class="line">            <span class="keyword">if</span>(lfuGhostSize &gt; lruGhostSize)&#123;</span><br><span class="line">                delta = lfuGhostSize / lruGhostSize;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p+delta &gt;= capacity)&#123;</span><br><span class="line">                p = capacity;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p += delta;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//lru和lfu容量不能超出范围</span></span><br><span class="line">            <span class="keyword">if</span>(lruCache.size() + lfuCache.size() &gt;= capacity)&#123;</span><br><span class="line">                <span class="comment">//超出之后需要根据p值对lru和lfu进行调整</span></span><br><span class="line">                replace(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在lruGhost中删除</span></span><br><span class="line">            lruCacheGhost.remove(key);</span><br><span class="line">            <span class="comment">//将数据放入lfu</span></span><br><span class="line">            lfuCache.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果在lfuGhost中</span></span><br><span class="line">        <span class="keyword">if</span>(lfuCacheGhost.contains(key))&#123;</span><br><span class="line">            <span class="comment">//lfu 过小，需要减小p值</span></span><br><span class="line">            <span class="comment">//根据lruGhost和lfuGhost来计算p值，delta默认1</span></span><br><span class="line">            <span class="comment">//如果lruGhost数据量 &gt; lfuGhost数据量，说明lru淘汰数据比较快（命中率低），lfu淘汰数据慢（命中率高）</span></span><br><span class="line">            <span class="comment">//此时 delta = lruGhostSize / lfuGhostSize 大于1，也就是快速增大lfu，以适应当前情况</span></span><br><span class="line">            <span class="keyword">int</span> delta = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> lruGhostSize = lruCacheGhost.size();</span><br><span class="line">            <span class="keyword">int</span> lfuGhostSize = lfuCacheGhost.size();</span><br><span class="line">            <span class="keyword">if</span>(lruGhostSize &gt; lfuGhostSize)&#123;</span><br><span class="line">                delta = lruGhostSize / lfuGhostSize;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(delta &gt;= p)&#123;</span><br><span class="line">                p = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p -= delta;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//lru和lfu容量不能超出范围</span></span><br><span class="line">            <span class="keyword">if</span>(lruCache.size() + lfuCache.size() &gt;= capacity)&#123;</span><br><span class="line">                <span class="comment">//超出之后需要根据p值对lru和lfu进行调整</span></span><br><span class="line">                replace(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在lfuGhost中删除</span></span><br><span class="line">            lfuCacheGhost.remove(key);</span><br><span class="line">            <span class="comment">//添加至lfu</span></span><br><span class="line">            lfuCache.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lru和lfu总容量不能超过capacity</span></span><br><span class="line">        <span class="keyword">if</span>(lruCache.size() + lfuCache.size() &gt;= capacity)&#123;</span><br><span class="line">            replace(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lruGhost 容量不能超过 capacity - p</span></span><br><span class="line">        <span class="keyword">if</span>(lruCacheGhost.size() &gt; capacity - p)&#123;</span><br><span class="line">            lruCacheGhost.removeEldest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lfuGhost容量不能超过 p</span></span><br><span class="line">        <span class="keyword">if</span>(lfuCacheGhost.size() &gt; p)&#123;</span><br><span class="line">            lfuCacheGhost.removeEldest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到lru</span></span><br><span class="line">        lruCache.set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于根据P的当前学习值自适应地从lru或lfu中淘汰数据,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lfuGhostContainsKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replace</span><span class="params">(<span class="keyword">boolean</span> lfuGhostContainsKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lruSize = lruCache.size();</span><br><span class="line">        <span class="keyword">if</span>(lruSize &gt; <span class="number">0</span> &amp;&amp; (lruSize &gt; p || (lruSize == p &amp;&amp; lfuGhostContainsKey)))&#123;</span><br><span class="line">            <span class="comment">//lru移除旧元素</span></span><br><span class="line">            K key = lruCache.removeEldest();</span><br><span class="line">            <span class="keyword">if</span>(key != <span class="keyword">null</span>)&#123;</span><br><span class="line">                lruCacheGhost.set(key,PRESENT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//lfu移除旧元素</span></span><br><span class="line">            K key = lfuCache.removeEldest();</span><br><span class="line">            <span class="keyword">if</span>(key != <span class="keyword">null</span>)&#123;</span><br><span class="line">                lfuCacheGhost.set(key,PRESENT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章我们了解了一些常见的缓存淘汰算法，对其工作原理也有了简单认知，其实每一种算法都有自己的特色，但是真正在使用过程中，或多或少都会进行对应的优化。比如 <strong>Redis</strong> 会同时使用 <strong>LRU</strong> 和 <strong>LFU</strong> ，同时 <strong>LFU</strong> 为了体现时间维度特征而会主动将计数器减少等策略。</p><p>有兴趣的同学可以看下这篇关于<strong>Redis</strong>淘汰策略的文章 <a href="https://www.sakuratears.top/blog/Redis%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5.html">Redis淘汰策略</a> 。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一般情况下，我们读取数据，无论从数据库还是磁盘，都是比较慢的，要加快数据读取可以使用缓存，将数据缓存下来。例如比较有名的工具&lt;strong&gt;Redis&lt;/strong&gt;等。&lt;/p&gt;
&lt;p&gt;无论如何缓存数据，随着数据量增大，内存容量是有一定限制的，因此我们只能缓存定量的数据。&lt;/p&gt;
&lt;p&gt;对于我们来说，肯定要缓存经常使用或者未来很大概率被使用的数据，这样才有利于我们的业务。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="缓存淘汰算法" scheme="https://www.sakuratears.top/tags/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表相关经典问题</title>
    <link href="https://www.sakuratears.top/blog/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html"/>
    <id>https://www.sakuratears.top/blog/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html</id>
    <published>2021-03-21T10:59:00.000Z</published>
    <updated>2021-03-21T11:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链表实际上是线性表的链式存储结构，与数组不同的是，它是用一组任意的存储单元来存储线性表中的数据，存储单元不一定是连续的，且链表的长度不是固定的，链表数据的这一特点使其可以非常的方便地实现节点的插入和删除操作。</p><p>链表的每个元素称为一个节点，每个节点都可以存储在内存中的不同的位置，为了表示每个元素与后继元素的逻辑关系，以便构成“一个节点链着一个节点”的链式存储结构，除了存储元素本身的信息外，还要存储其直接后继信息。</p><p>因此，每个节点都包含两个部分，第一部分称为链表的数据区域，用于存储元素本身的数据信息，可以用data表示，它不局限于一个成员数据，也可是多个成员数据，第二部分是一个结构体指针，称为链表的指针域，用于存储其直接后继的节点信息，可以用next表示，next的值实际上就是下一个节点的地址，当前节点为末节点时，next的值设为空指针。</p><p>链表代码可以用下述代码表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我们来看一下关于链表的一些经典问题。</p><ol><li>如何判断一个链表是否有环？如果有环，如何找到环入口节点？</li><li>如何判断两个链表是否相交？</li></ol><p>对于上述问题，我们分别来看一下。</p><h2 id="是否环链表"><a href="#是否环链表" class="headerlink" title="是否环链表"></a>是否环链表</h2><p>对于第一个问题，我们可以采用“快慢指针”的方法来解决。如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-678.jpg" alt="upload successful"></p><p>思路：（结论1）设置快慢指针，都从链表头出发，快指针每次走两步，慢指针一次走一步，假如有环，一定相遇于环中某点。</p><pre><code> （结论2）接着让两个指针分别从相遇点和链表头出发，两者都改为每次走一步，最终相遇于环入口。</code></pre><p>我们来看下这两个结论。</p><p>结论1：设置快慢指针fast和slow，fast每次走两步，low每次走一步。假如有环，两者一定在环中相遇。（因为low指针一旦进环，可以看作是fast指针在追slow指针，因为fast指针每次走两步，slow指针每次走一步，所以最后一定能相遇）。</p><p>结论2：我们看上面的简化图，链表头a到链表环入口节点b的距离定义为l，环入口b到相遇点p的距离（右边）定义为m，相遇点p到环入口b的距离（左边）定义为n。</p><p>当快指针和慢指针相遇时：</p><p>快指针路程 = l+(m+n)k+m，k&gt;=1，其中m+n为环的长度，k为环的圈数（k&gt;=1，即最少一圈，不能是0圈，不然快慢指针走的路程一样，矛盾）。</p><p>慢指针路程 = l+m。</p><p>因为快指针的路程是慢指针的路程的两倍，所以：(l+m)*2 = l+(m+n)k+m，其中k&gt;=1。</p><p>化简得到 l =(k-1)(m+n)+n</p><p>这个式子的意思是：<strong>链表头到环入口的距离=相遇点到环入口的距离+(k-1)圈数环长度。其中k&gt;=1，所以k-1&gt;=0圈。</strong>  所以两个指针分别从链表头和相遇点出发，最后一定相遇于环入口。</p><p>根据上面内容，可以写出判断是否为环链表的代码及找到环入口节点的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 链表节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 是否环链表</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">    Node fast = head;</span><br><span class="line">    Node slow = head;</span><br><span class="line">    <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取环链表入口节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getLoopStartNode</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快慢指针</span></span><br><span class="line">    Node fast = head;</span><br><span class="line">    Node slow = head;</span><br><span class="line">    <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="comment">//相遇退出，此时快慢指针位置为相遇点</span></span><br><span class="line">        <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有环，return null</span></span><br><span class="line">    <span class="keyword">if</span> (fast==<span class="keyword">null</span> || fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="comment">//如果有环，两个指针分别从链表头和相遇点出发，最终必定在环入口相遇</span></span><br><span class="line">    <span class="keyword">while</span> (slow!=fast)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实获取环链表入口节点返回null，也代表该链表不是环链表。</p><p>我们再来看下第二个问题，如何判断两个链表是否相交。</p><p>两个链表一般有这三种情况：两个无环链表、两个有环链表、一个有环链表和一个无环链表。</p><p>对于上面三种情况，我们分别来看下：</p><h2 id="两个无环链表相交问题"><a href="#两个无环链表相交问题" class="headerlink" title="两个无环链表相交问题"></a>两个无环链表相交问题</h2><p>两个无环链表A、B如果相交，则在相交点及之后的节点必然相同。如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-679.jpg" alt="upload successful"></p><p>这非常容易理解，当A、B链表相交后，相交节点如果为PNode，则下一个节点 PNode.next 即是A的节点，也是B的节点。</p><p>因为从相交点往后两链表都是相同的，我们往前移动一定位置，较短的链表会到链表头。</p><p>因此我们以A、B当中较短的链表长度为准，从该位置遍历比较两个链表节点，如果节点相同，则说明A、B相交。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断两个无环链表是否相交</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">noLoopNodeIsIntersect</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node1==<span class="keyword">null</span>||node2==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node temp1 = node1;</span><br><span class="line">    Node temp2 = node2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PS：两个链表相交，相交点及之后的节点会完全一致</span></span><br><span class="line">    <span class="comment">//1.拿到两链表长度</span></span><br><span class="line">    <span class="keyword">int</span> size1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        size1++;</span><br><span class="line">        temp1 = temp1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (temp2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        size2++;</span><br><span class="line">        temp2 = temp2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.对于较长的链表，遍历到与短链表相同长度</span></span><br><span class="line">    <span class="keyword">if</span>(size1 &gt; size2)&#123;</span><br><span class="line">        <span class="keyword">int</span> p1 = size1 -size2;</span><br><span class="line">        <span class="keyword">while</span> (p1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node1 = node1.next;</span><br><span class="line">            p1--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p2 = size2 -size1;</span><br><span class="line">        <span class="keyword">while</span> (p2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node2 = node2.next;</span><br><span class="line">            p2--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.此时两个链表位置相同，同时向下遍历，如果有相同节点，说明相交</span></span><br><span class="line">    <span class="keyword">while</span> (node1!=node2)&#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        node2 = node2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到相交点，返回成功</span></span><br><span class="line">    <span class="keyword">if</span>(node1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历到最后仍没有相交点，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个有环链表相交问题"><a href="#两个有环链表相交问题" class="headerlink" title="两个有环链表相交问题"></a>两个有环链表相交问题</h2><p>如果两个有环链表相交，则相交部分一定包含整个环。如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-680.jpg" alt="upload successful"></p><p>一般有一个环入口节点和两个环入口节点两种情况。</p><p>因此我们可以先求两个环链表的入口节点，见上面代码。</p><ol><li>如果入口节点是同一个的话，把相同的入口节点当作是尾节点，这个问题就退化成<strong>两个链表都无环</strong>，直接判断是否相交即可。</li><li>如果入口节点不是同一个的话，从第一个入口节点开始next下去，如果遇到第二个入口节点返回true即可；如果回到了本身的入口节点则表示没有相交，直接返回false。</li></ol><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断两个环链表是否相交</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head1 环链表1 头</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loop1 环链表1 环入口节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head2 环链表2 头</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loop2 环链表2 环入口节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">bothLoopNodeIsIntersect</span><span class="params">(Node head1, Node loop1, Node head2, Node loop2)</span></span>&#123;</span><br><span class="line">    Node cur1 = <span class="keyword">null</span>;</span><br><span class="line">    Node cur2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//如果两个链表的环入口节点是同一个</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">        cur1 = head1;</span><br><span class="line">        cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//判断链表1和链表2谁到入口节点的长度长</span></span><br><span class="line">        <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">            n--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//长的标记为cur1</span></span><br><span class="line">        cur1 = n &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        n = Math.abs(n);</span><br><span class="line">        <span class="comment">//遍历长链表直到位置和短链表头位置相等</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            n--;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两个链表长度相等开始遍历，直到相等时退出</span></span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到相交点，返回成功，否则返回失败</span></span><br><span class="line">        <span class="keyword">if</span>(cur1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//环入口不是同一个，开始以环入口1为起点遍历环</span></span><br><span class="line">        cur1 = loop1.next;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">            <span class="comment">//如果在环上找到了环入口2，说明就是一个环</span></span><br><span class="line">            <span class="keyword">if</span> (cur1 == loop2) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没找到环入口2，说明不是一个环，两个环链表也不可能相交</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个有环链表和一个无环链表相交问题"><a href="#一个有环链表和一个无环链表相交问题" class="headerlink" title="一个有环链表和一个无环链表相交问题"></a>一个有环链表和一个无环链表相交问题</h2><p><strong>一个有环链表和一个无环链表是不可能相交的。</strong></p><p>我们来简单分析下，如图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-681.jpg" alt="upload successful"></p><p>我们假设有环链表A和无环链表B相交于环链表A非环部分的A点（虚线a表示），可以看到，对于非环链表B，当遍历到相交点时，还是可以继续next的，最后B也成为了环链表，这与B是非环链表矛盾。</p><p>假设它们相交于环链表A的环部分B点（虚线b表示），同理，对于非环链表B，当遍历到相交点时，还是可以继续next的，最后B也成为了环链表，这与B是非环链表矛盾。</p><p>这两种情况都是上面所述的两个环链表相交。</p><p>因此一个有环链表和一个无环链表是不可能相交的。</p><h2 id="相交问题总结"><a href="#相交问题总结" class="headerlink" title="相交问题总结"></a>相交问题总结</h2><p>根据上面的代码及分析，判断链表是否相交的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断两个链表是否相交</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">nodeIsIntersect</span><span class="params">(Node head1,Node head2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head1==<span class="keyword">null</span> || head2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拿到环入口节点</span></span><br><span class="line">    Node loop1 = getLoopStartNode(head1);</span><br><span class="line">    Node loop2 = getLoopStartNode(head2);</span><br><span class="line">    <span class="comment">//两链表都为无环链表</span></span><br><span class="line">    <span class="keyword">if</span>(loop1==<span class="keyword">null</span>&amp;&amp;loop2==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> noLoopNodeIsIntersect(head1,head2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两链表都为有环链表</span></span><br><span class="line">    <span class="keyword">if</span>(loop1!=<span class="keyword">null</span> &amp;&amp; loop2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> bothLoopNodeIsIntersect(head1,loop1,head2,loop2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个有环一个无环直接返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否环链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        Node fast = head;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取环链表入口节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getLoopStartNode</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="comment">//快慢指针</span></span><br><span class="line">        Node fast = head;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="comment">//相遇退出，此时快慢指针位置为相遇点</span></span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有环，return null</span></span><br><span class="line">        <span class="keyword">if</span> (fast==<span class="keyword">null</span> || fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="comment">//如果有环，两个指针分别从链表头和相遇点出发，最终必定在环入口相遇</span></span><br><span class="line">        <span class="keyword">while</span> (slow!=fast)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个无环链表是否相交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">noLoopNodeIsIntersect</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node1==<span class="keyword">null</span>||node2==<span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node temp1 = node1;</span><br><span class="line">        Node temp2 = node2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PS：两个链表相交，相交点及之后的节点会完全一致</span></span><br><span class="line">        <span class="comment">//1.拿到两链表长度</span></span><br><span class="line">        <span class="keyword">int</span> size1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            size1++;</span><br><span class="line">            temp1 = temp1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (temp2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            size2++;</span><br><span class="line">            temp2 = temp2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.对于较长的链表，遍历到与短链表相同长度</span></span><br><span class="line">        <span class="keyword">if</span>(size1 &gt; size2)&#123;</span><br><span class="line">            <span class="keyword">int</span> p1 = size1 -size2;</span><br><span class="line">            <span class="keyword">while</span> (p1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                node1 = node1.next;</span><br><span class="line">                p1--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> p2 = size2 -size1;</span><br><span class="line">            <span class="keyword">while</span> (p2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                node2 = node2.next;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.此时两个链表位置相同，同时向下遍历，如果有相同节点，说明相交</span></span><br><span class="line">        <span class="keyword">while</span> (node1!=node2)&#123;</span><br><span class="line">            node1 = node1.next;</span><br><span class="line">            node2 = node2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到相交点，返回成功</span></span><br><span class="line">        <span class="keyword">if</span>(node1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历到最后仍没有相交点，返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个环链表是否相交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 环链表1 头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loop1 环链表1 环入口节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 环链表2 头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loop2 环链表2 环入口节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">bothLoopNodeIsIntersect</span><span class="params">(Node head1, Node loop1, Node head2, Node loop2)</span></span>&#123;</span><br><span class="line">        Node cur1 = <span class="keyword">null</span>;</span><br><span class="line">        Node cur2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果两个链表的环入口节点是同一个</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">            cur1 = head1;</span><br><span class="line">            cur2 = head2;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//判断链表1和链表2谁到入口节点的长度长</span></span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                n++;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">                n--;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//长的标记为cur1</span></span><br><span class="line">            cur1 = n &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">            cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">            n = Math.abs(n);</span><br><span class="line">            <span class="comment">//遍历长链表直到位置和短链表头位置相等</span></span><br><span class="line">            <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                n--;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//两个链表长度相等开始遍历，直到相等时退出</span></span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到相交点，返回成功，否则返回失败</span></span><br><span class="line">            <span class="keyword">if</span>(cur1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//环入口不是同一个，开始以环入口1为起点遍历环</span></span><br><span class="line">            cur1 = loop1.next;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                <span class="comment">//如果在环上找到了环入口2，说明就是一个环</span></span><br><span class="line">                <span class="keyword">if</span> (cur1 == loop2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没找到环入口2，说明不是一个环，两个环链表也不可能相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个链表是否相交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">nodeIsIntersect</span><span class="params">(Node head1,Node head2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head1==<span class="keyword">null</span> || head2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拿到环入口节点</span></span><br><span class="line">        Node loop1 = getLoopStartNode(head1);</span><br><span class="line">        Node loop2 = getLoopStartNode(head2);</span><br><span class="line">        <span class="comment">//两链表都为无环链表</span></span><br><span class="line">        <span class="keyword">if</span>(loop1==<span class="keyword">null</span>&amp;&amp;loop2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> noLoopNodeIsIntersect(head1,head2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两链表都为有环链表</span></span><br><span class="line">        <span class="keyword">if</span>(loop1!=<span class="keyword">null</span> &amp;&amp; loop2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> bothLoopNodeIsIntersect(head1,loop1,head2,loop2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一个有环一个无环直接返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们通过对链表的一些经典问题进行分析，加深了我们对于链表的一些理解。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;链表实际上是线性表的链式存储结构，与数组不同的是，它是用一组任意的存储单元来存储线性表中的数据，存储单元不一定是连续的，且链表的长度不是固定的，链表数据的这一特点使其可以非常的方便地实现节点的插入和删除操作。&lt;/p&gt;
&lt;p&gt;链表的每个元素称为一个节点，每个节点都可以存储在内存中的不同的位置，为了表示每个元素与后继元素的逻辑关系，以便构成“一个节点链着一个节点”的链式存储结构，除了存储元素本身的信息外，还要存储其直接后继信息。&lt;/p&gt;
&lt;p&gt;因此，每个节点都包含两个部分，第一部分称为链表的数据区域，用于存储元素本身的数据信息，可以用data表示，它不局限于一个成员数据，也可是多个成员数据，第二部分是一个结构体指针，称为链表的指针域，用于存储其直接后继的节点信息，可以用next表示，next的值实际上就是下一个节点的地址，当前节点为末节点时，next的值设为空指针。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="链表" scheme="https://www.sakuratears.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
