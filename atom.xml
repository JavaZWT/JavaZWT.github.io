<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SakuraTears的博客</title>
  
  <subtitle>越努力越幸运</subtitle>
  <link href="https://www.sakuratears.top/atom.xml" rel="self"/>
  
  <link href="https://www.sakuratears.top/"/>
  <updated>2021-06-03T14:03:32.344Z</updated>
  <id>https://www.sakuratears.top/</id>
  
  <author>
    <name>SakuraTears</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch学习笔记（3）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89.html</id>
    <published>2021-06-03T13:56:00.000Z</published>
    <updated>2021-06-03T14:03:32.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章我们介绍了Elasticsearch的一些核心概念，本篇文章我们来看下Elasticsearch的分词器。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Elasticsearch分词器介绍"><a href="#Elasticsearch分词器介绍" class="headerlink" title="Elasticsearch分词器介绍"></a>Elasticsearch分词器介绍</h2><h3 id="内置分词器"><a href="#内置分词器" class="headerlink" title="内置分词器"></a>内置分词器</h3><p>Elasticsearch 核心功能就是数据检索，首先通过索引将文档写入es。查询分析则主要分为两个步骤：</p><ol><li>词条化：分词器将输入的文本转为一个个的词条流。</li><li>过滤：比如停用词过滤器会从词条中除去不相干的词条；另外还有同义词过滤器，小写过滤器等。</li></ol><p>Elasticsearch中内置了多种分词器可以供使用。</p><p>内置分词器：</p><table><thead><tr><th>分词器</th><th>作用</th></tr></thead><tbody><tr><td>Standard Analyzer</td><td>标准分词器，适用于英语等</td></tr><tr><td>Simple Analyzer</td><td>简单分词器，基于非字母字符进行分词，单词会被转为小写字母</td></tr><tr><td>Whitespace Analyzer</td><td>空格分词器，按照空格进行切分</td></tr><tr><td>Stop Analyzer</td><td>停用词分词器，类似于简单分词器，但是增加了停用词的功能</td></tr><tr><td>Keyword Analyzer</td><td>关键词分词器，输入文本等于输出文本（不分词）</td></tr><tr><td>Pattern Analyzer</td><td>利用正则表达式对文本进行切分的分词器，支持停用词</td></tr><tr><td>Language Analyzer</td><td>针对特定语言的分词器</td></tr><tr><td>Fingerprint Analyzer</td><td>指纹分析仪分词器，通过创建标记进行重复检测</td></tr></tbody></table><h3 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h3><p>在 ES 中，使用比较多的中文分词器是 elasticsearch-analysis-ik，这个是es的一个第三方插件，代码托管在 GitHub上：</p><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>它提供了两种使用方式：</p><p>第一种：</p><ol><li>首先打开上述中文分词器地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li><li>在 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 页面找到最新的正式版，下载下来。</li><li>将下载文件解压。</li><li>在 es/plugins 目录下，新建ik目录，并将解压后的所有文件拷贝进去。</li><li>重启 es 服务。</li></ol><p>第二种：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br></pre></td></tr></table></figure><p>PS：</p><p>需要注意ES版本：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-722.png"></p><p>推荐第一种安装方式，我们可以方便的找到配置文件更改配置。</p><p>我们如果不下载安装包的话也可以自己编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/medcl/elasticsearch-analysis-ik</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-analysis-ik</span><br><span class="line">git checkout tags/&#123;version&#125;</span><br><span class="line">mvn clean</span><br><span class="line">mvn compile</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>需要注意版本。</p><p>Elasticsearch启动时会提示加载我们插件：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-723.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我们创建一个索引来测试一下：</p><p>这儿先使用Postman来测试一下，使用PUT请求创建TEST索引。</p><p>PUT <a href="http://localhost:9200/test">http://localhost:9200/test</a></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-724.png"></p><p>在该索引中进行分词测试：</p><p>POST <a href="http://localhost:9200/test/_analyze">http://localhost:9200/test/_analyze</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line"><span class="attr">&quot;text&quot;</span>:<span class="string">&quot;美国留给伊拉克的是个烂摊子吗&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-725.png"></p><p>两种分词模式 <code>ik_max_word</code> 和 <code>ik_smart</code>， <code>ik_max_word</code> 的分词更细致。</p><p>如果我们对 累觉不爱 进行分析呢？</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-726.png"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-727.png"></p><p>可以看到哪种分法都不太符合我们的期望，我们想把 累觉不爱 看做一个词，该如何处理呢。</p><p>这就需要自定义扩展词库。</p><h4 id="自定义扩展词库"><a href="#自定义扩展词库" class="headerlink" title="自定义扩展词库"></a>自定义扩展词库</h4><h5 id="本地自定义"><a href="#本地自定义" class="headerlink" title="本地自定义"></a>本地自定义</h5><p>在 plugins/ik/config 目录下，新建 ext.dic 文件（文件名任意），在该文件中可以配置自定义词库。</p><p>在新建文件里添上我们的 累觉不爱 。（如果有多个词，换行写入即可）</p><p>同时打开该目录下的 IKAnalyzer.cfg.xml 文件，如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">properties</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启ES。</p><p>我们再用分词测试，可以看到两种分词模式都能得到我们想要的结果。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-728.png"></p><h5 id="远程词库"><a href="#远程词库" class="headerlink" title="远程词库"></a>远程词库</h5><p>也可以配置远程词库，远程词库支持热更新（不用重启ES）。</p><p>热更新只需要提供一个接口，接口返回扩展词即可。</p><p>具体使用方式如下，新建一个 SpringBoot 项目，引入 Web 依赖即可，然后在 resource/static 文件夹下新建 ext.dic ，写入扩展词。</p><p>接下来在IKAnalyzer.cfg.xml 文件里配置远程扩展接口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://localhost:8080/ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>热更新，主要是响应头的 <code>Last_Modified</code> 或者 <code>ETag</code> 字段发生变化， ik 就会自动重新加载远程依赖扩展词典。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文介绍了Elasticsearch 分词器，以及如何使用中文分词器，以及分词器的词库配置。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上一篇文章我们介绍了Elasticsearch的一些核心概念，本篇文章我们来看下Elasticsearch的分词器。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;Elasticsearch分词器介绍&quot;&gt;&lt;a href=&quot;#Elasticsearch分词器介绍&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch分词器介绍&quot;&gt;&lt;/a&gt;Elasticsearch分词器介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch学习笔记（2）</title>
    <link href="https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89.html</id>
    <published>2021-06-03T13:54:00.000Z</published>
    <updated>2021-06-03T13:55:13.840Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们介绍了 Elasticsearch的一些特点及安装，这篇文章我们来看下 Elasticsearch的核心概念。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Elasticsearch核心概念介绍"><a href="#Elasticsearch核心概念介绍" class="headerlink" title="Elasticsearch核心概念介绍"></a>Elasticsearch核心概念介绍</h2><h3 id="Elasticsearch十大核心概念"><a href="#Elasticsearch十大核心概念" class="headerlink" title="Elasticsearch十大核心概念"></a>Elasticsearch十大核心概念</h3><h4 id="集群（cluster）"><a href="#集群（cluster）" class="headerlink" title="集群（cluster）"></a>集群（cluster）</h4><p>一个或者多个安装了 es 节点的服务器组织在一起，就是集群，这些节点共同持有数据，共同提供搜索服务。</p><p>一个集群有一个名字，这个名字是集群的唯一标识，该名字称为 cluster name ，默认的集群名称是 elasticsearch，具有相同名称的节点才会组成一个集群。</p><p>可以在 config/elasticsearch.yml 文件中配置集群名称：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br></pre></td></tr></table></figure><p>在集群中，节点的状态有三种：<font color="green">绿色</font>、<font color="yellow">黄色</font>、<font color="red">红色</font>。</p><ul><li><font color="green">绿色</font>：节点运行状态为健康状态。所有的主分片（primary shards）、副本分片（replica shards）都可以正常工作。</li><li><font color="yellow">黄色</font>：表示节点的运行状态为警告状态。所有的主分片都正常，至少有一个副本分片不能正常工作。</li><li><font color="red">红色</font>：表示集群无法正常工作。表示至少有一个主分片及其全部副本分片不能正常工作，部分数据丢失。</li></ul><h4 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h4><p>集群中的一个服务器就是一个节点，节点中会存储数据，同时参与集群的索引以及搜索功能，一个节点想要加入一个集群，只需要配置一下集群名称即可。默认情况下，如果我们启动了多个节点，多个节点还能够互相发现彼此，那么它们会自动组成一个集群，这是 es 默认提供的，但是这种方式并不可靠，有可能会发生脑裂现象。所以在实际使用中，建议一定要手动配置一下集群信息。</p><h4 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h4><p>索引可以从两方面来理解：</p><p><strong>名词</strong></p><p>具有相似特征文档的集合。</p><p><strong>动词</strong></p><p>索引数据以及对数据进行索引操作。</p><h4 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h4><p>类型是索引上的分类或分区。在 Elasticsearch 6.0 之前，一个索引中可以有多个类型，从 Elasticsearch 7.0 开始，一个索引中只能有一个类型。在 Elasticsearch 6.x 版本中，依然保持兼容，依然支持单 index 多个 type 结构，但是已经不建议这么使用。</p><h4 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h4><p>一个可以被索引的单元，例如一个用户的文档，一个产品的文档等等。文档都是 JSON 格式的。</p><h4 id="分片（Shards）"><a href="#分片（Shards）" class="headerlink" title="分片（Shards）"></a>分片（Shards）</h4><p>索引都是存储在节点上的，但是受限于节点的空间大小以及数据处理能力，单个节点的处理效果可能不理想，此时我们可以对索引进行分片。当我们创建一个索引的时候，就需要指定分片的数量。每个分片本身也是一个功能完善并且独立的索引。</p><p>默认情况下，一个索引会自动创建 5 个分片，并且为每一个分片创建一个副本。</p><h4 id="副本（Replicas）"><a href="#副本（Replicas）" class="headerlink" title="副本（Replicas）"></a>副本（Replicas）</h4><p>副本也就是备份，是对主分片的一个备份。</p><p>主分片和副本都可以对外提供查询服务。当数据写入时，会先从主分片上完成数据索引，再分发到副本分片上。</p><p>当主分片不可用时，会从副本分片中选择一个成为主分片。</p><p>主分片和对应的副本分片是不会在同一个节点上的，所以副本分片数的最大值是 n -1（其中n为节点数）。</p><h4 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h4><p>集群中对索引的定义信息，例如索引的分片数、副本数等等。</p><h4 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h4><p>Mapping 保存了定义索引字段的存储类型、分词方式、是否存储等信息。</p><h4 id="Analyzer"><a href="#Analyzer" class="headerlink" title="Analyzer"></a>Analyzer</h4><p>字段分词方式的定义。</p><h3 id="Elasticsearch-VS-关系型数据库"><a href="#Elasticsearch-VS-关系型数据库" class="headerlink" title="Elasticsearch VS 关系型数据库"></a>Elasticsearch VS 关系型数据库</h3><p>PS：本表只是类似比较，可以按照关系型数据库的类型理解 ES 里的概念。</p><table><thead><tr><th>关系型数据库</th><th>ElasticSearch</th></tr></thead><tbody><tr><td>数据库</td><td>索引</td></tr><tr><td>表</td><td>类型</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表结构</td><td>映射（Mapping）</td></tr><tr><td>SQL</td><td>DSL（Domain Specific Language）</td></tr><tr><td>select * from xxx</td><td>GET http://</td></tr><tr><td>update xxx set xxx=xxx</td><td>PUT http://</td></tr><tr><td>delete xxx</td><td>DELETE http://</td></tr><tr><td>索引</td><td>全文索引</td></tr></tbody></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本篇文章我们简单介绍了Elasticsearch的一些概念，理解这些概念，这对我们后面的学习是有帮助的。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面我们介绍了 Elasticsearch的一些特点及安装，这篇文章我们来看下 Elasticsearch的核心概念。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;Elasticsearch核心概念介绍&quot;&gt;&lt;a href=&quot;#Elasticsearch核心概念介绍&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch核心概念介绍&quot;&gt;&lt;/a&gt;Elasticsearch核心概念介绍&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch学习笔记（1）</title>
    <link href="https://www.sakuratears.top/blog/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89.html</id>
    <published>2021-06-03T13:44:00.000Z</published>
    <updated>2021-06-03T13:53:40.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久就打算学习 Elasticsearch 的一些知识了，看了许多资料，把学习过程中的想法和笔记记录下来。</p><p>好了，废话不多说，我们开始吧。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Elasticsearch简介"><a href="#Elasticsearch简介" class="headerlink" title="Elasticsearch简介"></a>Elasticsearch简介</h2><p>要了解 Elasticsearch，就不得不提到 Lucene。它是 Elasticsearch 底层使用的全文检索工具。</p><h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><p>Lucene 是一个开源、免费、高性能、纯 Java 编写的全文检索工具包，它是开源领域一款非常好的检索工具包。</p><p>早在2005年，Lucene 就成为了 Apache 顶级的开源项目，它的作者是 Doug Cutting，他的另外一个作品就是大名鼎鼎的 Hadoop。</p><p>需要注意的是 Lucene 只是一个全文检索工具包，并非一个完整的搜索引擎。开发者可以基于 Lucene 开发出自己的搜索引擎，比较著名的、现成解决方案比如 Solr。</p><p>当然，在目前分布式和大数据环境下，Elasticsearch 更胜一筹。</p><p>Lucene 主要有以下特点：</p><ul><li>使用简单</li><li>跨语言</li><li>强大的搜索引擎</li><li>索引速度快</li><li>索引文件兼容不同的平台</li></ul><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>Elasticsearch 是一个分布式、可扩展、近实时性的高性能搜索引擎与数据分析引擎。</p><p>Elasticsearch 也是基于 Java 编写，通过进一步封装 Lucene ，将搜索的复杂性屏蔽起来，开发者只需要一套简单的 RESTful API 就可以操作全文检索。</p><p>Elasticsearch 在分布式环境下表现优异，这也是它受欢迎的原因之一，它支持 PB 级别的结构化或者非结构化数据的海量处理。</p><p>整体上来说，Elasticsearch 有三大功能：</p><ul><li>数据搜索</li><li>数据分析</li><li>数据存储</li></ul><p>Elasticsearch 主要有如下特点：</p><ol><li>分布式实时文件存储；</li><li>实时分析的分布式搜索引擎；</li><li>高可扩展性；</li><li>可拔插的插件支持。</li></ol><h2 id="Elasticsearch-各种安装"><a href="#Elasticsearch-各种安装" class="headerlink" title="Elasticsearch 各种安装"></a>Elasticsearch 各种安装</h2><h3 id="单节点安装"><a href="#单节点安装" class="headerlink" title="单节点安装"></a>单节点安装</h3><p>首先打开 Es 官网，找到 Elasticsearch 下载：</p><ul><li><a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></li></ul><p>然后点击下载按钮，选择合适的版本直接下载即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-713.png"></p><p>将下载文件解压，解压后的目录含义如下：</p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>modules</td><td>依赖模块目录</td></tr><tr><td>lib</td><td>第三方依赖库</td></tr><tr><td>logs</td><td>输出日志目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr><tr><td>bin</td><td>可执行文件目录</td></tr><tr><td>config</td><td>配置文件目录</td></tr><tr><td>data</td><td>数据存储目录</td></tr></tbody></table><p>启动方式：</p><p>Mac: 进入到 bin 目录下，直接执行 ./elasticsearch 启动即可。</p><p>Windows: 进入到 bin 目录下，直接执行 elasticsearch.bat 启动即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-714.png"></p><p>看到started表示启动成功。</p><p>默认监听端口是9200，所以浏览器直接输入 localhost:9200 可以查看节点信息。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-715.png"></p><p>节点的名字和集群的名字（默认elasticsearch）我们都可以自定义配置。</p><p>打开 config/elasticsearch.yml 文件，可以配置集群名称和节点名称，配置方式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>重启后生效。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-716.png"></p><p>Elasticsearch支持矩阵：</p><ul><li><a href="https://www.elastic.co/cn/support/matrix">https://www.elastic.co/cn/support/matrix</a></li></ul><h3 id="HEAD-插件安装"><a href="#HEAD-插件安装" class="headerlink" title="HEAD 插件安装"></a>HEAD 插件安装</h3><p>Elasticsearch-head 插件，可以通过可视化的方式查看集群信息。</p><p>这里介绍两种安装思路。</p><h4 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h4><p>Chrome 直接在App Store 搜索 Elasticsearch-head，点击安装即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-717.png"></p><p>或者下载离线安装包。</p><h4 id="下载插件本身"><a href="#下载插件本身" class="headerlink" title="下载插件本身"></a>下载插件本身</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</span><br><span class="line"><span class="built_in">cd</span> elasticsearch-head</span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br><span class="line">open http://localhost:9100/</span><br></pre></td></tr></table></figure><p>如果不成功可以尝试如下镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 淘宝镜像</span></span><br><span class="line">npm install -g grunt --registry=https://registry.npm.taobao.org <span class="comment">#安装grunt工具</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org <span class="comment">#安装cnpm，这是链接中国的镜像</span></span><br><span class="line">cnpm install <span class="comment">#使用cnpm代替npm编译es-head源码</span></span><br></pre></td></tr></table></figure><p>打开页面，注意此时看不到集群数据。原因在于这里通过跨域的方式请求集群数据，默认情况下，集群不支持跨域，所以就看不到集群数据。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-718.png"></p><p>解决办法如下：修改  config/elasticsearch.yml 文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跨域支持</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>重启即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-719.png"></p><h3 id="分布式安装"><a href="#分布式安装" class="headerlink" title="分布式安装"></a>分布式安装</h3><p>假设我们集群结构如下：</p><ul><li>一主二从</li><li>master端口是9200，slave端口分别是9201和9202</li></ul><p>则我们应该如下配置。</p><p>首先修改master的 config/elasticsearch.yml 文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群支持</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>配置完成后重启master。</p><p>将es压缩包解压两份，分别命名为slave01和slave02，代表两个从机。</p><p>分别对其进行配置。</p><p>slave01 的配置如下 config/elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave01</span></span><br><span class="line"><span class="comment"># 集群名称必须一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave01</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9201</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;127.0.0.1&quot;</span>]</span><br></pre></td></tr></table></figure><p>slave02 的配置如下 config/elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave02</span></span><br><span class="line"><span class="comment"># 集群名称必须一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">sakuratears</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave02</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9202</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> [<span class="string">&quot;127.0.0.1&quot;</span>]</span><br></pre></td></tr></table></figure><p>然后分别启动slave01和slave02，然后可以在head插件上查看集群信息。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-720.png"></p><h3 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h3><p>Kibana 是 Elastic 公司推出的一个针对 Elasticsearch 的分析以及数据可视化平台，可以搜索、查看存放在 Elasticsearch 中的数据。</p><p>需要注意安装 Kibana 版本需要与 Elasticsearch  版本一致，不然可能会出现问题。</p><p>安装步骤如下：</p><ol><li>下载 Kibana ： <a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></li><li>解压</li><li>配置 Elasticsearch 的地址信息（可选，如果ES 是默认地址及端口，可以不用配置，具体配置文件是 config/kibana.yml）</li><li>执行 /bin/kibana 文件（命令 Mac：./kibana   Windows: kibana.bat）</li><li>访问 localhost:5601</li></ol><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-721.png"></p><p>Kibana 安装好之后，首次打开时，可以选择初始化 ES 提供的测试数据，也可以不使用。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本节我们介绍了 Elasticsearch ，了解到其底层主要由 Lucene 实现，并对 Lucene 做了简单介绍，另外我们学习了如何安装 Elasticsearch 及其插件，以及 Kibana，这对我们后面Elasticsearch的学习是有帮助的。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很久就打算学习 Elasticsearch 的一些知识了，看了许多资料，把学习过程中的想法和笔记记录下来。&lt;/p&gt;
&lt;p&gt;好了，废话不多说，我们开始吧。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Elasticsearch" scheme="https://www.sakuratears.top/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>不思议迷宫布拉卡达学院1201分享</title>
    <link href="https://www.sakuratears.top/blog/%E4%B8%8D%E6%80%9D%E8%AE%AE%E8%BF%B7%E5%AE%AB%E5%B8%83%E6%8B%89%E5%8D%A1%E8%BE%BE%E5%AD%A6%E9%99%A21201%E5%88%86%E4%BA%AB.html"/>
    <id>https://www.sakuratears.top/blog/%E4%B8%8D%E6%80%9D%E8%AE%AE%E8%BF%B7%E5%AE%AB%E5%B8%83%E6%8B%89%E5%8D%A1%E8%BE%BE%E5%AD%A6%E9%99%A21201%E5%88%86%E4%BA%AB.html</id>
    <published>2021-06-01T14:57:00.000Z</published>
    <updated>2021-06-01T15:03:47.900Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>玩迷宫已经很长一段时间了，自从从大佬那儿搞到一个宙斯号后，就一直是两个号再玩。</p><p>到现在已经爬了3个迷宫的1201了，分别是低语之森、德古拉城堡和诸神的棋盘。</p><p>学院是第四个，爬了这些，除了在B站上分享了两个以外外，也没有太多的记录。</p><p>今天写篇博文记录下，以后的爬高之旅估计也会记录。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>好了，不那么多废话了，开始说下学院1201的攻略及要点吧。</p><h2 id="攻略"><a href="#攻略" class="headerlink" title="攻略"></a>攻略</h2><p>迷宫：布拉卡达学院</p><p>阵容：建筑师出战链接暗裔、阿瓦隆</p><p>试剂：棱光药剂</p><p>神器：菩提佛珠</p><p>称号：冒险系异界游侠、战斗系不点、巨龙系亚龙血统只点1级</p><p>挂树：时之术士</p><p>爬高准备：</p><ol><li>建筑师建永恒之塔30-60boss层黑永恒套 </li><li>神龙许愿出龙力（有龙语更好 前期能省不少卷轴） </li><li>120-130层之前需要阿瓦隆预知之力3级（满级），奈米庇佑3级（满级）</li><li>前期升级 鞋子-探索者长靴（进入下一层50%得原石） 优先升满衣服-荆棘铠甲（反伤+50%） 戒指-扭曲时光之眼（时停每轮-10%小怪血量）腰带-宝藏腰带（加50%开箱子获得高级卷轴）</li></ol><p>普通层玩法：</p><p>永恒套时停（需要10轮以上 不够下楼前鞋子换奥丁战靴（气系效果+30%））配合扭曲时光之眼10回合全灭小怪。</p><p>前期地刺、龙之利爪，中期换上梅林的奥术长靴（低阶魔法30%不消耗卷轴）地震，后期末日审判。</p><p>Boss层玩法：</p><p>腰带换黑棘的刻痕腰带（降低受到Boss伤害+25%），鞋子换稳固长靴（无法闪避攻击）。</p><p>100-900层：</p><p>1.拖回合 2.拖回合 3.冰锥/龙威（记得脱佛珠）4.拖回合 5.拖回合 6.拖回合 7.拖回合 8.拖回合 9.3级预知之力（Boss吃1） 10.拖回合 11.拖回合 12.3级奈米庇佑 13.瓦解 14.链接畸变体 （Boss吃2 链接目标被吃就sl）场上需要有一只加攻的自爆怪 15.反伤 16.反伤 17.反伤 18.反伤 19.变形 20.奈米庇佑 21.反伤 22.斩杀</p><p>900层以上：</p><p>1.拖回合 2.拖回合 3.龙威4.拖回合 5.拖回合 6.拖回合 7.预知之力 8.庇佑 9.瓦解10.任意链接一只 11砍12砍13砍14砍。</p><p>有送卷轴的屋子时卷轴的优先级为:变形＞地震＝末日＞地刺＞复活＞时停＞瓦解＞冰锥＞超重力。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>110-130的boss可以永恒下楼手撕，而后再按照上述套路操作。</li><li>140+层后反伤过boss层，不要穿永恒下楼。</li><li>本次活动主题可以学习魔法系、战斗系、冒险系三系称号，魔法系走气传时停轮数更多，爬起来会更简单。</li><li>没有本次活动主题（没魔法系）也不用担心，学院尸体有个灵魂，使用后可以不受限制释放魔法，这也是点灯异界的原因。</li><li>boss只有在不被控制的情况下才会攒饥饿度，如果100-900层的第7步观察boss还在被控制，记得使用诅咒、瓦解、失明等移除下boss的控制效果，不然后面操作会对不上。</li><li>如果拿到法老面具，打boss的时候可以带上，运气好的话可以拘住boss灵魂，里面有一个每下楼给一颗原石的灵魂。</li><li>教学楼事件前期优先金融课（3次满）&gt; 调查 = 炼金课 &gt; 其他， 调查拿到2把钥匙后出原石和卷轴，炼金必出原石。后期可以选美食课什么的加加属性即可。</li><li>时停卷轴基本用不上，后期（1000+层）可以命运套下楼，用时停卷轴过小怪层，增加属性评分。</li><li>可以攒些食物（美食课）和灵魂（异界翻尸体、法老面具），学院有装备使用灵魂50%概率+攻击魔力，使用食物+血量，可以提高评分。</li><li>学院很多装备组合可以百分比提高攻击，爬到1201层后，最后点出战斗系剑圣称号，可以大幅提高攻击，获得更高的结算评分。</li></ol><h2 id="附上1201图及视频"><a href="#附上1201图及视频" class="headerlink" title="附上1201图及视频"></a>附上1201图及视频</h2><p>登顶图片：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-1.jpg"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-2.jpg"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-3.jpg"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/game/pasted-4.jpg"></p><p>登顶视频：</p><iframe src="//player.bilibili.com/player.html?aid=205985323&bvid=BV1eh411e7r9&cid=347132323&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://tieba.baidu.com/p/6553083033">布达拉学院1201详细攻略</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;玩迷宫已经很长一段时间了，自从从大佬那儿搞到一个宙斯号后，就一直是两个号再玩。&lt;/p&gt;
&lt;p&gt;到现在已经爬了3个迷宫的1201了，分别是低语之森、德古拉城堡和诸神的棋盘。&lt;/p&gt;
&lt;p&gt;学院是第四个，爬了这些，除了在B站上分享了两个以外外，也没有太多的记录。&lt;/p&gt;</summary>
    
    
    
    <category term="游戏" scheme="https://www.sakuratears.top/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="不思议迷宫" scheme="https://www.sakuratears.top/tags/%E4%B8%8D%E6%80%9D%E8%AE%AE%E8%BF%B7%E5%AE%AB/"/>
    
    <category term="游戏" scheme="https://www.sakuratears.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>记一次线上问题（dubbo连接超时问题）</title>
    <link href="https://www.sakuratears.top/blog/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%EF%BC%88dubbo%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%EF%BC%88dubbo%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%EF%BC%89.html</id>
    <published>2021-05-30T11:53:00.000Z</published>
    <updated>2021-05-30T12:02:17.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天下午3点左右，我们业务用户反映我们的app出现大面积登录成功，访问缓慢的情况。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-708.png"></p><p>查询后台日志发现大量出现<code>TimeoutException</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2021-05-11 16:09:44.785, end time: 2021-05-11 16:10:34.796, client elapsed: 0 ms, server elapsed: 5011 ms, timeout: 5000 ms, request: Request [id=7467, version=2.0.0, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=xxxx, parameterTypes=[class com.xxxx.xjd.late.common.dto.xxx.xxxx], arguments=[com.xxxx.xjd.late.common.dto.xxxx.xxxx@e2adb42], attachments=&#123;path=com.xxxx.xjd.late.api.xxxx, interface=com.xxxx.xjd.late.api.xxxx, version=1.0.0, timeout=50000, group=xxxx-xxxx&#125;]], channel: /10.0.0.1:56811 -&gt; /10.0.0.3:8077</span><br></pre></td></tr></table></figure><p>PS：Linux指令，查询某个关键字最新一行数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;TimeoutException&#x27;</span> xxxxx.log | tail -n 1</span><br></pre></td></tr></table></figure><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="初期分析"><a href="#初期分析" class="headerlink" title="初期分析"></a>初期分析</h2><p>线上出现大量dubbo请求超时，我们开始分析问题，一开始认为是网络原因导致的，咨询了网络运维组，运维组排查内网环境说网络正常。</p><p>而且经过跟踪，我们发现有部分请求是成功的。</p><p>由于我们是分布式部署，A模块称为client项目，用于为App提供接口服务，其调用了service项目（主要与数据库、其他模块、三方等交互）来进行服务。</p><p>我们发现clinet项目的请求会访问到service项目，但是处理过程中超时了，也没有任何业务异常。</p><p>而且超时接口广泛，不是单一一个接口出现超时异常。</p><p>我们找到了一个最简单的接口，这个接口是前端操作后，app将数据发送过来，service处理后保存入库（普通save操作）。</p><p>而后我们通过日志找到这个用户，登录堡垒机查询数据库发现刚才用户数据已经保存成功。</p><p>因此我们大概意识到是数据库执行缓慢导致的。</p><h2 id="问题浮现"><a href="#问题浮现" class="headerlink" title="问题浮现"></a>问题浮现</h2><p>正在我们分析过程中，数据库管理员找到我们，说xxx应用是不是你们负责，再跑什么业务，现在数据库很卡，CPU要打满了。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-709.png"></p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-710.png"></p><p>在数据库管理员的帮助下，我们定位到了一些慢SQL，及一个一直在执行的插入SQL，其IP定位到我们的管理后台。</p><p>找到了相关项目，我们根据SQL定位到了如下这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//....部分代码略</span></span><br><span class="line">platfContentService.save(platfContent);<span class="comment">//新建或者编辑保存</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(platfContent.getType()))&#123;<span class="comment">//公告群发</span></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            List&lt;String&gt; userIds = <span class="keyword">null</span>;</span><br><span class="line">            List&lt;PlatfInbox&gt; inboxs = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            Integer offset = <span class="number">0</span>;</span><br><span class="line">            Integer pageSize = <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">if</span>(String.valueOf(Constant.targetUserEnum.ALL.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser()))&#123;</span><br><span class="line">                userIds = platfContentService.findUserIdsFromPlatfUser(<span class="keyword">null</span>,</span><br><span class="line">                        offset,pageSize);</span><br><span class="line">                <span class="keyword">while</span>(userIds != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; userIds.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(String userId : userIds)&#123;</span><br><span class="line">                        inboxs.add(encapsulatePlatfInbox(userId,platfContent));</span><br><span class="line">                    &#125;</span><br><span class="line">                    platfContentService.batchInsertPlatfInbox(inboxs);</span><br><span class="line">                    userIds.clear();</span><br><span class="line">                    inboxs.clear();</span><br><span class="line">                    offset = offset+pageSize;</span><br><span class="line">                    userIds =  platfContentService.findUserIdsFromPlatfUser(<span class="keyword">null</span>,offset,pageSize);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(String.valueOf(Constant.targetUserEnum.YQ_USER.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser())</span><br><span class="line">                    || String.valueOf(Constant.targetUserEnum.JK_USER.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser())</span><br><span class="line">                    || String.valueOf(Constant.targetUserEnum.YHK_USER.getValue())</span><br><span class="line">                    .equals(platfContent.getTargetUser())) &#123;</span><br><span class="line">                userIds = platfContentService.findUserIdsFromLateAccount(platfContent,offset,pageSize);</span><br><span class="line">                <span class="keyword">while</span>(userIds.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(String userId : userIds)&#123;</span><br><span class="line">                        inboxs.add(encapsulatePlatfInbox(userId,platfContent));</span><br><span class="line">                    &#125;</span><br><span class="line">                    platfContentService.batchInsertPlatfInbox(inboxs);</span><br><span class="line">                    userIds.clear();</span><br><span class="line">                    inboxs.clear();</span><br><span class="line">                    offset = offset+pageSize;</span><br><span class="line">                    userIds =  platfContentService.findUserIdsFromLateAccount(platfContent,offset,pageSize);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;.start();</span><br><span class="line">&#125;</span><br><span class="line">j.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">j.setMsg(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line"><span class="comment">//....部分代码略</span></span><br></pre></td></tr></table></figure><p>这段代码逻辑如下：</p><p>我们管理后台原来有个发送公告消息模块，运营之前没用过，昨天下午使用了，添加了一条全体公告。</p><p>代码的逻辑是开个线程去批量将每个用户查出来拿到id，在更新进inbox消息表……</p><p>由于用户量巨大，导致对数据库造成巨大压力，原来一些慢SQL的问题也浮现了。</p><p>同时这种方案开启线程去处理，如果正好服务挂了，剩余部分数据将得不到有效处理。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>可以看到代码是开启线程处理数据，我们将管理后台重启即可。而后数据库压力缓解，系统服务恢复正常。</p><p>关于这部分问题，原来的设计是每有一条消息，向数据库里插入一条消息记录。</p><p>通过查询可用看到消息表数据量已达到6600w。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-711.png"></p><p>我们后面通过分析优化，基本处理方法如下：</p><ol><li>对于一些全局消息，只记录一条即可，并通过Redis缓存辅助处理。</li><li>对于具体用户个人消息，设置保存时限，定时清除部分实际无用消息，并通过缓存近期消息提高查询效率。</li></ol><p>同时DBA给我们拉取了一些慢查询，我们需要处理及优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Query <span class="number">10</span>: <span class="number">0.64</span> QPS, <span class="number">5.78</span>x concurrency, ID <span class="number">0xCC2F786C3D667858</span> <span class="keyword">at</span> byte <span class="number">593627453</span></span><br><span class="line"># This item <span class="keyword">is</span> included <span class="keyword">in</span> the report because it <span class="keyword">matches</span> <span class="comment">--limit.</span></span><br><span class="line"># Scores: V<span class="operator">/</span>M <span class="operator">=</span> <span class="number">5.81</span></span><br><span class="line"># <span class="type">Time</span> <span class="keyword">range</span>: <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T13:<span class="number">34</span>:<span class="number">04</span> <span class="keyword">to</span> <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T16:<span class="number">18</span>:<span class="number">59</span></span><br><span class="line"># Attribute    pct   total     min     max     avg     <span class="number">95</span><span class="operator">%</span>  stddev  median</span><br><span class="line"># <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"># Count          <span class="number">2</span>    <span class="number">6294</span></span><br><span class="line"># <span class="keyword">Exec</span> <span class="type">time</span>      <span class="number">2</span>  <span class="number">57150</span>s      <span class="number">3</span>s     <span class="number">89</span>s      <span class="number">9</span>s     <span class="number">21</span>s      <span class="number">7</span>s      <span class="number">6</span>s</span><br><span class="line"># Lock <span class="type">time</span>      <span class="number">0</span>   <span class="number">867</span>ms    <span class="number">56</span>us    <span class="number">17</span>ms   <span class="number">137</span>us   <span class="number">159</span>us   <span class="number">521</span>us    <span class="number">98</span>us</span><br><span class="line"># <span class="keyword">Rows</span> sent      <span class="number">0</span>   <span class="number">6.15</span>k       <span class="number">1</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">1</span>       <span class="number">0</span>       <span class="number">1</span></span><br><span class="line"># <span class="keyword">Rows</span> examine  <span class="number">39</span>  <span class="number">39.00</span>G   <span class="number">6.34</span>M   <span class="number">6.35</span>M   <span class="number">6.35</span>M   <span class="number">6.29</span>M       <span class="number">0</span>   <span class="number">6.29</span>M</span><br><span class="line"># Query size     <span class="number">0</span>   <span class="number">1.05</span>M     <span class="number">167</span>     <span class="number">194</span>  <span class="number">174.23</span>  <span class="number">174.84</span>    <span class="number">4.27</span>  <span class="number">166.51</span></span><br><span class="line"># String:</span><br><span class="line"># Hosts        <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">3173</span><span class="operator">/</span><span class="number">50</span><span class="operator">%</span>), <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">3121</span><span class="operator">/</span><span class="number">49</span><span class="operator">%</span>)</span><br><span class="line"># Users        xxxx_web_w</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   <span class="number">1</span>us</span><br><span class="line">#  <span class="number">10</span>us</span><br><span class="line"># <span class="number">100</span>us</span><br><span class="line">#   <span class="number">1</span>ms</span><br><span class="line">#  <span class="number">10</span>ms</span><br><span class="line"># <span class="number">100</span>ms</span><br><span class="line">#    <span class="number">1</span>s  ################################################################</span><br><span class="line">#  <span class="number">10</span>s<span class="operator">+</span>  #################</span><br><span class="line"># Tables</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;xxxx_detail&#x27;</span>\G</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `xxxx_detail`\G</span><br><span class="line"># EXPLAIN <span class="comment">/*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">                <span class="built_in">COUNT</span>(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">FROM</span> xxxx_detail a</span><br><span class="line">                 <span class="keyword">WHERE</span> a.user_id <span class="operator">!=</span> <span class="string">&#x27;xxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">AND</span> a.gmail_account <span class="operator">=</span> <span class="string">&#x27;xxx@gmail.com&#x27;</span> <span class="keyword">AND</span> a.del_flag <span class="operator">=</span> <span class="number">0</span>\G</span><br></pre></td></tr></table></figure><p>这条SQL用了 <code>!=</code> ，实际查询用不到索引，造成全表扫描。</p><p>可以看到这个SQL的操作是查询除了该用户，有没有其他用户使用这个邮箱，这种可以对<code>gmail_account</code>字段添加索引，如果涉及大量查询，可以考虑使用Redis来进行处理。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Query <span class="number">1</span>: <span class="number">2.98</span> QPS, <span class="number">21.71</span>x concurrency, ID <span class="number">0xEC345910A7B575A6</span> <span class="keyword">at</span> byte <span class="number">389892839</span></span><br><span class="line"># This item <span class="keyword">is</span> included <span class="keyword">in</span> the report because it <span class="keyword">matches</span> <span class="comment">--limit.</span></span><br><span class="line"># Scores: V<span class="operator">/</span>M <span class="operator">=</span> <span class="number">8.98</span></span><br><span class="line"># <span class="type">Time</span> <span class="keyword">range</span>: <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T13:<span class="number">34</span>:<span class="number">39</span> <span class="keyword">to</span> <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T16:<span class="number">18</span>:<span class="number">59</span></span><br><span class="line"># Attribute    pct   total     min     max     avg     <span class="number">95</span><span class="operator">%</span>  stddev  median</span><br><span class="line"># <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"># Count          <span class="number">9</span>   <span class="number">29401</span></span><br><span class="line"># <span class="keyword">Exec</span> <span class="type">time</span>     <span class="number">10</span> <span class="number">214024</span>s      <span class="number">1</span>s    <span class="number">133</span>s      <span class="number">7</span>s     <span class="number">23</span>s      <span class="number">8</span>s      <span class="number">4</span>s</span><br><span class="line"># Lock <span class="type">time</span>      <span class="number">0</span>      <span class="number">4</span>s    <span class="number">52</span>us    <span class="number">37</span>ms   <span class="number">122</span>us   <span class="number">176</span>us   <span class="number">436</span>us    <span class="number">93</span>us</span><br><span class="line"># <span class="keyword">Rows</span> sent     <span class="number">27</span> <span class="number">574.24</span>k      <span class="number">20</span>      <span class="number">20</span>      <span class="number">20</span>      <span class="number">20</span>       <span class="number">0</span>      <span class="number">20</span></span><br><span class="line"># <span class="keyword">Rows</span> examine  <span class="number">50</span>  <span class="number">50.01</span>G <span class="number">590.49</span>k   <span class="number">2.41</span>M   <span class="number">1.74</span>M   <span class="number">2.26</span>M <span class="number">467.04</span>k   <span class="number">1.86</span>M</span><br><span class="line"># Query size     <span class="number">0</span>   <span class="number">2.94</span>M     <span class="number">105</span>     <span class="number">105</span>     <span class="number">105</span>     <span class="number">105</span>       <span class="number">0</span>     <span class="number">105</span></span><br><span class="line"># String:</span><br><span class="line"># Hosts        <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">14751</span><span class="operator">/</span><span class="number">50</span><span class="operator">%</span>), <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">14650</span><span class="operator">/</span><span class="number">49</span><span class="operator">%</span>)</span><br><span class="line"># Users        xxxx_web_w</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   <span class="number">1</span>us</span><br><span class="line">#  <span class="number">10</span>us</span><br><span class="line"># <span class="number">100</span>us</span><br><span class="line">#   <span class="number">1</span>ms</span><br><span class="line">#  <span class="number">10</span>ms</span><br><span class="line"># <span class="number">100</span>ms</span><br><span class="line">#    <span class="number">1</span>s  ################################################################</span><br><span class="line">#  <span class="number">10</span>s<span class="operator">+</span>  ################</span><br><span class="line"># Tables</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;platf_inbox&#x27;</span>\G</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `platf_inbox`\G</span><br><span class="line"># EXPLAIN <span class="comment">/*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">                <span class="keyword">from</span> platf_inbox a</span><br><span class="line">                <span class="keyword">where</span> a.del_flag<span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> a.msg_type<span class="operator">=</span><span class="number">3</span></span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span> a._id <span class="keyword">desc</span></span><br><span class="line">                limit <span class="number">0</span>,<span class="number">20</span>\G</span><br></pre></td></tr></table></figure><p>该SQL查询20条最新消息，我们通过Redis缓存数据来减小数据库压力。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Query <span class="number">59</span>: <span class="number">0.09</span> QPS, <span class="number">0.49</span>x concurrency, ID <span class="number">0x9B09EF8E6B818E92</span> <span class="keyword">at</span> byte <span class="number">517278788</span></span><br><span class="line"># This item <span class="keyword">is</span> included <span class="keyword">in</span> the report because it <span class="keyword">matches</span> <span class="comment">--outliers.</span></span><br><span class="line"># Scores: V<span class="operator">/</span>M <span class="operator">=</span> <span class="number">3.53</span></span><br><span class="line"># <span class="type">Time</span> <span class="keyword">range</span>: <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T14:<span class="number">04</span>:<span class="number">08</span> <span class="keyword">to</span> <span class="number">2021</span><span class="number">-05</span><span class="number">-11</span>T16:<span class="number">03</span>:<span class="number">49</span></span><br><span class="line"># Attribute    pct   total     min     max     avg     <span class="number">95</span><span class="operator">%</span>  stddev  median</span><br><span class="line"># <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"># Count          <span class="number">0</span>     <span class="number">668</span></span><br><span class="line"># <span class="keyword">Exec</span> <span class="type">time</span>      <span class="number">0</span>   <span class="number">3517</span>s      <span class="number">2</span>s     <span class="number">64</span>s      <span class="number">5</span>s     <span class="number">13</span>s      <span class="number">4</span>s      <span class="number">4</span>s</span><br><span class="line"># Lock <span class="type">time</span>      <span class="number">0</span>   <span class="number">119</span>ms    <span class="number">83</span>us     <span class="number">4</span>ms   <span class="number">178</span>us   <span class="number">247</span>us   <span class="number">209</span>us   <span class="number">144</span>us</span><br><span class="line"># <span class="keyword">Rows</span> sent      <span class="number">0</span>     <span class="number">326</span>       <span class="number">0</span>       <span class="number">1</span>    <span class="number">0.49</span>    <span class="number">0.99</span>    <span class="number">0.50</span>       <span class="number">0</span></span><br><span class="line"># <span class="keyword">Rows</span> examine   <span class="number">3</span>   <span class="number">2.57</span>G   <span class="number">3.93</span>M   <span class="number">3.93</span>M   <span class="number">3.93</span>M   <span class="number">3.86</span>M    <span class="number">0.06</span>   <span class="number">3.86</span>M</span><br><span class="line"># Query size     <span class="number">0</span> <span class="number">546.01</span>k     <span class="number">837</span>     <span class="number">837</span>     <span class="number">837</span>     <span class="number">837</span>       <span class="number">0</span>     <span class="number">837</span></span><br><span class="line"># String:</span><br><span class="line"># Hosts        <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">338</span><span class="operator">/</span><span class="number">50</span><span class="operator">%</span>), <span class="number">10.0</span><span class="number">.0</span>.xx (<span class="number">330</span><span class="operator">/</span><span class="number">49</span><span class="operator">%</span>)</span><br><span class="line"># Users        xxxx_web_w</span><br><span class="line"># Query_time distribution</span><br><span class="line">#   <span class="number">1</span>us</span><br><span class="line">#  <span class="number">10</span>us</span><br><span class="line"># <span class="number">100</span>us</span><br><span class="line">#   <span class="number">1</span>ms</span><br><span class="line">#  <span class="number">10</span>ms</span><br><span class="line"># <span class="number">100</span>ms</span><br><span class="line">#    <span class="number">1</span>s  ################################################################</span><br><span class="line">#  <span class="number">10</span>s<span class="operator">+</span>  ######</span><br><span class="line"># Tables</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;xxxx_ocr_record&#x27;</span>\G</span><br><span class="line">#    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `xxxx_ocr_record`\G</span><br><span class="line"># EXPLAIN <span class="comment">/*!50100 PARTITIONS*/</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">                <span class="operator">*</span></span><br><span class="line">                <span class="keyword">from</span> xxxx_ocr_record a</span><br><span class="line">                <span class="keyword">WHERE</span> a.ocr_result <span class="operator">=</span> <span class="number">1</span>  <span class="keyword">and</span> a.user_id<span class="operator">=</span><span class="string">&#x27;xxxxx&#x27;</span> <span class="keyword">order</span> <span class="keyword">BY</span> a.create_date <span class="keyword">DESC</span> LIMIT <span class="number">1</span>\G</span><br></pre></td></tr></table></figure><p>该表没有索引，虽然只查一条，但是全表扫描，查询效率非常低，需要添加索引。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-712.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从此次线上事故到恢复，查不到耗时3小时左右，感觉自己从中学到了一些经验。</p><p>对线上问题处理及优化有了更多的一些认识，虽然是程序逻辑问题造成的，但是仍有不少收获。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;昨天下午3点左右，我们业务用户反映我们的app出现大面积登录成功，访问缓慢的情况。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-708.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;查询后台日志发现大量出现&lt;code&gt;TimeoutException&lt;/code&gt;，如下：&lt;/p&gt;</summary>
    
    
    
    <category term="工作" scheme="https://www.sakuratears.top/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Dubbo" scheme="https://www.sakuratears.top/tags/Dubbo/"/>
    
    <category term="线上问题" scheme="https://www.sakuratears.top/tags/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客升级踩坑记</title>
    <link href="https://www.sakuratears.top/blog/Hexo%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E8%B8%A9%E5%9D%91%E8%AE%B0.html"/>
    <id>https://www.sakuratears.top/blog/Hexo%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E8%B8%A9%E5%9D%91%E8%AE%B0.html</id>
    <published>2021-05-30T11:20:00.000Z</published>
    <updated>2021-06-01T15:14:13.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前些时间一直在写博客，整理记录信息等，一直没有关心过博客架构版本的问题。</p><p>最近的一篇博文需要用到 <strong>MathJax</strong>，我原以为 <strong>MarkDown</strong> 是支持 <strong>MathJax</strong> 的，在本地编写时没有遇到任何问题。</p><p>但发布到GitHub上后，直接导致我整个blog挂掉了，检查发现<strong>Hexo</strong>如果要完美支持 <strong>MathJax</strong>，需要<code>hexo-renderer-kramed</code>等等东西。</p><p>还要修改blog架构的一些源码，感觉很复杂，并且配置也不是十分友好。</p><p>在浏览过程中，我发现 <strong>Hexo</strong> 版本已经发布到5.4.0了，我使用的 <strong>NexT</strong> 主题也已经到了7.x的版本。</p><p>心想一不做二不休，趁此次机会升级下blog架构。</p><p>开始以为很简单，结果直接导致我的blog没法启动/没法使用了，中间升级的过程特此记录下，希望能给也想升级Hexo blog的人一些帮助。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>本次想要升级的最终结果如下：</p><table><thead><tr><th>名称</th><th>当前版本</th><th>升级版本</th></tr></thead><tbody><tr><td>NodeJs</td><td>v10.2.0</td><td>v16.2.0</td></tr><tr><td>Hexo</td><td>v3.9.0</td><td>v5.4.0</td></tr><tr><td>NexT</td><td>v5.1.4</td><td>v7.8.0</td></tr></tbody></table><p>其中还伴随这一些插件的升级，由于一些低版本插件过时，可能存在被删除的风险，这也是本次升级的一个主要原因。</p><p>NodeJs的升级十分简单，直接在官网 <a href="https://nodejs.org/zh-cn/">NodeJs</a> 上下载最新版安装即可。</p><p>当然如果想安装其他版本，直接在 <a href="https://nodejs.org/zh-cn/download/releases/">NodeJs 以往的版本</a> 上下载即可。</p><p>安装好最新版后，直接使用命令即可显示Node版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\blog\newblog&gt;node -v</span><br><span class="line">v16.2.0</span><br></pre></td></tr></table></figure><p>我们安装<code>npm-upgrade</code>插件，使用<code>npm-upgrade</code>命令，可以看到依赖可以更新到的最新版本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line"></span><br><span class="line">npm-upgrade</span><br></pre></td></tr></table></figure><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-699.png"></p><p>开始我直接更新所有依赖，直接导致了<strong>Hexo</strong> blog不能正常启动。</p><h2 id="新建Hexo博客框架"><a href="#新建Hexo博客框架" class="headerlink" title="新建Hexo博客框架"></a>新建Hexo博客框架</h2><p>这儿我们从新搭建一个博客来解决blog框架的升级问题。</p><p>优点：</p><ol><li>重新搭建，所有依赖都依据比较新的版本，且不会出现不兼容的情况。</li><li>NexT v5.x 和 NexT v7.x 变化巨大，甚至仓库地址都发生了变化，我们需要重新拷贝主题文件。</li><li>我们之前搭建blog在里面修改了很多代码实现某些功能，很混乱，不方便查找和修改，升级后我们可以统一处理了。（这也是我升级的一个主要原因）</li><li>新版本NexT新增了一些功能，我们一些手动实现的效果现在可以直接使用配置<code>false</code>或者<code>true</code>解决了。</li><li>据说新版本blog加载速度有所提升，不知道真的假的。</li></ol><p>说到这儿，那我们开始吧，开始当然要检查下 <strong>Hexo</strong> 命令，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\blog\blog&gt;hexo -v</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 5.4.0</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Windows_NT 10.0.19042 win32 x64</span><br><span class="line">node: 16.2.0</span><br><span class="line">v8: 9.0.257.25-node.16</span><br><span class="line">uv: 1.41.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.17.1</span><br><span class="line">modules: 93</span><br><span class="line">nghttp2: 1.42.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.1</span><br><span class="line">openssl: 1.1.1k+quic</span><br><span class="line">cldr: 39.0</span><br><span class="line">icu: 69.1</span><br><span class="line">tz: 2021a</span><br><span class="line">unicode: 13.0</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure><p>hexo-cli: 4.2.0 , hexo: 5.4.0 即为当前最新版本，不是的需要升级下 <strong>Hexo</strong>。</p><p><strong>Hexo</strong>升级可以直接卸载重装即可。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo -g</span><br><span class="line">npm install hexo -g</span><br><span class="line"></span><br><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>升级好后，使用以下指令：</p><p>① hexo init blog</p><p>② cd blog</p><p>③ npm install</p><p>④ hexo s</p><p>可以看到一个v5.4.0版本的 <strong>Hexo</strong> 博客初始化框架在 <a href="http://localhost:4000/">http://localhost:4000/</a> 启动了。</p><p>打开blog文件夹下的<code>package.json</code>文件，可以看到blog的基本配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这儿我们把 hexo 版本手动改成5.4.0，同时移除<code>hexo-theme-landscape</code>，这儿主题对我们没用。</p><p>我们观察我们原来的配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;3.9.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span>: <span class="string">&quot;^3.9.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-htmlclean&quot;</span>: <span class="string">&quot;^2.7.22&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-htmlmin&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-imagemin&quot;</span>: <span class="string">&quot;^4.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-minify-css&quot;</span>: <span class="string">&quot;^1.2.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;gulp-uglify&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^3.9.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-admin&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-autonofollow&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^0.1.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-baidu-sitemap&quot;</span>: <span class="string">&quot;^0.1.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^0.1.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-feed&quot;</span>: <span class="string">&quot;^1.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span>: <span class="string">&quot;^1.0.8&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-sitemap&quot;</span>: <span class="string">&quot;^1.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-helper-live2d&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^0.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^0.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span>: <span class="string">&quot;^0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-tag-aplayer&quot;</span>: <span class="string">&quot;^3.0.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hexo-wordcount&quot;</span>: <span class="string">&quot;^3.0.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们添加如下插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-admin --save   <span class="comment"># blog 管理后台系统</span></span><br><span class="line">npm install hexo-deployer-git --save  <span class="comment"># blog发布到github使用</span></span><br><span class="line">npm install hexo-excerpt --save      <span class="comment"># 阅读更多插件</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save  <span class="comment"># 百度站点地图（SEO）</span></span><br><span class="line">npm install hexo-generator-feed --save     <span class="comment"># RSS使用</span></span><br><span class="line">npm install hexo-generator-searchdb --save  <span class="comment"># 本地搜索插件</span></span><br><span class="line">npm install hexo-generator-sitemap --save   <span class="comment"># 站点地图</span></span><br><span class="line">npm install hexo-helper-live2d --save      <span class="comment"># 萌妹子插件</span></span><br><span class="line">npm install hexo-related-popular-posts --save   <span class="comment"># 标记最受欢迎的文章（侧边栏显示）</span></span><br><span class="line">npm install hexo-symbols-count-time --save   <span class="comment"># 统计插件（替代wordcount）</span></span><br><span class="line">npm install hexo-tag-aplayer --save    <span class="comment"># 一款优秀的音乐播放器插件</span></span><br><span class="line">npm install hexo-autonofollow --save   <span class="comment"># 不跟踪外链插件（SEO）</span></span><br></pre></td></tr></table></figure><p>添加好后，我们需要下载<code>NexT</code>主题，新版的NexT主题可以在 <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a> 找到，旧版本的为 <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> 需要注意。</p><p>我们直接copy到我们项目。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>弄好后，我们开始配置blog下的<code>_config.yml</code>。</p><p>这个配置直接按照我们原先的blog，根据key对应过来就行。注意主题选择NexT。 theme: next</p><p>遇到的问题：</p><p><strong>问题1</strong>： language: zh-CN    原来blog是  zh-Hans</p><p>更改后，需要在 <code>blog\themes\next\languages\zh-CN.yml</code>添加没有被翻译的文字。</p><p><strong>问题2</strong>： avatar 头像</p><p>Hexo v5.4.0 移除了这个参数，这个参数现在由NexT主题控制，并可以通过配置实现旋转，十分方便。</p><p><strong>问题3</strong>： excerpt 阅读更多功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">5</span>  <span class="comment">#按层来算，也就是按代码块来算</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>PS: NexT 配置里也可以进行相关配置，但是涉及到具体显示多少行，只能在此配置。</p><p>下面主要说一下NexT的<code>_config.yml</code>配置，位置<code>blog\themes\next_config.yml</code>。</p><p><strong>问题4</strong>： creative_commons 参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">deed.zh</span></span><br></pre></td></tr></table></figure><p>这个参数会在文章结束后为自动为文章署名协议，不用我们改代码配置了。</p><p><strong>问题5</strong>： menu配置图标变化</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">support:</span> <span class="string">/support/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">photos:</span> <span class="string">/photos/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-camera</span></span><br></pre></td></tr></table></figure><p>图标配置均变为<code>fa fa-home</code>这种格式，不注意会直接不显示图标，十分坑。</p><p><strong>问题6</strong>：avatar 头像配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>头像可以实现接触旋转，不用再手动修改NexT源代码了。</p><p><strong>问题7</strong>： 阅读更多</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>主要由上面两项控制，hexo的配置文件里可以配置显示行数。</p><p><strong>问题8</strong>： 文章字数统计</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>改用<code>symbols_count_time</code>插件了，需要注意。</p><p><strong>问题9</strong>：reward和follow me 也有变化，原来follow_me只支持微信公众号</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">您的支持就是我创作的动力！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/alipay.jpg</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subscribe through Telegram Channel, Twitter, etc.</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon` (Font Awesome)</span></span><br><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span></span><br><span class="line">  <span class="attr">WeChat:</span> <span class="string">https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/others/qrcode_wechat_subscriber.jpg</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weixin</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure><p><strong>问题10</strong>： 标签云</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TagCloud settings for tags page.</span></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line">  <span class="comment"># All values below are same as default, change them by yourself.</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">18</span> <span class="comment"># Minimun font size in px</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">36</span> <span class="comment"># Maxium font size in px</span></span><br><span class="line">  <span class="attr">start:</span> <span class="string">&quot;#ADD8E6&quot;</span> <span class="comment"># Start color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">end:</span> <span class="string">&quot;#FFB6C1&quot;</span> <span class="comment"># End color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">amount:</span> <span class="number">300</span> <span class="comment"># Amount of tags, change it if you have more than 200 tags</span></span><br></pre></td></tr></table></figure><p>原来是更改NexT主题代码写死的，现在只要配置就可以了。</p><p><strong>问题11</strong>： 有用的小功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/javazwt</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure><p>可以添加快速回到顶部的按钮back2top，阅读进度条reading_progress，书签bookmark还有github_banner。</p><p>原来要实现均要改源码。</p><p><strong>问题12</strong>： needmoreshare2</p><p>安装 <code>hexo-next-share</code> 插件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install theme-next/hexo-next-share</span><br></pre></td></tr></table></figure><p>进行如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">needmoreshare:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">js:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js</span></span><br><span class="line">    <span class="attr">css:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css</span></span><br><span class="line">  <span class="attr">postbottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">box</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">vertical</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">bottomCenter</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line">  <span class="attr">float:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">topRight</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br></pre></td></tr></table></figure><p>分享图标便会出现在左下角。</p><p><strong>问题13</strong>： theme-next-pace</p><p>  引入pace插件，使页面加载的时候显示进度条</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure><p>  开启配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line"><span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">mac-osx</span></span><br></pre></td></tr></table></figure><p><strong>问题14</strong>： 用户自定义实现 custom_file_path</p><p>这是我要重点说的，该配置可以让用户有规则的配置其他内容，也方便我们以后的blog迁移，尽量做到无侵入。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="string">source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="attr">postBodyEnd:</span> <span class="string">source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>比如我们想在侧边栏添加音乐，想在文末添加阅读结束标记，添加背景，添加鼠标点击效果等，以前的做法参见这几篇文章。</p><p><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2.html">搭建自己的Hexo博客（1）</a><br><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%882%EF%BC%89.html">搭建自己的Hexo博客（2）</a><br><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%883%EF%BC%89.html">搭建自己的Hexo博客（3）</a><br><a href="https://www.sakuratears.top/blog/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%EF%BC%884%EF%BC%89.html">搭建自己的Hexo博客（4）</a></p><p>现在只要在<code>source/_data</code>文件夹下（也可以不是这个文件夹，但是强烈建议放在<code>source</code>文件夹下，这里面存放着的都是与框架无关的东西）即可。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-700.png"></p><p>最终效果如下：</p><p><a href="https://www.sakuratears.top/">SakuraTears’blog</a></p><h2 id="博文压缩优化"><a href="#博文压缩优化" class="headerlink" title="博文压缩优化"></a>博文压缩优化</h2><p>原来我们blog使用的是gulp管理，还写了一些代码，不方便管理，现在我们引入<code>hexo-neat</code>来压缩博文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><p>同时在Hexo配置文件里配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><p>配置就不详解了，我们使用<code>hexo g</code>命令，可以看到<code>public</code>文件夹下的内容已被压缩。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-701.png"></p><h2 id="其它不足"><a href="#其它不足" class="headerlink" title="其它不足"></a>其它不足</h2><p><strong>问题1</strong>： 音乐栏不对齐</p><p>这个问题我也比较诧异，原来博客是好的，我在这块没做改动，还要看看CSS样式仔细研究一下。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-702.png"></p><p><strong>问题2</strong>：阅读更多上面没法正好兼容图片</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-703.png"></p><p><strong>问题3</strong>：整体上感觉字体过大。</p><h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><h2 id="阅读更多图片问题"><a href="#阅读更多图片问题" class="headerlink" title="阅读更多图片问题"></a>阅读更多图片问题</h2><p>对于上面的第二个问题，后面我在查找资料时看到如下文章：</p><p><a href="https://stackoverflow.com/questions/32933052/hexo-excerpt-more-not-working-after-update">Hexo excerpt &lt;!—- more –&gt; not working after update</a></p><p>因此我想到查看<code>hexo-excerpt</code>代码是否有对于阅读更多的处理，搜索<code>hexo-excerpt.js</code>，在<code>node_modules</code>里找到该类。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-704.png"></p><p>可以看到是有对阅读更多进行处理的。</p><p>后面我想到是不是depth过深导致问题的原因，我把配置的depth改为了3。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">3</span>  <span class="comment">#按层来算，也就是按代码块来算</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>重新启动blog果然好了。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-705.png"></p><p>但引发的另一个问题就是其他一些文字摘要显示的太少了……</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-706.png"></p><p>后面我仔细想了下，原来配置用的<code>auto_excerpt</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt (Not recommend).</span></span><br><span class="line"><span class="comment"># Use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>其摘要是查找150个字后显示阅读更多。不会考虑格式，因此基本就是3行，所以我原来的blog没有出现这种问题。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-707.png"></p><p><code>hexo-excerpt</code>在检索时保留了原文的格式，按照深度来进行处理。</p><p>但是如果没有图片，只有文字的话，比如深度是5，我在深度3的位置添加 more 标签，只显示深度3的部分，说明插件是没问题的。</p><p>后面我终于想到了一种解决办法。</p><p>就是如果文章开头就是图片，而且只想要摘要显示这张图片，depth又比较深的话，摘要里会显示文字部分。</p><p>我在图片后面加了两个more解决问题。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![](https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/title/show1.jpg)</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h2 id="canvas-nest-支持"><a href="#canvas-nest-支持" class="headerlink" title="canvas_nest 支持"></a>canvas_nest 支持</h2><p>下载canvas_nest插件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure><p>使用用户自定义的方式引入：</p><p>新建 <code>footer.swig</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script color=<span class="string">&quot;0,0,255&quot;</span> opacity=<span class="string">&quot;0.5&quot;</span> zIndex=<span class="string">&quot;-1&quot;</span> count=<span class="string">&quot;99&quot;</span> src=<span class="string">&quot;/lib/canvas-nest/canvas-nest.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在NexT主题的<code>_config.yml</code>配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>并将<code>footer.swig</code>放到Hexo的<code>source/_data</code>文件夹下。</p><p>如果不想在本地，也可以使用cdn。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.canvas_nest %&#125;</span><br><span class="line">&lt;script color=<span class="string">&quot;0,0,255&quot;</span> opacity=<span class="string">&quot;0.5&quot;</span> zIndex=<span class="string">&quot;-1&quot;</span> count=<span class="string">&quot;99&quot;</span> src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="添加网站底部建站时间支持"><a href="#添加网站底部建站时间支持" class="headerlink" title="添加网站底部建站时间支持"></a>添加网站底部建站时间支持</h2><p>同上，将如下代码放置<code>footer.swig</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.time_date %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;05/20/2018 00:00:00&quot;</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间 </span></span></span><br><span class="line"><span class="javascript">        now.setTime(now.getTime()+<span class="number">250</span>); </span></span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125; </span></span><br><span class="line"><span class="javascript">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span></span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;timeDate&quot;</span>).innerHTML = <span class="string">&quot;本站已运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;times&quot;</span>).innerHTML = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>; </span></span><br><span class="line"><span class="javascript">    &#125; </span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在NexT主题的<code>_config.yml</code>配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建站时间支持</span></span><br><span class="line"><span class="attr">time_date:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于blog框架的更新基本就到这儿了，后面如果再有更新我会继续更新到此博文里。</p><p>原来的blog源码我没有删除，而是进行了备份。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前些时间一直在写博客，整理记录信息等，一直没有关心过博客架构版本的问题。&lt;/p&gt;
&lt;p&gt;最近的一篇博文需要用到 &lt;strong&gt;MathJax&lt;/strong&gt;，我原以为 &lt;strong&gt;MarkDown&lt;/strong&gt; 是支持 &lt;strong&gt;MathJax&lt;/strong&gt; 的，在本地编写时没有遇到任何问题。&lt;/p&gt;
&lt;p&gt;但发布到GitHub上后，直接导致我整个blog挂掉了，检查发现&lt;strong&gt;Hexo&lt;/strong&gt;如果要完美支持 &lt;strong&gt;MathJax&lt;/strong&gt;，需要&lt;code&gt;hexo-renderer-kramed&lt;/code&gt;等等东西。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Hexo" scheme="https://www.sakuratears.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>编程与数学 - 求平方根</title>
    <link href="https://www.sakuratears.top/blog/%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%95%B0%E5%AD%A6-%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9.html"/>
    <id>https://www.sakuratears.top/blog/%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%95%B0%E5%AD%A6-%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9.html</id>
    <published>2021-05-16T13:06:00.000Z</published>
    <updated>2021-05-29T11:03:39.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天看到一道题目，是关于“对整数 n 开平方，不使用Math.sqrt实现”，感觉蛮有意思的，其解法用到了牛顿迭代法（Newton’s Method）。</p><p>就顺便研究了一下该解法和其他一些解法，特来分享记录一下。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>题目是非常容易理解的，我们直接来看相关解法吧。</p><h2 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h2><p>因为对没有求根公式的函数，求解它的零点是非常困难的，因此就发明了 牛顿迭代法（Newton‘s Method） 来逼近该函数的零点。具体方法如下图所示:</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-697.png" alt="upload successful"></p><p>设 $r$ 是 $f(x)=0$ 的根，选取 $x_0$ 作为 $r$ 的初始近似值，过点 $(x_0,f(x_0))$ 做曲线 $y=f(x)$ 的切线 $L$，$L:y=f(x_0)+f’(x_0)(x-x_0)$ ，则 $L$ 与 $x$ 轴交点的横坐标 $x_1=x_0-\frac{f(x_0)}{f’(x_0)}$，称 $x_1$ 为 $r$ 的一次近似值。过点 $(x_1,f(x_1))$ 做曲线 $y=f(x)$ 的切线，并求该切线与 $x$ 轴交点的横坐标  $x_2=x_1-\frac{f(x_1)}{f’(x_1)}$，称 $x_2$ 为 $r$ 的二次近似值。重复以上过程，得 $r$ 的近似值序列，其中，$x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}$ 称为 $r$ 的 $n+1$ 次近似值，上式称为牛顿迭代公式。</p><p>用牛顿迭代法解非线性方程，是把非线性方程 $f(x)=0$ 线性化的一种近似方法。把 $f(x)$ 在点 $x_0$ 的某邻域内展开成泰勒级数<br>$$f(x)=f(x_0)+f’(x_0)(x-x_0)+\frac{f’’(x_0)(x-x_0)^2}{2!}+…+\frac{f^{(n)}(x_0)(x-x_0)^n}{n!}+R_n(x)$$<br>，取其线性部分（即泰勒展开的前两项），并令其等于 $0$，即 $f(x_0)+f’(x_0)(x-x_0)=0$，以此作为非线性方程 $f(x)=0$ 的近似方程，若 $f’(x)\not ={0}$，则其解为 $x_1=x_0-\frac{f(x_0)}{f’(x_0)}$， 这样，得到牛顿迭代法的一个迭代关系式： $x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}$。</p><p>已经证明，如果是连续的，并且待求的零点是孤立的，那么在零点周围存在一个区域，只要初始值位于这个邻近区域内，那么牛顿法必定收敛。 并且，如果不为0, 那么牛顿法将具有平方收敛的性能。 粗略的说，这意味着每迭代一次，牛顿法结果的有效数字将增加一倍。</p><p>说了这些，那牛顿迭代法为什么会跟 “对整数n开平方” 有关呢？</p><p>若我们另 $f(x)=x^2-n$，则 $f(x)$ 的零点即为 $\sqrt{n}$ ，此时 $f’(x)=2x$，则迭代公式如下：</p><p>$$x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}=x_n-\frac{x_n^2-n}{2x_n}=\frac{x_n^2+n}{2x_n}=\frac{1}{2}(x_n+\frac{n}{x_n})$$</p><p>相关代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 牛顿迭代法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 要开方的数字，需要大于等于0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.NaN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//精度</span></span><br><span class="line">    <span class="keyword">double</span> e = <span class="number">1e-15</span>;</span><br><span class="line">    <span class="keyword">double</span> x = n;</span><br><span class="line">    <span class="keyword">double</span> y = (x + n / x) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//当x_n 与 x_n+1 精度小于e，认为逼近0点，返回符合要求的数据</span></span><br><span class="line">    <span class="keyword">while</span> (Math.abs(x - y) &gt; e) &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = (x + n / x) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sqrt(<span class="number">4</span>));</span><br><span class="line">    System.out.println(sqrt(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.0</span><br><span class="line">1.7320508075688772</span><br></pre></td></tr></table></figure><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><p>相比于快速的牛顿迭代法，二分查找法也是可以实现开方需求的。不过相比牛顿迭代法其速度较慢。</p><p>这种方法十分好理解，就是上界初始化为数字本身，下界初始化为0.0，这样用二分，判断中间数字的平方和目标数字比较，再修改上界和下界，直到小于一定的阈值。需要注意结束条件和精度判断。</p><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分开方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt1</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> left = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> hight = n;</span><br><span class="line">    <span class="comment">// 此处为精度，当满足该精度时返回近似值</span></span><br><span class="line">    <span class="keyword">double</span> p = <span class="number">1e-15</span>;</span><br><span class="line">    <span class="keyword">double</span> mid = (left + hight)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="comment">// 精度比较</span></span><br><span class="line">    <span class="keyword">while</span> (Math.abs(mid * mid - n) &gt; p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mid * mid &gt; n) &#123;</span><br><span class="line">            hight = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (mid * mid &lt; n) &#123;</span><br><span class="line">            left = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = (left + hight)/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(sqrt1(<span class="number">4</span>));</span><br><span class="line">    System.out.println(sqrt1(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.0</span><br><span class="line">1.7320508075688772</span><br></pre></td></tr></table></figure><h2 id="Java源码中的开方"><a href="#Java源码中的开方" class="headerlink" title="Java源码中的开方"></a>Java源码中的开方</h2><p>开始一直以为Java源码中<code>Math.sqrt</code>方法使用的是牛顿迭代法来实现的。最近研究源码，发现并不是这样。特地研究记录一下。</p><p>我们跟踪<code>Math.sqrt</code>源码，会发现它其实调用的<code>StrictMath</code>的<code>sqrt</code>方法，此方法为<code>native</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> a)</span></span>;</span><br></pre></td></tr></table></figure><p>因此我们需要查找它的具体实现了，这就需要找到<code>openjdk</code>源码了，其实现位于<code>openjdk\jdk\src\share\native\java\lang\fdlibm\src\e_sqrt.c</code>路径下。</p><p>当然我们也可以在线查看，文件如下 <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/native/java/lang/fdlibm/src/e_sqrt.c">e_sqrt.c</a>。</p><p>我们可以看到对于开方的操作，其源码实际是使用了一种叫<code>Bit by bit method</code>，我这儿称为逐位法。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-698.png" alt="upload successful"></p><p>根据上图，我们来看下该方法的优势及特点吧。</p><blockquote><p>Bit by bit method using integer arithmetic. (Slow, but portable)</p></blockquote><p>源码中提到该方法虽然“慢”但合适，其相关原理如下。</p><p><strong>归一化</strong></p><p>在 $[1,4)$ 中以 $2$ 的偶数次幂缩放 $x$ 到 $y$ :</p><p>求一个整数 $k$，使 $1 \leq (y=x * 2^{2k}) &lt; 4$ ，</p><p>即 $\sqrt{x} = 2^k * \sqrt{y}$</p><p><strong>逐位计算</strong></p><p>设 $q_i =\sqrt{y}$ 在二进制点($q_0 = 1$)后截断到 $i$ 位，</p><p>$s_i=2q_i$ 并且 $y_i=2^{i+1}(y-q_i^2)$.  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (1)</p><p>要从 $q_{i+1}$ 计算 $q_i$，首先要检查是否</p><p>$(q_i+2^{-(i+1)})^2 \leq y$.  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (2)</p><p>如果 (2) 式结果为 <code>false</code>，就有 $q_{i+1}=q_i$，否则 $q_{i+1}=q_i+2^{-(i+1)}$.</p><p>通过一些代数运算，不难看出 (2) 式等价于</p><p>$s_i+2^{-(i+1)} \leq y_i$.   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (3)</p><p>变为 (3) 式的优点是，$s_i$ 和 $y_i$ 可以用递归式计算:</p><p>如果 (3) 式为<code>false</code></p><p>$s_{i+1}=s_i$，$y_{i+1}=y_i$； &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (4)</p><p>否则</p><p>$s_{i+1}=s_i+2^{-i}$，$y_{i+1}=y_i-s_i-2^{-(i+1)}$； &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (4)</p><p>用归纳法可以很容易地证明 (4) 和 (5)。因为 (3) 的左边只包含 $i+2$ 位，所以 (3) 中不需要进行完整的(53-bit)比较。</p><p><strong>最终</strong></p><p>在生成53位结果后，我们再计算一个位。连同余数，我们可以确定结果是正确的，大于1/2ulp，还是小于1/2ulp(它永远不会等于1/2ulp)。</p><p>四舍五入可以通过检查 <code>huge</code> + <code>tiny</code> 是否等于 <code>huge</code>，以及对于某个浮点数“huge”和“tiny”，<code>huge</code> - <code>tiny</code> 是否等于 <code>huge</code> 来检测。</p><p>上面的算法我们可以通过一个简单例子来理解。</p><p>假设现在我们要求 $\sqrt{36}$ 的根。</p><p>根据第一步得到，$1 \leq y = 36*2^{-4}=2.25_{2(10.01)}&lt;4$。</p><p>迭代：</p><p>$q_0=1_{2(1)}$，初始化</p><p>$q_1=1.5_{2(1.1)}$，$(1+0.5)^2 \leq 2.25$</p><p>$q_2=1.5_{2(1.1)}$，$(1.5+0.25)^2 &gt; 2.25$</p><p>$q_3=1.5_{2(1.1)}$，$(1.5+0.125)^2 &gt; 2.25$</p><p>……</p><p>最终 $\sqrt{y} = 1.5$， $\sqrt{36}=1.5*2^2= 6$。</p><p>可以看出这种方法不同于牛顿迭代法，它将带求解的数映射于 $[1,4)$ 范围内，通过逐位计算，逐步缩小解的精度，逼近结果。</p><p>因为以上迭代过程涉及到平方的操作，为了优化这一点，在逐位计算这一步，使用归纳法消除了平方操作。</p><p>可以知道这种逐位计算的方法求解收敛速度某些时候或许比不上牛顿迭代法，但避免了许多乘法和除法操作，所以鲁棒性很好。</p><p>源码处理的double数据有52位有效位，在处理时将其分成了高位和低位分开处理，涉及到许多位运算，我们这儿不做详细讨论。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;fdlibm.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC__</span></span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">const</span> <span class="keyword">double</span>    one     = <span class="number">1.0</span>, tiny=<span class="number">1.0e-300</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">double</span>  one     = <span class="number">1.0</span>, tiny=<span class="number">1.0e-300</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __STDC__</span></span><br><span class="line">        <span class="keyword">double</span> __ieee754_sqrt(<span class="keyword">double</span> x)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="keyword">double</span> __ieee754_sqrt(x)</span><br><span class="line">        <span class="keyword">double</span> x;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">double</span> z;</span><br><span class="line">        <span class="keyword">int</span>     sign = (<span class="keyword">int</span>)<span class="number">0x80000000</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> r,t1,s1,ix1,q1;</span><br><span class="line">        <span class="keyword">int</span> ix0,s0,q,m,t,i;</span><br><span class="line"></span><br><span class="line">        ix0 = __HI(x);                  <span class="comment">/* high word of x */</span></span><br><span class="line">        ix1 = __LO(x);          <span class="comment">/* low word of x */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* take care of Inf and NaN */</span></span><br><span class="line">        <span class="keyword">if</span>((ix0&amp;<span class="number">0x7ff00000</span>)==<span class="number">0x7ff00000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x*x+x;               <span class="comment">/* sqrt(NaN)=NaN, sqrt(+inf)=+inf</span></span><br><span class="line"><span class="comment">                                           sqrt(-inf)=sNaN */</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* take care of zero */</span></span><br><span class="line">        <span class="keyword">if</span>(ix0&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(((ix0&amp;(~sign))|ix1)==<span class="number">0</span>) <span class="keyword">return</span> x;<span class="comment">/* sqrt(+-0) = +-0 */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ix0&lt;<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (x-x)/(x-x);             <span class="comment">/* sqrt(-ve) = sNaN */</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/* normalize x */</span></span><br><span class="line">        m = (ix0&gt;&gt;<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) &#123;                              <span class="comment">/* subnormal x */</span></span><br><span class="line">            <span class="keyword">while</span>(ix0==<span class="number">0</span>) &#123;</span><br><span class="line">                m -= <span class="number">21</span>;</span><br><span class="line">                ix0 |= (ix1&gt;&gt;<span class="number">11</span>); ix1 &lt;&lt;= <span class="number">21</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;(ix0&amp;<span class="number">0x00100000</span>)==<span class="number">0</span>;i++) ix0&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            m -= i<span class="number">-1</span>;</span><br><span class="line">            ix0 |= (ix1&gt;&gt;(<span class="number">32</span>-i));</span><br><span class="line">            ix1 &lt;&lt;= i;</span><br><span class="line">        &#125;</span><br><span class="line">        m -= <span class="number">1023</span>;      <span class="comment">/* unbias exponent */</span></span><br><span class="line">        ix0 = (ix0&amp;<span class="number">0x000fffff</span>)|<span class="number">0x00100000</span>;</span><br><span class="line">        <span class="keyword">if</span>(m&amp;<span class="number">1</span>)&#123;        <span class="comment">/* odd m, double x to make it even */</span></span><br><span class="line">            ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">            ix1 += ix1;</span><br><span class="line">        &#125;</span><br><span class="line">        m &gt;&gt;= <span class="number">1</span>;        <span class="comment">/* m = [m/2] */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* generate sqrt(x) bit by bit */</span></span><br><span class="line">        ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">        ix1 += ix1;</span><br><span class="line">        q = q1 = s0 = s1 = <span class="number">0</span>;   <span class="comment">/* [q,q1] = sqrt(x) */</span></span><br><span class="line">        r = <span class="number">0x00200000</span>;         <span class="comment">/* r = moving bit from right to left */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(r!=<span class="number">0</span>) &#123;</span><br><span class="line">            t = s0+r;</span><br><span class="line">            <span class="keyword">if</span>(t&lt;=ix0) &#123;</span><br><span class="line">                s0   = t+r;</span><br><span class="line">                ix0 -= t;</span><br><span class="line">                q   += r;</span><br><span class="line">            &#125;</span><br><span class="line">            ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">            ix1 += ix1;</span><br><span class="line">            r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = sign;</span><br><span class="line">        <span class="keyword">while</span>(r!=<span class="number">0</span>) &#123;</span><br><span class="line">            t1 = s1+r;</span><br><span class="line">            t  = s0;</span><br><span class="line">            <span class="keyword">if</span>((t&lt;ix0)||((t==ix0)&amp;&amp;(t1&lt;=ix1))) &#123;</span><br><span class="line">                s1  = t1+r;</span><br><span class="line">                <span class="keyword">if</span>(((t1&amp;sign)==sign)&amp;&amp;(s1&amp;sign)==<span class="number">0</span>) s0 += <span class="number">1</span>;</span><br><span class="line">                ix0 -= t;</span><br><span class="line">                <span class="keyword">if</span> (ix1 &lt; t1) ix0 -= <span class="number">1</span>;</span><br><span class="line">                ix1 -= t1;</span><br><span class="line">                q1  += r;</span><br><span class="line">            &#125;</span><br><span class="line">            ix0 += ix0 + ((ix1&amp;sign)&gt;&gt;<span class="number">31</span>);</span><br><span class="line">            ix1 += ix1;</span><br><span class="line">            r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* use floating add to find out rounding direction */</span></span><br><span class="line">        <span class="keyword">if</span>((ix0|ix1)!=<span class="number">0</span>) &#123;</span><br><span class="line">            z = one-tiny; <span class="comment">/* trigger inexact flag */</span></span><br><span class="line">            <span class="keyword">if</span> (z&gt;=one) &#123;</span><br><span class="line">                z = one+tiny;</span><br><span class="line">                <span class="keyword">if</span> (q1==(<span class="keyword">unsigned</span>)<span class="number">0xffffffff</span>) &#123; q1=<span class="number">0</span>; q += <span class="number">1</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (z&gt;one) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (q1==(<span class="keyword">unsigned</span>)<span class="number">0xfffffffe</span>) q+=<span class="number">1</span>;</span><br><span class="line">                    q1+=<span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    q1 += (q1&amp;<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ix0 = (q&gt;&gt;<span class="number">1</span>)+<span class="number">0x3fe00000</span>;</span><br><span class="line">        ix1 =  q1&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((q&amp;<span class="number">1</span>)==<span class="number">1</span>) ix1 |= sign;</span><br><span class="line">        ix0 += (m &lt;&lt;<span class="number">20</span>);</span><br><span class="line">        __HI(z) = ix0;</span><br><span class="line">        __LO(z) = ix1;</span><br><span class="line">        <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他开方算法"><a href="#其他开方算法" class="headerlink" title="其他开方算法"></a>其他开方算法</h2><p><code>openjdk</code> 源码中除了上述方法外，在注释中还提供了两种开方方法，第一种部分使用了牛顿迭代，涉及四个部分。第二种方法使用reciproot迭代来避免除法，但是需要更多的乘法。</p><p>感兴趣的同学可以查看 </p><p><a href="https://people.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF">IEEE754.PDF</a></p><p><a href="https://people.eecs.berkeley.edu/~wkahan/ieee754status/reciprt.pdf">reciprt.pdf</a></p><p>等论文进行了解。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章我们了解了一些开方方法，并分析了一些源码，可以发现数学与编程及算法的巧妙之处。对我们今后的工作学习都是有较大帮助的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/native/java/lang/fdlibm/src/e_sqrt.c">e_sqrt.c</a></p><p><a href="https://people.eecs.berkeley.edu/">Berkeley | EECS</a></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前几天看到一道题目，是关于“对整数 n 开平方，不使用Math.sqrt实现”，感觉蛮有意思的，其解法用到了牛顿迭代法（Newton’s Method）。&lt;/p&gt;
&lt;p&gt;就顺便研究了一下该解法和其他一些解法，特来分享记录一下。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="sqrt" scheme="https://www.sakuratears.top/tags/sqrt/"/>
    
    <category term="平方根" scheme="https://www.sakuratears.top/tags/%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    
  </entry>
  
  <entry>
    <title>限流算法之漏桶算法、令牌桶算法</title>
    <link href="https://www.sakuratears.top/blog/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B9%8B%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E3%80%81%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95.html"/>
    <id>https://www.sakuratears.top/blog/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%B9%8B%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95%E3%80%81%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95.html</id>
    <published>2021-05-07T14:39:52.000Z</published>
    <updated>2021-05-07T14:43:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在分布式环境下，为了应对高并发，通常有以下几种手段，优先级从高到低依次为缓存、限流、降级、熔断。</p><p>缓存即是缓存热点数据，以便请求来时可以做出快速反映，减小数据库压力。</p><p>降级和熔断广义上来讲也算是限流的一种，本质上也是阻止请求进来。</p><p>今天这篇文章我们主要来讲一讲限流的两种算法以及实现方式。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="限流的意义"><a href="#限流的意义" class="headerlink" title="限流的意义"></a>限流的意义</h2><p>对于一个对外服务应用，我们为什么要限流？它的意义在哪里呢？</p><p>我们知道，对于对外应用，有很多情况会导致流量增大：</p><ul><li>服务用户量的不断增长</li><li>针对服务的恶意攻击</li><li>各种活动等</li></ul><p>需要注意流量变“大”是相对的，相对于我们服务所能承受的流量。</p><p>比如我们服务支持10000QPS的处理能力，如果每秒处理5000个请求，显然不大，但如果服务只支持1000QPS的处理能力，那每秒5000的请求对于服务器显然“大”了。</p><p>如果长时间这样，显然会导致我们的服务熔断或挂掉，为了保证服务器稳定，我们自然要对流量进行控制，这就是限流。</p><p>PS：限流的优先级在缓存之后，因此对于这种情况，我们应首先尽可能的提高服务的QPS能力，优化逻辑，缓存热点数据等。</p><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><h3 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h3><p>漏桶算法（Leaky Bucket）的原理比较简单：水（请求）先进入到漏桶里，人为设置一个最大出水速率，漏桶以&lt;=出水速率的速度出水，当水流入速度过大会直接溢出（拒绝服务）。</p><p>如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-694.png" alt="upload successful"></p><p>该算法思想如下：</p><ol><li>比如设置请求速率为1000QPS，容量池为5000，当请求小于1000QPS时，正常进行处理；</li><li>当请求为2000QPS时，每秒处理1000个请求后会剩下1000个请求；</li><li>当第5s时，容量已满，后续新请求丢弃，直到容量池内有请求被处理掉。</li></ol><p>可以看到这种算法强制限制请求速率，缺点是十分明显的：</p><ul><li>无法面对突发的大流量 —— 比如上述例子，设置请求速率为1000QPS，应用在绝大多数情况下请求小于1000QPS，突然某天活动，用户访问激增，那么此种限流会导致大多数用户无法正常访问服务。</li><li>无法有效利用资源 —— 虽然我们服务处理能力是1000QPS，但这不是绝对的，比如前6s为2000QPS，后面时间为500QPS，一小段时间服务器资源是可以承受这段请求压力的，但是漏桶算法这种情况下会丢弃一部分请求。</li></ul><h3 id="相关代码实现"><a href="#相关代码实现" class="headerlink" title="相关代码实现"></a>相关代码实现</h3><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeakyBucketLimit</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 速率 10QPS</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> RATE = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大容量50</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> BURST = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求最新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTime = System.currentTimeMillis() /<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        count = (<span class="keyword">int</span>)Math.max(<span class="number">0</span>,count - (now - lastTime)*RATE);</span><br><span class="line">        lastTime = now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">limit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        refresh();</span><br><span class="line">        <span class="keyword">if</span>(count &lt; BURST)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LeakyBucketLimit limit = <span class="keyword">new</span> LeakyBucketLimit();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;-&gt;&quot;</span>+limit.limit());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-695.png" alt="upload successful"></p><p>可以看到当达到容量50时请求就会被拒绝。</p><p>PS：需要注意的是，实际中当请求完成后，会被释放，池子里请求是动态增加减少的过程。</p><p>通常来说，实际中使用漏桶算法来进行限流的场景并不多。</p><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><h3 id="算法内容-1"><a href="#算法内容-1" class="headerlink" title="算法内容"></a>算法内容</h3><p>令牌桶算法(Token Bucket)是网络流量整形（Traffic Shaping）和限流（Rate Limiting）中最常使用的一种算法，它可用于控制发送到网络上数据的数量并允许突发数据的发送。</p><p>令牌桶算法可以认为是对漏桶算法的一种改进，主要在于令牌桶算法在限制平均调用速率的同时还允许一定程度的突发调用。</p><p>令牌桶算法的实现原理如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-696.png" alt="upload successful"></p><p>整个过程如下：</p><ol><li>系统以恒定的速率产生令牌，然后将令牌放入令牌桶中；</li><li>令牌桶有一个容量，当令牌桶满了的时候，再向其中放入的令牌就会被丢弃；</li><li>每次一个请求过来，需要从令牌桶中获取一个令牌，假设有令牌，那么提供服务；假设没有令牌，那么拒绝服务。</li></ol><p>现在我们来看下为什么令牌桶可以防止一定程度上的突发流量。</p><p>假设我们想要调用速率为1000QPS，那么设置令牌的生成速度1000个/s，第一秒请求800个，那么会余下200个令牌，在第二秒请求时，就支持1200个请求了。</p><p>需要注意的是令牌的生成并不是无上限的，也必须有个容量，比如令牌的生成速度1000个/s，前5秒请求200个/s，那么第6秒支持4000个请求，但这远超系统承受能力，因此令牌桶算法需要设置桶中令牌的上限。</p><p>由于令牌桶算法允许一定程度的突发调用，因此在限流场景里比漏桶算法更加广泛。</p><h3 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a>RateLimiter</h3><p><strong>Google</strong>开源工具包<strong>Guava</strong>提供了限流工具类<code>RateLimiter</code>，该类就是基于令牌桶算法来完成限流，非常易于使用。</p><p><code>RateLimiter</code>经常用于限制对一些物理资源或者逻辑资源的访问速率。它支持两种获取<code>permits</code>接口，一种是如果拿不到立刻返回false，一种会阻塞等待一段时间看能不能拿到。</p><p><code>RateLimiter</code>和 <strong>Java</strong> 中的信号量(<code>java.util.concurrent.Semaphore</code>)类似，<code>Semaphore</code>通常用于限制并发量。</p><p>我们通过<strong>Maven</strong>引入相关<strong>Jar</strong>包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到<code>RateLimiter</code>，我们在源码注释中可以看到如下一些代码及说明。</p><p>比如我们需要处理一个任务列表，但我们不希望每秒的任务提交超过两个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> RateLimiter rateLimiter = RateLimiter.create(<span class="number">2.0</span>); <span class="comment">// rate is &quot;2 permits per second&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitTasks</span><span class="params">(List&lt;Runnable&gt; tasks, Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Runnable task : tasks) &#123;</span><br><span class="line">        rateLimiter.acquire(); <span class="comment">// may wait</span></span><br><span class="line">        executor.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想象下我们制造了一个数据流，并希望以每秒5kb的速率处理它。可以通过要求每个字节代表一个许可，然后指定每秒5000个许可来完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每秒5000个许可</span></span><br><span class="line"><span class="keyword">final</span> RateLimiter rateLimiter = RateLimiter.create(<span class="number">5000.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitPacket</span><span class="params">(<span class="keyword">byte</span>[] packet)</span> </span>&#123;</span><br><span class="line">    rateLimiter.acquire(packet.length);</span><br><span class="line">    networkService.send(packet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一点非常重要，那就是请求的许可数从来不会影响到请求本身的限制（调用acquire(1) 和调用acquire(1000) 将得到相同的限制效果，如果存在这样的调用的话），但会影响下一次请求的限制，也就是说，如果一个高开销的任务抵达一个空闲的<code>RateLimiter</code>，它会被马上许可，但是下一个请求会经历额外的限制，从而来偿付高开销任务。注意：<code>RateLimiter</code> 并不提供公平性的保证。</p><p>因此，可以认为<code>RateLimiter</code>支持预消费的能力。突发流量的处理，在令牌桶算法中有两种方式，一种是有足够的令牌才能消费，一种是先消费后还令牌。</p><h3 id="RateLimiter相关源码"><a href="#RateLimiter相关源码" class="headerlink" title="RateLimiter相关源码"></a>RateLimiter相关源码</h3><p><code>RateLimiter</code>其实是一个<code>abstract类</code>，但是它提供了几个<code>static</code>方法用于创建<code>RateLimiter</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分代码略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个稳定输出令牌的RateLimiter，保证了平均每秒不超过permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * 当请求到来的速度超过了permitsPerSecond，保证每秒只处理permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * 当这个RateLimiter使用较少(即请求到来速度小于permitsPerSecond)，会囤积最多permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permitsPerSecond</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter <span class="title">create</span><span class="params">(<span class="keyword">double</span> permitsPerSecond)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个稳定输出令牌的RateLimiter，保证了平均每秒不超过permitsPerSecond个请求</span></span><br><span class="line"><span class="comment">     * 还包含一个预热期(warmup period),预热期内，RateLimiter会平滑的将其释放令牌的速率加大，直到起达到最大速率</span></span><br><span class="line"><span class="comment">     * 同样，如果RateLimiter在预热期没有足够的请求,则起速率会逐渐降低到“冷却”状态</span></span><br><span class="line"><span class="comment">     * 设计这个的意图是为了满足那种资源提供方需要预热时间，而不是每次访问都能提供稳定速率的服务的情况(比如带缓存服务，需要定期刷新缓存的)</span></span><br><span class="line"><span class="comment">     * 参数warmupPeriod和unit决定了其从“冷却”状态到达最大速率的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> permitsPerSecond</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> warmupPeriod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter <span class="title">create</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">long</span> warmupPeriod, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部调用的 create(double permitsPerSecond, long warmupPeriod, TimeUnit unit)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RateLimiter <span class="title">create</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, Duration warmupPeriod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> create(permitsPerSecond, toNanosSaturated(warmupPeriod), TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RateLimiter</code>提供了两个获取令牌的方法，不带参数表示获取一个令牌。如果没有令牌则一直等待，返回等待的时间(单位为秒)，没有被限流则直接返回0.0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span></span>;</span><br></pre></td></tr></table></figure><p>尝试获取令牌，分为待超时时间和不带超时时间两种。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试获取一个令牌,立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//尝试获取permits个令牌,立即返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits)</span></span>;</span><br><span class="line"><span class="comment">//尝试获取1个令牌,带超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span>;</span><br><span class="line"><span class="comment">//尝试获取permits个令牌,带超时时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span></span>;</span><br></pre></td></tr></table></figure><p>我们从<code>acquire</code>来看<code>RateLimiter</code>如何实现限流。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> microsToWait = reserve(permits);</span><br><span class="line">    stopwatch.sleepMicrosUninterruptibly(microsToWait);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * microsToWait / SECONDS.toMicros(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserve</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    checkPermits(permits);</span><br><span class="line">    <span class="keyword">synchronized</span> (mutex()) &#123;<span class="comment">//并发加锁</span></span><br><span class="line">      <span class="keyword">return</span> reserveAndGetWaitLength(permits, stopwatch.readMicros());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserveAndGetWaitLength</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> momentAvailable = reserveEarliestAvailable(permits, nowMicros);</span><br><span class="line">    <span class="keyword">return</span> max(momentAvailable - nowMicros, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">reserveEarliestAvailable</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> nowMicros)</span></span>;</span><br></pre></td></tr></table></figure><p><code>RateLimiter</code>的具体实现<code>SmoothRateLimiter</code>里的<code>reserveEarliestAvailable</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">reserveEarliestAvailable</span><span class="params">(<span class="keyword">int</span> requiredPermits, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//补充令牌</span></span><br><span class="line">    resync(nowMicros);</span><br><span class="line">    <span class="comment">//本次请求获取令牌时间</span></span><br><span class="line">    <span class="keyword">long</span> returnValue = nextFreeTicketMicros;</span><br><span class="line">    <span class="comment">//本次请求能从存储的令牌桶中获取的数量（取的为请求数与存储数的最小值）</span></span><br><span class="line">    <span class="keyword">double</span> storedPermitsToSpend = min(requiredPermits, <span class="keyword">this</span>.storedPermits);</span><br><span class="line">    <span class="comment">//本次请求需要额外补充的令牌（如果存储&gt;请求，该值为0；如果存储&lt;请求，该值&gt;0）</span></span><br><span class="line">    <span class="keyword">double</span> freshPermits = requiredPermits - storedPermitsToSpend;</span><br><span class="line">    <span class="comment">//使用存储令牌等待时间</span></span><br><span class="line">    <span class="keyword">long</span> waitMicros =</span><br><span class="line">        storedPermitsToWaitTime(<span class="keyword">this</span>.storedPermits, storedPermitsToSpend)</span><br><span class="line">            + (<span class="keyword">long</span>) (freshPermits * stableIntervalMicros);</span><br><span class="line">    <span class="comment">//计算下次请求获取令牌时间</span></span><br><span class="line">    <span class="keyword">this</span>.nextFreeTicketMicros = LongMath.saturatedAdd(nextFreeTicketMicros, waitMicros);</span><br><span class="line">    <span class="comment">//令牌存量减少</span></span><br><span class="line">    <span class="keyword">this</span>.storedPermits -= storedPermitsToSpend;</span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">storedPermitsToWaitTime</span><span class="params">(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake)</span></span>;</span><br></pre></td></tr></table></figure><p><code>storedPermitsToWaitTime</code>方法有两种实现，因为获取存储的令牌由于资源不足有可能需要等待时间。</p><p>一种是资源确实不足，这些剩余的资源我们是可以继续使用的；另一种是提供资源的服务过去还没准备好（预热期）。</p><p>为此，<code>RateLimiter</code>对于<code>storedPermitsToWaitTime</code>有两种实现策略，即<code>SmoothBursty</code>和<code>SmoothWarmingUp</code>。</p><h4 id="SmoothBursty"><a href="#SmoothBursty" class="headerlink" title="SmoothBursty"></a>SmoothBursty</h4><p><code>SmoothBursty</code>使用<code>storedPermits</code>不需要额外等待时间。并且默认<code>maxBurstSeconds</code>为1，因此<code>maxPermits</code>为<code>permitsPerSecond</code>，即最多可以存储1秒的剩余令牌，比如QPS=5，则maxPermits=5。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SmoothBursty</span> <span class="keyword">extends</span> <span class="title">SmoothRateLimiter</span> </span>&#123;</span><br><span class="line"><span class="comment">/** The work (permits) of how many seconds can be saved up if this RateLimiter is unused? */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> maxBurstSeconds;</span><br><span class="line"></span><br><span class="line">SmoothBursty(SleepingStopwatch stopwatch, <span class="keyword">double</span> maxBurstSeconds) &#123;</span><br><span class="line">    <span class="keyword">super</span>(stopwatch);</span><br><span class="line">    <span class="keyword">this</span>.maxBurstSeconds = maxBurstSeconds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSetRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> stableIntervalMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> oldMaxPermits = <span class="keyword">this</span>.maxPermits;</span><br><span class="line">    maxPermits = maxBurstSeconds * permitsPerSecond;</span><br><span class="line">    <span class="keyword">if</span> (oldMaxPermits == Double.POSITIVE_INFINITY) &#123;</span><br><span class="line">    <span class="comment">// if we don&#x27;t special-case this, we would get storedPermits == NaN, below</span></span><br><span class="line">    storedPermits = maxPermits;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    storedPermits =</span><br><span class="line">        (oldMaxPermits == <span class="number">0.0</span>)</span><br><span class="line">            ? <span class="number">0.0</span> <span class="comment">// initial state</span></span><br><span class="line">            : storedPermits * maxPermits / oldMaxPermits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">storedPermitsToWaitTime</span><span class="params">(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">coolDownIntervalMicros</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stableIntervalMicros;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SmoothWarmingUp"><a href="#SmoothWarmingUp" class="headerlink" title="SmoothWarmingUp"></a>SmoothWarmingUp</h4><p><code>SmoothWarmingUp</code>的<code>maxPermits</code>等于预热(warmup)期间能产生的令牌数，比如QPS=4，warmup为2秒，则maxPermits=8。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SmoothWarmingUp</span> <span class="keyword">extends</span> <span class="title">SmoothRateLimiter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> warmupPeriodMicros;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The slope of the line from the stable interval (when permits == 0), to the cold interval</span></span><br><span class="line"><span class="comment">   * (when permits == maxPermits)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> slope;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> thresholdPermits;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> coldFactor;</span><br><span class="line"></span><br><span class="line">  SmoothWarmingUp(</span><br><span class="line">      SleepingStopwatch stopwatch, <span class="keyword">long</span> warmupPeriod, TimeUnit timeUnit, <span class="keyword">double</span> coldFactor) &#123;</span><br><span class="line">    <span class="keyword">super</span>(stopwatch);</span><br><span class="line">    <span class="keyword">this</span>.warmupPeriodMicros = timeUnit.toMicros(warmupPeriod);</span><br><span class="line">    <span class="keyword">this</span>.coldFactor = coldFactor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doSetRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> stableIntervalMicros)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> oldMaxPermits = maxPermits;</span><br><span class="line">    <span class="keyword">double</span> coldIntervalMicros = stableIntervalMicros * coldFactor;</span><br><span class="line">    thresholdPermits = <span class="number">0.5</span> * warmupPeriodMicros / stableIntervalMicros;</span><br><span class="line">    maxPermits =</span><br><span class="line">        thresholdPermits + <span class="number">2.0</span> * warmupPeriodMicros / (stableIntervalMicros + coldIntervalMicros);</span><br><span class="line">    slope = (coldIntervalMicros - stableIntervalMicros) / (maxPermits - thresholdPermits);</span><br><span class="line">    <span class="keyword">if</span> (oldMaxPermits == Double.POSITIVE_INFINITY) &#123;</span><br><span class="line">      <span class="comment">// if we don&#x27;t special-case this, we would get storedPermits == NaN, below</span></span><br><span class="line">      storedPermits = <span class="number">0.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      storedPermits =</span><br><span class="line">          (oldMaxPermits == <span class="number">0.0</span>)</span><br><span class="line">              ? maxPermits <span class="comment">// initial state is cold</span></span><br><span class="line">              : storedPermits * maxPermits / oldMaxPermits;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">storedPermitsToWaitTime</span><span class="params">(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> availablePermitsAboveThreshold = storedPermits - thresholdPermits;</span><br><span class="line">    <span class="keyword">long</span> micros = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// measuring the integral on the right part of the function (the climbing line)</span></span><br><span class="line">    <span class="keyword">if</span> (availablePermitsAboveThreshold &gt; <span class="number">0.0</span>) &#123;</span><br><span class="line">      <span class="keyword">double</span> permitsAboveThresholdToTake = min(availablePermitsAboveThreshold, permitsToTake);</span><br><span class="line">      <span class="comment">// TODO(cpovirk): Figure out a good name for this variable.</span></span><br><span class="line">      <span class="keyword">double</span> length =</span><br><span class="line">          permitsToTime(availablePermitsAboveThreshold)</span><br><span class="line">              + permitsToTime(availablePermitsAboveThreshold - permitsAboveThresholdToTake);</span><br><span class="line">      micros = (<span class="keyword">long</span>) (permitsAboveThresholdToTake * length / <span class="number">2.0</span>);</span><br><span class="line">      permitsToTake -= permitsAboveThresholdToTake;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// measuring the integral on the left part of the function (the horizontal line)</span></span><br><span class="line">    micros += (<span class="keyword">long</span>) (stableIntervalMicros * permitsToTake);</span><br><span class="line">    <span class="keyword">return</span> micros;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">permitsToTime</span><span class="params">(<span class="keyword">double</span> permits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stableIntervalMicros + permits * slope;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">coolDownIntervalMicros</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> warmupPeriodMicros / maxPermits;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RateLimiter的限制"><a href="#RateLimiter的限制" class="headerlink" title="RateLimiter的限制"></a>RateLimiter的限制</h3><p>需要注意的是<code>RateLimiter</code>虽然很强大，但是它只支持单机环境。</p><p>比如我们服务集群中有5台服务器，要保证1000QPS的集群接口调用量，<code>RateLimiter</code>就无法实现了。</p><p>集群控流通常的做法是采用<strong>Redis</strong>来进行限制，主要有两种方式：</p><ul><li>固定窗口计数</li><li>结合lua脚本，实现分布式的令牌桶算法</li></ul><p>我们这儿就暂不做详细讨论。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文我们介绍了漏桶算法和令牌桶算法，了解了它们各自的特点。</p><p>对漏桶算法进行了简单的代码实现，对令牌桶算法我们分析了<strong>Guava</strong>提供了限流工具类<code>RateLimiter</code>。</p><p>除了讨论了它们的特点，也说明了它们的一些不足。</p><p>不过无论哪种限流算法，都有自己的应用之处，具体场景需要具体分析。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在分布式环境下，为了应对高并发，通常有以下几种手段，优先级从高到低依次为缓存、限流、降级、熔断。&lt;/p&gt;
&lt;p&gt;缓存即是缓存热点数据，以便请求来时可以做出快速反映，减小数据库压力。&lt;/p&gt;
&lt;p&gt;降级和熔断广义上来讲也算是限流的一种，本质上也是阻止请求进来。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis分布式锁之红锁（RedLock）</title>
    <link href="https://www.sakuratears.top/blog/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%8B%E7%BA%A2%E9%94%81%EF%BC%88RedLock%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%8B%E7%BA%A2%E9%94%81%EF%BC%88RedLock%EF%BC%89.html</id>
    <published>2021-05-07T14:37:00.000Z</published>
    <updated>2021-05-07T14:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在许多不同的进程必须以互斥的方式操作共享资源的环境中，分布式锁是非常有用的。</p><p>我们在使用<code>Redis</code>做分布式锁时，使用的一般都是比较简单的方法。</p><p>本文提供一个更规范的算法来实现<code>Redis</code>分布式锁,名为<code>Redlock</code>的算法。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="分布式锁特点"><a href="#分布式锁特点" class="headerlink" title="分布式锁特点"></a>分布式锁特点</h2><p>我们知道，分布式锁应保证以下三点：</p><ul><li>安全性：互斥性。在任何给定时刻，只有一个客户端可以持有一个锁。</li><li>可靠性 A：无死锁。最终，总是有可能获得一个锁，即使锁定资源的客户机崩溃或被分区。</li><li>可靠性 B：容错性。只要大部分Redis节点都是正常的，客户端就可以获取和释放锁。</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在<code>Redis</code>服务中，一般由<code>Redis</code>集群提供服务，设置为主从模式（Master-Slave），主从<code>Redis</code>之间的信息拷贝是异步完成的。</p><p>我们试想，如果当我们请求分布式锁的时候成功了，但是此时 <code>Slave</code> 还没有复制我们的“锁”，如果此时 <code>Master</code> 由于某些原因宕机，<code>Slave</code>服务器变为<code>Master</code>，我们应用继续请求锁的时候，就会成功创建。这就出现了同一个锁获取了不止一次。</p><p>这样肯定会有一些问题。</p><h2 id="单机实例获取锁"><a href="#单机实例获取锁" class="headerlink" title="单机实例获取锁"></a>单机实例获取锁</h2><p>我们先来看下如何在<code>Redis</code>单例模式下实现分布式锁。</p><p>获得锁的主要命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure><p>该命令只在key不存在(NX选项)时设置该key，其过期时间为30000毫秒(PX选项)。该键值被设置为“myrandomvalue”。这个值必须在所有客户端和所有锁请求中是唯一的。使用随机值的目的是为了安全的释放锁。</p><p>释放锁的主要命令如下，我们可以用<code>Lua</code>脚本来实现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[1]) == ARGV[1] <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[1])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>为了避免删除另一个客户端创建的锁，这一点很重要。例如，一个客户端可能获得了锁，但在某些操作中阻塞的时间超过了锁的有效时间(key将过期的时间)，然后删除其他客户端已经获得的锁。所以仅仅使用<code>DEL</code>是不安全的，因为一个客户端可能会删除另一个客户端的锁。在上面的脚本中，每个锁都是用随机字符串“签名”的，所以只有当锁仍然是由试图删除它的客户端设置的锁时，锁才会被删除。</p><p>随机字符串的选取我们可以使用一些生成不重复字符串的加密算法，如 <strong>MD5</strong>，或者更简便的可以使用 服务器地址 + Unix 时间戳来表示。</p><p>可以看到在单机模式下，这种方案是安全可用的。</p><h2 id="RedLock算法"><a href="#RedLock算法" class="headerlink" title="RedLock算法"></a>RedLock算法</h2><p>在分布式版本的算法中，我们假设我们有N个<code>Redis master</code>。这些节点是完全独立的，所以我们不用复制等其他处理。</p><p>我们已经描述了如何在单个实例中安全地获取和释放锁。我们想当然地认为，该算法将使用该方法在单个实例中获取和释放锁。</p><p>在我们的例子中，我们设置<code>N=5</code>，所以我们需要在不同的计算机或虚拟机上运行5个<code>Redis master</code>，以确保它们以一种基本独立的方式失败。</p><p>为了获取锁，客户端执行以下操作：</p><ol><li>它以毫秒为单位获取当前时间。</li><li>它尝试在所有N个实例中依次获取锁，在所有实例中使用相同的 <strong>key</strong> 和 <strong>random_value</strong> 。在步骤2中，当在每个实例中设置锁时，客户端使用一个比锁自动释放总时间小的超时来获取锁。例如，如果自动释放时间是10秒，则超时时间可以在 5~50 毫秒范围内。如果一个实例不可用，我们应该尽快尝试与下一个实例进行交互。</li><li>客户端通过从当前时间中减去在步骤1中获得的时间戳来计算为了获得锁花费了多少时间。当且仅当客户端能够在大多数实例(至少3个)中获得锁，并且获取锁的总时间小于锁有效时间时，则认为该锁已被获取。</li><li>如果获得了锁，则将其有效时间视为初始有效时间减去经过的时间，如步骤3中计算的那样。</li><li>如果客户端由于某些原因无法获得锁（要么无法锁定<strong>N/2+1</strong>个实例（半数以上），要么有效时间为负数），它将尝试解锁所有实例（甚至是它认为自己无法锁定的实例）。</li></ol><p>对于释放锁，很简单，只要释放所有实例中的锁，不管客户端是否认为自己能够成功锁定给定实例。</p><p>这也是RedLock的基本原理。</p><h2 id="算法的安全性"><a href="#算法的安全性" class="headerlink" title="算法的安全性"></a>算法的安全性</h2><p>我们假设客户端能在大多数<code>Redis</code>实例中获取锁，所有实例都将包含一个存在时间相同的key。但是，<strong>key</strong>是在不同的时间进行设置的，因此<strong>key</strong>的具体过期时间也不同。</p><p>但我们假设设置第一个<code>Redis</code>实例时时间为<strong>T1</strong>，最后一个<code>Redis</code>实例时时间为<strong>T2</strong>，则我们可以认为锁的有效时间 <code> MIN_VALIDITY = TTL - (T2-T1) </code>，即第一个实例剩余过期时间，其他实例都在后面依次过期。</p><p>可以看到在大多数<strong>key</strong>被设置的时间内，另一个客户端将无法获得锁，因为如果半数以上实例的<strong>key</strong>已经存在，那么<strong>N/2+1</strong>个<code>set NX</code>操作将无法成功。因此，如果获得了一个锁，就不可能同时重新获得它。</p><p>然而，我们也希望确保多个客户端同时尝试获取锁不能同时成功。</p><p>如果客户端锁定大多数实例所用的时间接近或大于锁的最大有效时间（<strong>TTL</strong>），它会认为锁无效，并将解锁实例，因此，我们只需要考虑这样一种情况：<strong>客户端能够在一段时间内锁定大多数实例，而这段时间小于有效时间</strong>。</p><p>在这种情况下，对于上面已经表示的参数 <strong>MIN_VALIDITY</strong>，没有客户端能够重新获得锁。因此，只有当锁定大多数实例的时间大于<strong>TTL</strong>时，多个客户端才能同时锁定<strong>N/2+1</strong>个实例，导致锁定无效。</p><p>关于该算法安全性及其他的一些讨论大家可以参考<code>Redis</code>官网的这篇文章 <a href="https://redis.io/topics/distlock">Distributed locks with Redis</a>。</p><h2 id="相关代码实现"><a href="#相关代码实现" class="headerlink" title="相关代码实现"></a>相关代码实现</h2><p><strong>Java</strong>里<strong>Redission</strong>就实现了<strong>RedLock</strong>算法，我们来看下。</p><p>首先 <strong>Maven</strong> 里要引入相关 <strong>Jar</strong> 包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁最大等待时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> WAIT_TIMEOUT = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁持有时间，获取锁后超过这个时间锁会释放，该时间应大于业务逻辑处理时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> LEASE_TIME = <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_KEY = <span class="string">&quot;REDISSON_LOCK_TEST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Config config1 = <span class="keyword">new</span> Config();</span><br><span class="line">        config1.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient1 = Redisson.create(config1);</span><br><span class="line"></span><br><span class="line">        Config config2 = <span class="keyword">new</span> Config();</span><br><span class="line">        config2.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6380&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient2 = Redisson.create(config2);</span><br><span class="line"></span><br><span class="line">        Config config3 = <span class="keyword">new</span> Config();</span><br><span class="line">        config3.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6381&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient3 = Redisson.create(config3);</span><br><span class="line">        <span class="comment">//拿到RLock对象</span></span><br><span class="line">        RLock lock1 = redissonClient1.getLock(LOCK_KEY);</span><br><span class="line">        RLock lock2 = redissonClient2.getLock(LOCK_KEY);</span><br><span class="line">        RLock lock3 = redissonClient3.getLock(LOCK_KEY);</span><br><span class="line">        <span class="comment">//构建redlock</span></span><br><span class="line">        RedissonRedLock redLock = <span class="keyword">new</span> RedissonRedLock(lock1, lock2, lock3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> res = redLock.tryLock(WAIT_TIMEOUT, LEASE_TIME, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                <span class="comment">//do something</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;加锁异常！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            redLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们看下<code>redLock.tryLock</code>方法的实现，相关源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            return tryLockAsync(waitTime, leaseTime, unit).get();</span></span><br><span class="line"><span class="comment">//        &#125; catch (ExecutionException e) &#123;</span></span><br><span class="line"><span class="comment">//            throw new IllegalStateException(e);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    <span class="keyword">long</span> newLeaseTime = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        newLeaseTime = unit.toMillis(waitTime)*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> remainTime = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (waitTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        remainTime = unit.toMillis(waitTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> lockWaitTime = calcLockWaitTime(remainTime);</span><br><span class="line">    <span class="comment">// 允许加锁失败节点个数限制，半数以上（N-(N/2+1)）</span></span><br><span class="line">    <span class="keyword">int</span> failedLocksLimit = failedLocksLimit();</span><br><span class="line">    <span class="comment">// 遍历所有节点通过EVAL命令执行lua加锁</span></span><br><span class="line">    List&lt;RLock&gt; acquiredLocks = <span class="keyword">new</span> ArrayList&lt;&gt;(locks.size());</span><br><span class="line">    <span class="keyword">for</span> (ListIterator&lt;RLock&gt; iterator = locks.listIterator(); iterator.hasNext();) &#123;</span><br><span class="line">        RLock lock = iterator.next();</span><br><span class="line">        <span class="keyword">boolean</span> lockAcquired;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (waitTime == -<span class="number">1</span> &amp;&amp; leaseTime == -<span class="number">1</span>) &#123;</span><br><span class="line">                lockAcquired = lock.tryLock();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> awaitTime = Math.min(lockWaitTime, remainTime);</span><br><span class="line">                lockAcquired = lock.tryLock(awaitTime, newLeaseTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RedisResponseTimeoutException e) &#123;</span><br><span class="line">            unlockInner(Arrays.asList(lock));</span><br><span class="line">            lockAcquired = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            lockAcquired = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (lockAcquired) &#123;</span><br><span class="line">            acquiredLocks.add(lock);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算已经申请锁失败的节点是否已经到达允许加锁失败节点个数限制 （N-(N/2+1)）</span></span><br><span class="line">            <span class="keyword">if</span> (locks.size() - acquiredLocks.size() == failedLocksLimit()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (failedLocksLimit == <span class="number">0</span>) &#123;</span><br><span class="line">                unlockInner(acquiredLocks);</span><br><span class="line">                <span class="keyword">if</span> (waitTime == -<span class="number">1</span> &amp;&amp; leaseTime == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                failedLocksLimit = failedLocksLimit();</span><br><span class="line">                acquiredLocks.clear();</span><br><span class="line">                <span class="comment">// reset iterator</span></span><br><span class="line">                <span class="keyword">while</span> (iterator.hasPrevious()) &#123;</span><br><span class="line">                    iterator.previous();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                failedLocksLimit--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算 目前从各个节点获取锁已经消耗的总时间，如果已经等于最大等待时间，则认定最终申请锁失败，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (remainTime != -<span class="number">1</span>) &#123;</span><br><span class="line">            remainTime -= System.currentTimeMillis() - time;</span><br><span class="line">            time = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                unlockInner(acquiredLocks);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        List&lt;RFuture&lt;Boolean&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;(acquiredLocks.size());</span><br><span class="line">        <span class="keyword">for</span> (RLock rLock : acquiredLocks) &#123;</span><br><span class="line">            RFuture&lt;Boolean&gt; future = ((RedissonLock) rLock).expireAsync(unit.toMillis(leaseTime), TimeUnit.MILLISECONDS);</span><br><span class="line">            futures.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (RFuture&lt;Boolean&gt; rFuture : futures) &#123;</span><br><span class="line">            rFuture.syncUninterruptibly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其相关源码是非常好理解的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简单介绍了使用<strong>Redis</strong>实现分布式锁可能出现的问题，以及解决此问题的一种算法<strong>RedLock</strong>，并提供了简单的代码使用。</p><p>关于<strong>RedLock</strong>更多内容，可以查看官网  <a href="https://redis.io/topics/distlock">Distributed locks with Redis</a> 这篇文章。</p><p>作者详细讨论了<strong>RedLock</strong>算法的安全性，可靠性等。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在许多不同的进程必须以互斥的方式操作共享资源的环境中，分布式锁是非常有用的。&lt;/p&gt;
&lt;p&gt;我们在使用&lt;code&gt;Redis&lt;/code&gt;做分布式锁时，使用的一般都是比较简单的方法。&lt;/p&gt;
&lt;p&gt;本文提供一个更规范的算法来实现&lt;code&gt;Redis&lt;/code&gt;分布式锁,名为&lt;code&gt;Redlock&lt;/code&gt;的算法。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Redis" scheme="https://www.sakuratears.top/tags/Redis/"/>
    
    <category term="RedLock" scheme="https://www.sakuratears.top/tags/RedLock/"/>
    
  </entry>
  
  <entry>
    <title>Java BitSet类简介及应用</title>
    <link href="https://www.sakuratears.top/blog/Java-BitSet%E7%B1%BB%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%BA%94%E7%94%A8.html"/>
    <id>https://www.sakuratears.top/blog/Java-BitSet%E7%B1%BB%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%BA%94%E7%94%A8.html</id>
    <published>2021-04-18T11:07:00.000Z</published>
    <updated>2021-04-18T11:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面试过程中我们或许被问过如下问题：如何快速判断某个数字在1亿数据中有没有出现过？</p><p>这都要用到我们今天要说的<code>BitSet</code>，我们下面一起来看下吧。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="BitSet简介"><a href="#BitSet简介" class="headerlink" title="BitSet简介"></a>BitSet简介</h2><p><code>BitSet</code>类实现了一个根据需要增长的位向量。<code>BitSet</code>的每个组成部分都有一个布尔值。<code>BitSet</code>的位由非负整数索引。可以检查、设置或清除单个索引位。</p><p>一个<code>BitSet</code>对象可以通过逻辑与、逻辑或、逻辑异或操作来修改另一个<code>BitSet</code>对象的内容。</p><p>默认情况下，集合中的所有位初始值为<code>false</code>。</p><p>每个<code>BitSet</code>都有一个当前大小，即该<code>BitSet</code>当前使用的空间位数。</p><p>需要注意其大小与<code>BitSet</code>的实现有关，因此它可能随实现而改变。<code>BitSet</code>的长度与<code>BitSet</code>的逻辑长度有关，并且与实现无关。</p><p>除非另有说明，否则将<code>null</code>传递给<code>BitSet</code>中的任何方法都会导致<code>NullPointerException</code>。</p><p>如果没有外部同步，<code>BitSet</code>是线程不安全的。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><code>BitSet</code>是位操作的对象，值只有 <strong>0</strong> 或 <strong>1</strong> （<code>false</code>和<code>true</code>），其内部维护了一个<code>long</code>数组，初始只有一个<code>long</code>，所以<code>BitSet</code>最小的长度是<strong>64</strong>，当随着存储的元素越来越多，<code>BitSet</code>内部会动态扩充，最终内部是由<strong>N</strong>个<code>long</code>来存储。</p><p>如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-693.jpg" alt="upload successful"></p><p>我们每个数字对应一个<code>bit</code>位，其值<strong>0</strong> 或 <strong>1</strong>表示该位置数字存不存在，这样一个<code>long</code>（8bit）可以表示64个数据，1G空间（1024 x 1024 x 1024 x 8 = 8589934592 bit）可以表示 85亿数据的相关信息。</p><p>同时位操作也是较快的，这也就是为什么<code>BitSet</code>在处理特定海量数据高效且节省空间的原因。</p><h2 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h2><p>Java中的<code>BitSet</code>为我们提供了一些实用的操作方法，我们来看下。</p><h3 id="构造方法部分"><a href="#构造方法部分" class="headerlink" title="构造方法部分"></a>构造方法部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitSet</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//部分代码略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADDRESS_BITS_PER_WORD = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BITS_PER_WORD = <span class="number">1</span> &lt;&lt; ADDRESS_BITS_PER_WORD;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span>[] words;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> wordsInUse = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">wordIndex</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bitIndex &gt;&gt; ADDRESS_BITS_PER_WORD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initWords(BITS_PER_WORD);</span><br><span class="line">        sizeIsSticky = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// nbits can&#x27;t be negative; size 0 is OK</span></span><br><span class="line">        <span class="keyword">if</span> (nbits &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NegativeArraySizeException(<span class="string">&quot;nbits &lt; 0: &quot;</span> + nbits);</span><br><span class="line"></span><br><span class="line">        initWords(nbits);</span><br><span class="line">        sizeIsSticky = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWords</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</span><br><span class="line">        words = <span class="keyword">new</span> <span class="keyword">long</span>[wordIndex(nbits-<span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部分代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码可以看到<code>BitSet</code>底层为<code>long</code>数组，<code>wordIndex</code>方法用来计算数据在数组的位置。</p><p><code>initWords</code>方法，初始化<code>long</code>数组，最少为1个<code>long</code>数组。</p><p><code>wordsInUse</code> 是检查当前的<code>long</code>数组中，实际使用的<code>long</code>的个数，即<code>long[wordsInUse-1]</code>是当前最后一个存储有有效bit的<code>long</code>。这个值是用于保存<code>BitSet</code>有效大小的。</p><h3 id="内部方法部分"><a href="#内部方法部分" class="headerlink" title="内部方法部分"></a>内部方法部分</h3><p>下面再来看下四个比较重要的内部方法：<code>ensureCapacity</code>、<code>expandTo</code>、<code>checkInvariants</code>、<code>recalculateWordsInUse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> wordsRequired)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (words.length &lt; wordsRequired) &#123;</span><br><span class="line">        <span class="comment">// Allocate larger of doubled size or required size</span></span><br><span class="line">        <span class="keyword">int</span> request = Math.max(<span class="number">2</span> * words.length, wordsRequired);</span><br><span class="line">        words = Arrays.copyOf(words, request);</span><br><span class="line">        sizeIsSticky = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expandTo</span><span class="params">(<span class="keyword">int</span> wordIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wordsRequired = wordIndex+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (wordsInUse &lt; wordsRequired) &#123;</span><br><span class="line">        ensureCapacity(wordsRequired);</span><br><span class="line">        wordsInUse = wordsRequired;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkInvariants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span>(wordsInUse == <span class="number">0</span> || words[wordsInUse - <span class="number">1</span>] != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">assert</span>(wordsInUse &gt;= <span class="number">0</span> &amp;&amp; wordsInUse &lt;= words.length);</span><br><span class="line">    <span class="keyword">assert</span>(wordsInUse == words.length || words[wordsInUse] == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recalculateWordsInUse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Traverse the bitset until a used word is found</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = wordsInUse-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (words[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    wordsInUse = i+<span class="number">1</span>; <span class="comment">// The new logical size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>checkInvariants</code>函数检查内部状态，校验<code>wordsInUse</code>等参数是否合法。在每一个<code>public</code>方法最后都会被调用。</p><p><code>recalculateWordsInUse</code>会计算<code>wordsInUse</code>的位置。</p><p><code>expandTo</code>和<code>ensureCapacity</code>为扩容方法，扩容条件是<code>wordsInUse < wordIndex+1</code>，扩容大小为 <code>2 * words.length</code>和<code>wordIndex+1</code>中的最大值。</p><h3 id="主要方法部分"><a href="#主要方法部分" class="headerlink" title="主要方法部分"></a>主要方法部分</h3><p>再来看下<code>BitSet</code>常用的几个主要方法:<code>set</code>，<code>clear</code>，<code>get</code>，<code>flip</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    expandTo(wordIndex);</span><br><span class="line"></span><br><span class="line">    words[wordIndex] |= (<span class="number">1L</span> &lt;&lt; bitIndex); <span class="comment">// Restores invariants</span></span><br><span class="line"></span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>set</code>方法设置某一指定位，操作主要有两步，找到对应的<code>long</code>，获取mask并与指定的位进行 按位或（OR） 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    <span class="keyword">if</span> (wordIndex &gt;= wordsInUse)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    words[wordIndex] &amp;= ~(<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clear</code>方法清除某一指定位，操作也基本分两步，找到对应的<code>long</code>，获取mask并与指定的位进行 按位与（AND） 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    expandTo(wordIndex);</span><br><span class="line"></span><br><span class="line">    words[wordIndex] ^= (<span class="number">1L</span> &lt;&lt; bitIndex);</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flip</code>方法翻转某一指定位，操作也基本分两步，找到对应的<code>long</code>，获取mask并与指定的位进行 异或（XOR） 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;bitIndex &lt; 0: &quot;</span> + bitIndex);</span><br><span class="line"></span><br><span class="line">    checkInvariants();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</span><br><span class="line">    <span class="keyword">return</span> (wordIndex &lt; wordsInUse)</span><br><span class="line">        &amp;&amp; ((words[wordIndex] &amp; (<span class="number">1L</span> &lt;&lt; bitIndex)) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get</code>方法获取某一指定位值，同样的两步走，这里的位操作是按位与（AND）。可以看到，如果指定的<code>bit</code>不存在的话，返回的是<code>false</code>，即没有设置。</p><p>主要方法处理上述部分外，还有重载的一些方法。</p><p>如对某个位置设置具体的布尔值，设置某一区间的值等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value)</span><br><span class="line">        set(bitIndex);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        clear(bitIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这儿就不过多介绍了。</p><h3 id="两个BitSet相关操作方法"><a href="#两个BitSet相关操作方法" class="headerlink" title="两个BitSet相关操作方法"></a>两个BitSet相关操作方法</h3><p>主要有以下四个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">and</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == set)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (wordsInUse &gt; set.wordsInUse)</span><br><span class="line">        words[--wordsInUse] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform logical AND on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInUse; i++)</span><br><span class="line">        words[i] &amp;= set.words[i];</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">or</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == set)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wordsInCommon = Math.min(wordsInUse, set.wordsInUse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wordsInUse &lt; set.wordsInUse) &#123;</span><br><span class="line">        ensureCapacity(set.wordsInUse);</span><br><span class="line">        wordsInUse = set.wordsInUse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform logical OR on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInCommon; i++)</span><br><span class="line">        words[i] |= set.words[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy any remaining words</span></span><br><span class="line">    <span class="keyword">if</span> (wordsInCommon &lt; set.wordsInUse)</span><br><span class="line">        System.arraycopy(set.words, wordsInCommon,</span><br><span class="line">                            words, wordsInCommon,</span><br><span class="line">                            wordsInUse - wordsInCommon);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recalculateWordsInUse() is unnecessary</span></span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xor</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wordsInCommon = Math.min(wordsInUse, set.wordsInUse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wordsInUse &lt; set.wordsInUse) &#123;</span><br><span class="line">        ensureCapacity(set.wordsInUse);</span><br><span class="line">        wordsInUse = set.wordsInUse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform logical XOR on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInCommon; i++)</span><br><span class="line">        words[i] ^= set.words[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy any remaining words</span></span><br><span class="line">    <span class="keyword">if</span> (wordsInCommon &lt; set.wordsInUse)</span><br><span class="line">        System.arraycopy(set.words, wordsInCommon,</span><br><span class="line">                            words, wordsInCommon,</span><br><span class="line">                            set.wordsInUse - wordsInCommon);</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">andNot</span><span class="params">(BitSet set)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Perform logical (a &amp; !b) on words in common</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = Math.min(wordsInUse, set.wordsInUse) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        words[i] &amp;= ~set.words[i];</span><br><span class="line"></span><br><span class="line">    recalculateWordsInUse();</span><br><span class="line">    checkInvariants();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>and(BitSet set)</code>方法相当于对当前<code>BitSet</code>和参数<code>BitSet</code>执行按位与（AND）操作。</p><p><code>or(BitSet set)</code>方法相当于对当前<code>BitSet</code>和参数<code>BitSet</code>执行按位或（OR）操作。</p><p><code>xor(BitSet set)</code>方法相当于对当前<code>BitSet</code>和参数<code>BitSet</code>执行异或（XOR）操作。</p><p><code>andNot(BitSet set)</code>方法相当于对参数<code>BitSet</code>取反，然后和当前<code>BitSet</code>执行按位与（AND）操作。</p><h2 id="相关应用"><a href="#相关应用" class="headerlink" title="相关应用"></a>相关应用</h2><p>了解了<code>BitSet</code>相关方法和原理后，我们来看下<code>BitSet</code>的一些应用场景。</p><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><p><code>BitSet</code>一个典型的应用就是布隆过滤器，布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。</p><p>布隆过滤器通过一个<strong>Hash</strong>函数将一个元素映射成一个位阵列（Bit array）中的一个点。这样一来，我们只要看看这个点是不是1就可以知道集合中有没有它了。这就是布隆过滤器的基本思想。</p><p><strong>Hash</strong>面临的问题就是冲突。假设<strong>Hash</strong>函数是良好的，如果我们的位阵列长度为m个点，那么如果我们想将冲突率降低到例如1%, 这个散列表就只能容纳 <strong>m / 100</strong> 个元素。显然这就不叫空间效率了（Space-efficient）。解决方法也简单，就是使用多个<strong>Hash</strong>，如果它们有一个说元素不在集合中，那肯定就不在。如果它们都说在，虽然也有一定可能性它们在说谎，不过直觉上判断这种事情的概率是比较低的。</p><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个长度为10 亿的比特位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">256</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为了降低错误率，使用加法hash算法，所以定义一个8个元素的质数数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] seeds = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">61</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相当于构建 8 个不同的hash算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashFunction[] functions = <span class="keyword">new</span> HashFunction[seeds.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化布隆过滤器的 bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BitSet bitset = <span class="keyword">new</span> BitSet(DEFAULT_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要加入的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (HashFunction f : functions) &#123;</span><br><span class="line">                <span class="comment">//计算 hash 值并修改 bitmap 中相应位置为 true</span></span><br><span class="line">                bitset.set(f.hash(value), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断相应元素是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 需要判断的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> ret = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (HashFunction f : functions) &#123;</span><br><span class="line">            ret = bitset.get(f.hash(value));</span><br><span class="line">            <span class="comment">//一个 hash 函数返回 false 则跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seeds.length; i++) &#123;</span><br><span class="line">            functions[i] = <span class="keyword">new</span> HashFunction(DEFAULT_SIZE, seeds[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加1亿数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            add(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        String id = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">        add(id);</span><br><span class="line"></span><br><span class="line">        System.out.println(contains(id));   <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + contains(<span class="string">&quot;234567890&quot;</span>));  <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashFunction</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.seed = seed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = value.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            result = seed * result + value.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (size - <span class="number">1</span>) &amp; result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到布隆过滤器可以解决我们上面所说的问题：如何快速判断某个数字在1亿数据中有没有出现过？</p><p>除了这个问题，布隆过滤器也可以解决邮箱黑名单等一系列问题。</p><p>使用<code>BitSet</code>，还可以对有限范围的大量正整数进行快速排序，我们来看一下。</p><h3 id="使用BitSet排序"><a href="#使用BitSet排序" class="headerlink" title="使用BitSet排序"></a>使用BitSet排序</h3><p>需要注意的是，使用<code>BitSet</code>进行排序时，需要数据为正整数，且需要知道数据范围（最大值范围），并且在排序时，如果有相同元素，<code>BitSet</code>需要变种，进行额外处理。</p><p>其实也是比较好理解的，<code>BitSet</code>可以表示<code> 1 ~ +∞ </code> 范围的数据，知道数据范围，我们将数组数据放到<code>BitSet</code>对应的位置上，然后遍历拿到<code>true</code>的数据即可。</p><p>相同元素会被覆盖，因此普通的<code>BitSet</code>是无法统计数据数量的，也就是如果数组存在相同元素，<code>BitSet</code>需要变化一下才能适应对此的排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitSetSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNumber(<span class="keyword">int</span> size, <span class="keyword">int</span> max) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">//[0,max)</span></span><br><span class="line">            nums[i] = RandomUtils.nextInt(max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用BitSet进行排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max  最大值范围，不需要知道最大值，这个值不小于最大值即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bitSetSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//辅助map，用于记录相同元素次数</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet(max);</span><br><span class="line">        bitSet.set(<span class="number">0</span>, max, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//更改数据位为true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (bitSet.get(pos)) &#123;</span><br><span class="line">                Integer value = map.get(pos);</span><br><span class="line">                value = value == <span class="keyword">null</span> ? <span class="number">0</span> : value;</span><br><span class="line">                value++;</span><br><span class="line">                map.put(pos, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bitSet.set(pos, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历bitSet</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bitSet.get(i)) &#123;</span><br><span class="line">                nums[k] = i;</span><br><span class="line">                k++;</span><br><span class="line">                Integer value = map.get(i);</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; value; s++) &#123;</span><br><span class="line">                        nums[k] = i;</span><br><span class="line">                        k++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = generateNumber(<span class="number">100000000</span>, <span class="number">10000000</span>);</span><br><span class="line">        <span class="keyword">long</span> start1 = System.currentTimeMillis();</span><br><span class="line">        bitSetSort(nums, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">long</span> end1 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;BitSet排序耗时--&gt; &quot;</span> + (end1-start1) +<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们这儿借助<code>HashMap</code>来存储相同元素个数，如果待排序的数据不重复，则不引入<code>HashMap</code>即可，同时可以达到很高的效率。</p><p>我们也可以使用1bit来记录该位置是否有多个相同元素，有的话再去<code>Map</code>里获取，这样也能提高不少效率，其也属于<code>BitSet</code>的变种。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本篇文章我们了解了<code>BitSet</code>的原理及一些使用场景，在特定的情况下，使用<code>BitSet</code>或许是个不错的选择。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;面试过程中我们或许被问过如下问题：如何快速判断某个数字在1亿数据中有没有出现过？&lt;/p&gt;
&lt;p&gt;这都要用到我们今天要说的&lt;code&gt;BitSet&lt;/code&gt;，我们下面一起来看下吧。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://www.sakuratears.top/tags/Java/"/>
    
    <category term="BitSet" scheme="https://www.sakuratears.top/tags/BitSet/"/>
    
  </entry>
  
  <entry>
    <title>分布式缓存算法原理</title>
    <link href="https://www.sakuratears.top/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.html"/>
    <id>https://www.sakuratears.top/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.html</id>
    <published>2021-04-18T10:59:00.000Z</published>
    <updated>2021-04-18T11:04:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在使用缓存型数据库时，如<strong>Redis</strong>，为保证缓存数据库的高可用，提高缓存数据库的读写性能，最简单的方式是我们做缓存数据库的读写分离，组成<strong>Master-Master</strong>或者<strong>Master-Slave</strong>的形式，或者搭建缓存数据库集群。</p><p>当数据量更大时，和数据库类似，我们可以对缓存数据库进行“分库分表”操作。</p><p>在对缓存数据库进行“分库分表”操作中，便会涉及到分布式缓存算法的一些内容。我们来看下。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>现在假设我们有一个网站，需要使用缓存数据库<strong>Redis</strong>存储图片资源，存储的格式为键值对，key值为图片名称，value为该图片所在文件服务器的路径，我们需要根据文件名查找该文件所在文件服务器上的路径，数据量大概有2000W左右，按照我们约定的规则进行分库，规则就是随机分配，我们可以部署8台缓存服务器，每台服务器大概含有500W条数据，并且进行主从复制，示意图如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-683.jpg" alt="upload successful"></p><p>由于规则随机，所以我们的数据可能存储在任何一组<strong>Redis</strong>中，我们如果想找某张图片，比如“a.png”，则需要遍历4组<strong>Redis</strong>查询，这显然是不能接受的。</p><p>我们可以使用数据库“分库分表”的一些规则来，如按照Hash值，按照类别，按照某个字段值来进行分配。</p><p><strong>Redis</strong>作为通用缓存数据库，我们按照数据key的Hash值来对数据分类较好，因为Hash值不涉及到具体的业务逻辑。</p><h2 id="使用Hash"><a href="#使用Hash" class="headerlink" title="使用Hash"></a>使用Hash</h2><p>可以知道，我们使用Hash，每一张图片在分库时都可以定位到特定的服务器，如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-684.jpg" alt="upload successful"></p><p>上图中，假设我们查找的是”a.png”，由于有4台服务器（排除从库），因此公式为<strong>hash(a.png) % 4 = 2</strong> ，可知定位到了第2号服务器，这样的话就不会遍历所有的服务器，大大提升了性能。</p><h2 id="使用Hash的问题"><a href="#使用Hash的问题" class="headerlink" title="使用Hash的问题"></a>使用Hash的问题</h2><p>上述的方式虽然提升了性能，我们不再需要对整个Redis服务器进行遍历。但是，使用上述Hash算法进行缓存时，会出现一些缺陷，主要体现在服务器数量变动的时候，所有缓存的位置都要发生改变。</p><p>试想一下，如果4台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？</p><p>很简单，多增加几台缓存服务器不就行了。</p><p>假设我们增加了一台缓存服务器，那么缓存服务器的数量就由4台变成了5台。那么原本<strong>hash(a.png) % 4 = 2</strong> 的公式就变成了 <strong>hash(a.png) % 5 =？</strong> 。</p><p>假设有20个数据需要存储，在有4个<strong>Redis</strong>节点的时候如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-685.jpg" alt="upload successful"></p><p>当我们添加1个<strong>Redis</strong>节点之后，数据的分布如下图所示：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-686.jpg" alt="upload successful"></p><p>上图中蓝色部分代表与4个节点时存储位置一致的数据，其命中率为：4/20=20%。也就是说这种情况带来的结果就是当服务器数量变动时，很多缓存的位置都要发生改变。</p><p>也就是当服务器数量发生改变时，所有缓存在一定时间内是失效的，当应用无法从缓存获取数据时，大量请求会调用数据库获取数据，导致数据库瘫痪（缓存雪崩）。</p><p>同样的，如果一台服务器出现故障，我们要将其移除，缓存服务器数量从4台变为3台，也会出现上述问题。</p><p>我们应该避免这种问题，这种问题是由于Hash算法本身的缘故，使用取模法进行缓存时，这种情况是无法避免的。</p><p>为了解决上述问题，一致性Hash算法诞生了。</p><h2 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h2><p>一致性Hash算法也是使用取模的方法，只是，上述的取模法是对服务器的数量进行取模，而一致性Hash算法是对<strong>2^32-1</strong>取模。</p><p>简单来说，一致性Hash算法将整个Hash值空间组织成一个虚拟的圆环，如假设某Hash函数H的值空间为<strong>0-2^32-1</strong>（即Hash值是一个32位无符号整形），整个Hash空间环如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-687.jpg" alt="upload successful"></p><p>整个空间按顺时针方向组织。<strong>0~2^32-1</strong>在零点中方向重合。</p><p>下一步将各个服务器使用Hash进行处理，具体可以选择服务器的ip或主机名作为关键字进行Hash，这样每台机器就能确定其在Hash环上的位置，这里假设将上文中四台服务器使用ip地址Hash后在环空间的位置如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-688.png" alt="upload successful"></p><p>接下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。</p><p>例如我们有<strong>Object A</strong>、<strong>Object B</strong>、<strong>Object C</strong>、<strong>Object D</strong>四个数据对象，经过哈希计算后，在环空间上的位置如下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-689.png" alt="upload successful"></p><p>根据一致性哈希算法，数据<strong>A</strong>会被定为到<strong>Node A</strong>上，<strong>B</strong>被定为到<strong>Node B</strong>上，<strong>C</strong>被定为到<strong>Node C</strong>上，<strong>D</strong>被定为到<strong>Node D</strong>上。</p><h2 id="一致性Hash算法的容错性和可扩展性"><a href="#一致性Hash算法的容错性和可扩展性" class="headerlink" title="一致性Hash算法的容错性和可扩展性"></a>一致性Hash算法的容错性和可扩展性</h2><p>下面分析一致性哈希算法的容错性和可扩展性。</p><p>现假设<strong>Node C</strong>不幸宕机，可以看到此时对象<strong>A</strong>、<strong>B</strong>、<strong>D</strong>不会受到影响，只有<strong>C</strong>对象被重定位到<strong>Node D</strong>。一般的，在一致性哈希算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。</p><p>下面考虑另外一种情况，如果在系统中增加一台服务器<strong>Node X</strong>，如下图所示：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-690.png" alt="upload successful"></p><p>此时对象<strong>Object A</strong>、<strong>B</strong>、<strong>D</strong>不受影响，只有对象<strong>C</strong>需要重定位到新的<strong>Node X</strong> 。一般的，在一致性哈希算法中，如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它数据也不会受到影响。</p><p>综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</p><h2 id="一致性Hash算法的数据倾斜问题"><a href="#一致性Hash算法的数据倾斜问题" class="headerlink" title="一致性Hash算法的数据倾斜问题"></a>一致性Hash算法的数据倾斜问题</h2><p>另外，一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-691.png" alt="upload successful"></p><p>此时必然造成大量数据集中到<strong>Node A</strong>上，而只有极少量会定位到<strong>Node B</strong>上。</p><p>为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。具体做法可以在服务器ip或主机名的后面增加编号来实现。</p><p>例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 <strong>Node A#1</strong>、<strong>Node A#2</strong>、<strong>Node A#3</strong>、<strong>Node B#1</strong>、<strong>Node B#2</strong>、<strong>Node B#3</strong>的哈希值，于是形成六个虚拟节点：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-692.png" alt="upload successful"></p><p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到<strong>Node A#1</strong>、<strong>Node A#2</strong>、<strong>Node A#3</strong>三个虚拟节点的数据均定位到<strong>Node A</strong>上。这样就解决了服务节点少时数据倾斜的问题。</p><p>在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p><h2 id="Java简单实现"><a href="#Java简单实现" class="headerlink" title="Java简单实现"></a>Java简单实现</h2><p>下面我们通过代码来简单实现下一致性Hash算法的效果。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistHash</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一致性Hash算法最大值，0 - 2^32 -1</span></span><br><span class="line"><span class="comment">     * Integer的范围，- 2^31 --- 2^31 -1</span></span><br><span class="line"><span class="comment">     * 我们取模后为方便都以无符号整数来统计</span></span><br><span class="line"><span class="comment">     * Java中hashCode范围即Integer范围，取到负数后，我们取其绝对值+Integer.MAX_VALUE 来表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_VALUE = <span class="number">0xffffffffL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MIN_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> List&lt;Long&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟缓存类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map&lt;Long,RedisServer&lt;K,V&gt;&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; serverList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsistHash</span><span class="params">(List&lt;String&gt; serverList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverList = serverList;</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(serverList))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;服务器列表为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        initHashLoop(serverList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象生成hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">hash</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hash;</span><br><span class="line">        <span class="keyword">int</span> hashCode = object.hashCode();</span><br><span class="line">        <span class="keyword">if</span>(hashCode &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            hash = (<span class="keyword">long</span>)(-hashCode) + (<span class="keyword">long</span>)Integer.MAX_VALUE;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            hash = hashCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据服务器初始化Hash环</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serverList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHashLoop</span><span class="params">(List&lt;String&gt; serverList)</span></span>&#123;</span><br><span class="line">        <span class="comment">//构建服务节点</span></span><br><span class="line">        <span class="keyword">for</span> (String s : serverList) &#123;</span><br><span class="line">            <span class="comment">//每个服务器计算Hash</span></span><br><span class="line">            <span class="keyword">long</span> h = hash(s);</span><br><span class="line">            <span class="comment">//快速查找数据节点位置</span></span><br><span class="line">            list.add(h);</span><br><span class="line">            <span class="comment">//建立映射关系</span></span><br><span class="line">            cache.put(h,<span class="keyword">new</span> RedisServer&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入缓存对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//计算hash</span></span><br><span class="line">        <span class="keyword">long</span> h = hash(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> temp = list.get(i);</span><br><span class="line">            <span class="comment">//小于第一个hash值归到第一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; h &lt;= temp)&#123;</span><br><span class="line">               cache.get(temp).set(key,value);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大于当前hash且小于下一个hash归到下一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; list.size() &amp;&amp; h &gt; temp &amp;&amp; h &lt;= list.get(i+<span class="number">1</span>))&#123;</span><br><span class="line">                cache.get(list.get(i+<span class="number">1</span>)).set(key,value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比最后的hash还要大，归到第一个hash缓存（顺时针）</span></span><br><span class="line">            <span class="keyword">if</span>(h &gt; list.get(list.size() -<span class="number">1</span>))&#123;</span><br><span class="line">                cache.get(list.get(<span class="number">0</span>)).set(key,value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="comment">//计算hash</span></span><br><span class="line">        <span class="keyword">long</span> h = hash(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> temp = list.get(i);</span><br><span class="line">            <span class="comment">//小于第一个hash值归到第一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; h &lt;= temp)&#123;</span><br><span class="line">                <span class="keyword">return</span> cache.get(temp).get(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//大于当前hash且小于下一个hash归到下一个hash缓存</span></span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span> &lt; list.size() &amp;&amp; h &gt; temp &amp;&amp; h &lt;= list.get(i+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> cache.get(list.get(i+<span class="number">1</span>)).get(key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比最后的hash还要大，归到第一个hash缓存（顺时针）</span></span><br><span class="line">            <span class="keyword">if</span>(h &gt; list.get(list.size() -<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> cache.get(list.get(<span class="number">0</span>)).get(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟删除一个Redis缓存服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeServer</span><span class="params">(String server)</span></span>&#123;</span><br><span class="line">        Long h = hash(server);</span><br><span class="line">        list.remove(h);</span><br><span class="line">        cache.remove(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟添加一个Redis缓存服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addServer</span><span class="params">(String server)</span></span>&#123;</span><br><span class="line">        Long h = hash(server);</span><br><span class="line">        list.add(h);</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        cache.put(h,<span class="keyword">new</span> RedisServer&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印缓存情况</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringJoiner sj1 = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        list.forEach(e-&gt;&#123;</span><br><span class="line">            sj1.add(e.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(sj1);</span><br><span class="line"></span><br><span class="line">        StringJoiner sj2 = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        cache.forEach((k,v)-&gt;&#123;</span><br><span class="line">            StringJoiner sj3 = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            v.map.forEach((a,b)-&gt;&#123;</span><br><span class="line">                sj3.add(<span class="string">&quot;[&quot;</span>+a+<span class="string">&quot;-&gt;&quot;</span>+b+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            sj2.add(k+<span class="string">&quot;:&#123;&quot;</span>+sj3.toString()+<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(sj2.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟Redis服务</span></span><br><span class="line"><span class="comment">     * 当然Redis拿不到就会去数据库取数据，我们这儿简化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServer</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K,V&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">            map.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;10.1.1.2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;10.2.2.3&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;10.3.4.4&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;10.10.2.5&quot;</span>);</span><br><span class="line">        ConsistHash&lt;String,String&gt; consistHash = <span class="keyword">new</span> ConsistHash&lt;&gt;(list);</span><br><span class="line"></span><br><span class="line">        consistHash.set(<span class="string">&quot;key1111133132311&quot;</span>,<span class="string">&quot;key11111&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>,<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12232433sfddsf&quot;</span>,<span class="string">&quot;12232433sfddsf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;xsdsf567899&quot;</span>,<span class="string">&quot;xsdsf567899&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12qwqs&quot;</span>,<span class="string">&quot;12qwqs&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ffffffff&quot;</span>,<span class="string">&quot;ffffffff&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;宕机前：&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟宕机，查看缓存分别情况</span></span><br><span class="line">        consistHash.removeServer(<span class="string">&quot;10.1.1.2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;宕机后：&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重新放入值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;数据重新分布：&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;key1111133132311&quot;</span>,<span class="string">&quot;key11111&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>,<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12232433sfddsf&quot;</span>,<span class="string">&quot;12232433sfddsf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;xsdsf567899&quot;</span>,<span class="string">&quot;xsdsf567899&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12qwqs&quot;</span>,<span class="string">&quot;12qwqs&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ffffffff&quot;</span>,<span class="string">&quot;ffffffff&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line"></span><br><span class="line">        consistHash.addServer(<span class="string">&quot;10.1.1.2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加一个服务器：&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;key1111133132311&quot;</span>,<span class="string">&quot;key11111&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>,<span class="string">&quot;qweqrgdfgdgdgdgdf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12232433sfddsf&quot;</span>,<span class="string">&quot;12232433sfddsf&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;xsdsf567899&quot;</span>,<span class="string">&quot;xsdsf567899&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;12qwqs&quot;</span>,<span class="string">&quot;12qwqs&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        consistHash.set(<span class="string">&quot;ffffffff&quot;</span>,<span class="string">&quot;ffffffff&quot;</span>);</span><br><span class="line">        consistHash.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，需要注意的点如下：</p><ul><li>我们用了一个简易的<code>RedisServer</code>类来模拟<strong>Redis</strong>服务；</li><li>Hash算法也非常简单，采用了<strong>Java</strong>中对象的<code>hashCode</code>方法，如果取到负值，变为正值并加上<code>Integer.MAX_VALUE</code>；</li><li>其实上面的Hash算法直接用<code>hashCode</code>方法也是可以的，当然Hash数据范围变为<code>Integer.MIN_VALUE</code> - <code>Integer.MAX_VALUE</code>;</li><li>我们运行测试类，可以看到其实服务器Hash后分布并不是很均匀的(数据倾斜)，我们可以通过上面说的“虚拟节点”来解决，这儿就不上代码了。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文中，我们了解到了什么是一致性Hash算法，并通过代码加深了对算法的理解。</p><p>由于分布式系统中，每个节点都有可能新增或失效，如何保证系统能够正常运行，并对外提供稳定服务，一致性Hash算法即提供了处理这种问题的一个思路。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.cnblogs.com/lpfuture/p/5796398.html">一致性Hash算法原理</a></li><li><a href="https://www.cnblogs.com/study-everyday/p/8629100.html">一致性Hash算法</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在使用缓存型数据库时，如&lt;strong&gt;Redis&lt;/strong&gt;，为保证缓存数据库的高可用，提高缓存数据库的读写性能，最简单的方式是我们做缓存数据库的读写分离，组成&lt;strong&gt;Master-Master&lt;/strong&gt;或者&lt;strong&gt;Master-Slave&lt;/strong&gt;的形式，或者搭建缓存数据库集群。&lt;/p&gt;
&lt;p&gt;当数据量更大时，和数据库类似，我们可以对缓存数据库进行“分库分表”操作。&lt;/p&gt;
&lt;p&gt;在对缓存数据库进行“分库分表”操作中，便会涉及到分布式缓存算法的一些内容。我们来看下。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="一致性Hash算法" scheme="https://www.sakuratears.top/tags/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>缓存淘汰算法（LFU、LRU、FIFO、ARC、MRU）</title>
    <link href="https://www.sakuratears.top/blog/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%EF%BC%88LFU%E3%80%81LRU%E3%80%81FIFO%E3%80%81ARC%E3%80%81MRU%EF%BC%89.html"/>
    <id>https://www.sakuratears.top/blog/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%EF%BC%88LFU%E3%80%81LRU%E3%80%81FIFO%E3%80%81ARC%E3%80%81MRU%EF%BC%89.html</id>
    <published>2021-04-05T07:50:00.000Z</published>
    <updated>2021-04-05T08:44:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一般情况下，我们读取数据，无论从数据库还是磁盘，都是比较慢的，要加快数据读取可以使用缓存，将数据缓存下来。例如比较有名的工具<strong>Redis</strong>等。</p><p>无论如何缓存数据，随着数据量增大，内存容量是有一定限制的，因此我们只能缓存定量的数据。</p><p>对于我们来说，肯定要缓存经常使用或者未来很大概率被使用的数据，这样才有利于我们的业务。</p><p>因此对于定量的缓存，如果缓存量过大，势必要删除一部分缓存数据，这就涉及到了缓存的淘汰策略问题。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>常用的缓存淘汰算法一般有5种，<strong>FIFO</strong>、<strong>LRU</strong>、<strong>LFU</strong>、<strong>ARC</strong>、<strong>MRU</strong>。</p><p>如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-682.jpg" alt="upload successful"></p><p>最常使用的是<strong>LRU</strong>和<strong>LFU</strong>缓存淘汰算法。</p><p>接下来我们分别来看下这5种缓存淘汰算法。</p><p>由于每种算法都写了一些Java代码实现，对其进行整理后，我们需要实现以下两个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向缓存放入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><p><strong>FIFO(First In First Out)</strong> 先进先出淘汰算法，这种淘汰算法非常好理解，我们不关心缓存数据实际访问情况，如果缓存满了后，自动删除较早放入的缓存数据。</p><p>一般我们使用队列就可以实现这种淘汰算法。</p><p>优点：内存占用低、速度快、实现简单。</p><p>缺点：缓存命中率低、使用价值也不高。</p><p>这儿我提供了两种相关<strong>FIFO</strong>淘汰算法的实现，一种借助Java中的工具类<code>LinkedList</code>，一种是自己手写了一个先进先出（<strong>FIFO</strong>）队列。</p><p><strong>FIFO</strong>相关接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现方案一：借助<code>LinkedList</code>。</p><p>该方案 内存占用高，但借助<code>HashMap</code>，可以实现接近O(1)的查找效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IFIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * linkedList可以遵循先进先出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;K&gt; linkedList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来存储value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; hashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FIFOCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hashMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置值时，判断K存不存在</span></span><br><span class="line">        V v = hashMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有的话新增即可</span></span><br><span class="line">            hashMap.put(key,value);</span><br><span class="line">            <span class="comment">//添加到链表尾</span></span><br><span class="line">            linkedList.add(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//存在更新即可</span></span><br><span class="line">            hashMap.put(key,value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断容量</span></span><br><span class="line">        <span class="keyword">int</span> size = linkedList.size();</span><br><span class="line">        <span class="keyword">if</span>(size &gt; capacity)&#123;</span><br><span class="line">            <span class="comment">//删除头部元素</span></span><br><span class="line">            K k = linkedList.poll();</span><br><span class="line">            hashMap.remove(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现方案二，手写一个先进先出队列，头部删除旧元素，尾部放入新元素。</p><p>该方案 内存占用低，但查找时需要遍历链表，时间复杂度较高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIFOCache1</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IFIFOCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoublePointLinkedList&lt;K,V&gt; linkedList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FIFOCache1</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedList = <span class="keyword">new</span> DoublePointLinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        DoublePointLinkedList&lt;K,V&gt;.Node&lt;K,V&gt; node = linkedList.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        DoublePointLinkedList&lt;K,V&gt;.Node&lt;K,V&gt; node = linkedList.get(key);</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//更新一下值</span></span><br><span class="line">            node.value = value;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//长度超过容量，删除头部元素</span></span><br><span class="line">            <span class="keyword">if</span>(linkedList.size &gt;= capacity)&#123;</span><br><span class="line">                linkedList.delHead();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将新值添加到队尾</span></span><br><span class="line">            linkedList.addTail(key,value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublePointLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; head;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; next;</span><br><span class="line">            <span class="keyword">private</span> K key;</span><br><span class="line">            <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoublePointLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">addHead</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.next = head;</span><br><span class="line">                head = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">addTail</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail.next = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node&lt;K,V&gt; <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = head;</span><br><span class="line">            <span class="keyword">while</span> (node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.key.equals(key))&#123;</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//只有一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">1</span> &amp;&amp; head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                head = <span class="keyword">null</span>;</span><br><span class="line">                tail = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p><strong>LRU(Least Recently used)</strong> 最近最少使用缓存淘汰算法，其淘汰最近一段时间最少被访问的缓存数据。</p><p>其核心思想是如果数据最近被访问过，那么将来被访问的几率也更高，其不关心数据的访问频次。</p><p>我们使用队列可以实现这种淘汰算法，对于访问的元素，移动到链表尾，这样链表头为较旧的元素，当容量满时，淘汰掉链表头元素即可。</p><p>优点：实现方式较简单，且缓存命中率也较高，占用内存也不高。</p><p>缺点：需要遍历链表查询，效率较低；该方式仅从时间维度考虑数据，未考虑数据访问频次，如果一个经常访问的热点数据近期没有被访问（偶发性），导致缓存将其删除，而后在访问时无法命中，导致<strong>LRU</strong>命中率下降。</p><p>借助Java里的工具类<code>LinkedHashMap</code>，我们可以方便的实现<strong>LRU</strong>。<code>LinkedHashMap</code>有个参数<code>accessOrder</code>，当设置为<code>true</code>时，被访问的元素（较新的）会被移动到链表尾。同时如果重写了<code>removeEldestEntry</code>方法，当达到条件时，<code>LinkedHashMap</code>便会删除链表头（较旧的）元素。</p><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助<code>LinkedHashMap</code>，我们可以实现查找接近O(1)的<strong>LRU</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; linkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        linkedHashMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置使用的LinkedHashMap</span></span><br><span class="line"><span class="comment">     * 删除旧元素的条件是长度超过容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TLinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(capacity,<span class="number">0.75f</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LRU-K"><a href="#LRU-K" class="headerlink" title="LRU-K"></a>LRU-K</h3><p><strong>LRU-K</strong>中的<strong>K</strong>代表次数，相比于普通的<strong>LRU</strong>（可以认为<strong>LRU-1</strong>），其主要为了解决上面提到的偶发性问题。</p><p>核心思想是将最近使用过1次的判断标准改为最近使用过<strong>K</strong>次。</p><p>优点：相比于<strong>LRU</strong>，对于偶发性数据<strong>LRU-K</strong>有更好的适应性，命中率也比普通<strong>LRU</strong>更高。<br>缺点：<strong>LRU-K</strong>需要额外记录历史缓存数据，内存消耗要比<strong>LRU</strong>要高。</p><p>我们通过两个<code>LinkedHashMap</code>来实现<strong>LRU-K</strong>。</p><p>其实现原理如下：</p><ol><li>数据第一次被访问，加入到访问历史列表；</li><li>如果数据在访问历史列表里后没有达到K次访问，则按照一定规则（<strong>FIFO</strong>，<strong>LRU</strong>）淘汰；</li><li>当访问历史队列中的数据访问次数达到K次后，将数据索引从历史队列删除，将数据移到缓存队列中，并缓存此数据，缓存队列重新按照时间排序；</li><li>缓存数据队列中被再次访问后，重新排序；</li><li>需要淘汰数据时，淘汰缓存队列中排在末尾的数据，即淘汰“倒数第K次访问离现在最久”的数据。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRU_KCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> helpCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该队列用户缓存历史所有访问数据（删除数据方法：删除时间最早的元素）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,Cache&lt;K,V&gt;&gt; helpLinkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; linkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义一个构造方法，辅助队列容量默认为缓存队列的50倍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRU_KCache</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(count,capacity,<span class="number">50</span>*capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRU_KCache</span><span class="params">(<span class="keyword">int</span> count, <span class="keyword">int</span> capacity, <span class="keyword">int</span> helpCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span> || helpCapacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;次数不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.helpCapacity = helpCapacity;</span><br><span class="line"></span><br><span class="line">        linkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="comment">//辅助队列，用于存储历史访问记录</span></span><br><span class="line">        helpLinkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(helpCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先从缓存队列里获取数据</span></span><br><span class="line">        V v = linkedHashMap.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不存在，尝试从辅助队列里获取数据</span></span><br><span class="line">        <span class="keyword">if</span>(v == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Cache&lt;K,V&gt; cache = helpLinkedHashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(cache != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//增加访问次数</span></span><br><span class="line">                <span class="keyword">int</span> temp = cache.addCount();</span><br><span class="line">                v = cache.getValue();</span><br><span class="line">                <span class="comment">//达到指定次数后移至缓存队列</span></span><br><span class="line">                <span class="keyword">if</span>(temp &gt;= count)&#123;</span><br><span class="line">                    linkedHashMap.put(key,v);</span><br><span class="line">                    helpLinkedHashMap.remove(key);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//没达到指定次数，更新下辅助队列数据</span></span><br><span class="line">                    helpLinkedHashMap.put(key,cache);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存操作，首先判断缓存队列里是否有数据</span></span><br><span class="line">        V v = linkedHashMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//更新最新值</span></span><br><span class="line">            linkedHashMap.put(key,value);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//没有值的话去辅助队列获取</span></span><br><span class="line">            Cache&lt;K,V&gt; cache = helpLinkedHashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(cache != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//增加访问次数</span></span><br><span class="line">                <span class="keyword">int</span> temp = cache.addCount();</span><br><span class="line">                cache.setValue(value);</span><br><span class="line">                <span class="comment">//达到指定次数后移至缓存队列</span></span><br><span class="line">                <span class="keyword">if</span>(temp &gt;= count)&#123;</span><br><span class="line">                    linkedHashMap.put(key,value);</span><br><span class="line">                    helpLinkedHashMap.remove(key);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//没达到指定次数，更新下辅助队列数据</span></span><br><span class="line">                    helpLinkedHashMap.put(key,cache);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//没有数据，新增即可</span></span><br><span class="line">                cache = <span class="keyword">new</span> Cache&lt;&gt;(key,value);</span><br><span class="line">                helpLinkedHashMap.put(key,cache);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存队列移除元素原则：</span></span><br><span class="line"><span class="comment">     * 队列达到指定长度，队列里存的都是访问k次（及以上）的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TLinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(capacity,<span class="number">0.75f</span>,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size() &gt; capacity;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cache</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 增加次数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2Q"><a href="#2Q" class="headerlink" title="2Q"></a>2Q</h3><p><strong>2Q(Two queues)</strong> 算法类似于<strong>LRU-2</strong>，不同点在于<strong>2Q</strong>将<strong>LRU-2</strong>算法中的访问历史队列改为一个<strong>FIFO</strong>缓存队列，即：<strong>2Q</strong>算法有两个缓存队列，一个是<strong>FIFO</strong>队列，一个是<strong>LRU</strong>队列。</p><p>其工作原理如下：</p><ol><li>新访问的数据插入到<strong>FIFO</strong>队列；</li><li>如果数据在<strong>FIFO</strong>队列中一直没有被再次访问，则最终按照<strong>FIFO</strong>规则淘汰；</li><li>如果数据在<strong>FIFO</strong>队列中被再次访问，则将数据移到<strong>LRU</strong>队列；</li><li>如果数据在<strong>LRU</strong>队列再次被访问，则按照<strong>LRU</strong>规则进行；</li><li><strong>LRU</strong>队列淘汰旧的数据。</li></ol><p>其相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoQueueCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FIFOCache&lt;K,V&gt; fifoQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LRUCache&lt;K,V&gt; lruQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TwoQueueCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.fifoQueue = <span class="keyword">new</span> FIFOCache&lt;&gt;(<span class="number">50</span> * capacity);</span><br><span class="line">        <span class="keyword">this</span>.lruQueue = <span class="keyword">new</span> LRUCache&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先判断lru是否有数据</span></span><br><span class="line">        V v = lruQueue.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有查询fifo队列是否有数据</span></span><br><span class="line">        v = fifoQueue.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放入lru队列</span></span><br><span class="line">            lruQueue.set(key,v);</span><br><span class="line">            <span class="comment">//fifo删除数据</span></span><br><span class="line">            fifoQueue.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查不到返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先查询lru是否存在数据</span></span><br><span class="line">        <span class="keyword">if</span>(lruQueue.contains(key))&#123;</span><br><span class="line">            lruQueue.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断fifo队列是否存在</span></span><br><span class="line">        V v = fifoQueue.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放入lru队列</span></span><br><span class="line">            lruQueue.set(key,value);</span><br><span class="line">            <span class="comment">//fifo删除数据</span></span><br><span class="line">            fifoQueue.remove(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fifo队列不存在，直接放入</span></span><br><span class="line">        fifoQueue.set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><p><strong>LFU(Least Frequently Used)</strong> 最近最不常用，其是基于数据的访问频次及访问时间来对缓存数据进行淘汰的算法。</p><p>相比于<strong>LRU</strong>，<strong>LFU</strong>对于偶发性数据具有更好的适应性，其淘汰数据依据两点：访问频次、访问时间。</p><p>其核心思想是如果数据过去被访问多次，那么将来被访问的频率也更高。</p><p>优点：命中率较高</p><p>缺点：实现较复杂，内存占用较高，需要记录数据的访问频次和最新时间，实现不好的话，时间复杂度也可能较高。</p><p>我们来看下相关代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方案一</strong></p><p>借助<code>HashMap</code>来实现（删除访问次数较少并且更新时间较早的数据时需要遍历），删除元素时需要遍历缓存Map找到“最小”数据并删除，实现简单，不过效率低下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache0</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,CacheObject&lt;V&gt;&gt; cacheMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache0</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据k获取某个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>&#123;</span><br><span class="line">        <span class="comment">//取不到返回null</span></span><br><span class="line">        CacheObject&lt;V&gt; object = cacheMap.get(k);</span><br><span class="line">        <span class="keyword">if</span>(object == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取到更新次数及时间</span></span><br><span class="line">        <span class="keyword">return</span> object.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置某个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K k,V v)</span></span>&#123;</span><br><span class="line">        <span class="comment">//容量不能为0</span></span><br><span class="line">        <span class="keyword">if</span>(capacity == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先尝试获取缓存数据</span></span><br><span class="line">        CacheObject&lt;V&gt; object = cacheMap.get(k);</span><br><span class="line">        <span class="keyword">if</span>(object == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放入前先检查容量，如果已满，删除访问次数较少并且更新时间较早的数据</span></span><br><span class="line">            <span class="keyword">if</span>(cacheMap.size() &gt;= capacity)&#123;</span><br><span class="line">                cacheMap.entrySet().stream().min(Comparator.comparing(Map.Entry::getValue)).ifPresent(e-&gt;&#123;</span><br><span class="line">                    cacheMap.remove(e.getKey());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            object = <span class="keyword">new</span> CacheObject&lt;&gt;(v);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//有数据，直接进行更新</span></span><br><span class="line">            object.setValue(v);</span><br><span class="line">        &#125;</span><br><span class="line">        cacheMap.put(k,object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据缓存类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObject</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">CacheObject</span>&lt;<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最后更新时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> lastUpdateTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 访问次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> accessCount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CacheObject</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(CacheObject&lt;V&gt; o)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//比较次数大小</span></span><br><span class="line">            <span class="keyword">int</span> value = Integer.compare(<span class="keyword">this</span>.accessCount,o.accessCount);</span><br><span class="line">            <span class="comment">//如果次数相同，比较时间大小</span></span><br><span class="line">            <span class="keyword">return</span> value == <span class="number">0</span> ? Long.compare(<span class="keyword">this</span>.lastUpdateTime,o.lastUpdateTime) : value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方案二</strong></p><p>借助<code>TreeSet</code>和<code>HashMap</code>来实现，<code>TreeSet</code>自动排序，删除操作O(1)复杂度；但额外引入了<code>TreeSet</code>，空间复杂度增加，同时每放入一个元素，需要重新排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache1</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,CacheObject&lt;K,V&gt;&gt; cacheMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序Set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeSet&lt;CacheObject&lt;K,V&gt;&gt; treeSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache1</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;(CacheObject&lt;K,V&gt;::compareTo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        CacheObject&lt;K,V&gt; cache = cacheMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(cache == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除该对象</span></span><br><span class="line">        treeSet.remove(cache);</span><br><span class="line">        <span class="comment">//拿到value（同时更新访问次数和时间）</span></span><br><span class="line">        V value = cache.getValue();</span><br><span class="line">        <span class="comment">//添加该对象（treeSet会根据compare进行排序）</span></span><br><span class="line">        treeSet.add(cache);</span><br><span class="line">        cacheMap.put(key,cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CacheObject&lt;K,V&gt; cache = cacheMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(cache == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cacheMap.size() &gt;= capacity)&#123;</span><br><span class="line">                <span class="comment">//treeSet头部元素为最小元素（访问次数较少并且更新时间较早）</span></span><br><span class="line">                <span class="comment">//删除Map和treeSet中此条数据</span></span><br><span class="line">                cacheMap.remove(treeSet.first().getKey());</span><br><span class="line">                treeSet.pollFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            cache = <span class="keyword">new</span> CacheObject&lt;&gt;(key,value);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            treeSet.remove(cache);</span><br><span class="line">            cache.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        treeSet.add(cache);</span><br><span class="line">        cacheMap.put(key,cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObject</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">CacheObject</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最后更新时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> lastUpdateTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 访问次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> accessCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CacheObject</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新值</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.lastUpdateTime = System.nanoTime();</span><br><span class="line">            <span class="keyword">this</span>.accessCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(CacheObject&lt;K,V&gt; o)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//比较次数大小</span></span><br><span class="line">            <span class="keyword">int</span> value = Integer.compare(<span class="keyword">this</span>.accessCount,o.accessCount);</span><br><span class="line">            <span class="comment">//如果次数相同，比较时间大小</span></span><br><span class="line">            <span class="keyword">return</span> value == <span class="number">0</span> ? Long.compare(<span class="keyword">this</span>.lastUpdateTime,o.lastUpdateTime) : value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            CacheObject&lt;?, ?&gt; that = (CacheObject&lt;?, ?&gt;) o;</span><br><span class="line">            <span class="keyword">return</span> lastUpdateTime == that.lastUpdateTime &amp;&amp;</span><br><span class="line">                    accessCount == that.accessCount &amp;&amp;</span><br><span class="line">                    Objects.equals(key, that.key) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, that.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(key, value, lastUpdateTime, accessCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们提供两种时间复杂度接近O(1)的<strong>LFU</strong>代码示例。</p><p><strong>实现方案三</strong></p><p>借助<code>LinkedHashMap</code>、双向链表、<code>HashMap</code>来实现。</p><p>原理：</p><ol><li>用一个双向链表来保存命中数；</li><li>命中数相同的放在一个双向链表的<code>LinkedHashMap</code>中，主要是利用了它的accessOrder属性来实现根据访问顺序来排序；</li><li><code>HashMap</code>集合来保存所有的元素，因为只要key的hash算法合理的理想情况下，put，get操作是O(1)；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache2</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, CacheObject&lt;K,V&gt;&gt; cacheMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;K&gt; countHead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache2</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;参数错误，容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line"></span><br><span class="line">        cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 次数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下一个节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;K&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上一个节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;K&gt; prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果访问次数相同，会被存入linkMap中，最先被访问过的放在链表后面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        LinkedHashMap&lt;K,Object&gt; linkMap;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;K&gt; prev, <span class="keyword">int</span> count, Node&lt;K&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheObject</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K&gt; node;</span><br><span class="line">        CacheObject(V val, Node&lt;K&gt; node) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = val;</span><br><span class="line">            <span class="keyword">this</span>.node = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 容量不足时缓存删除</span></span><br><span class="line">        removeCache(key);</span><br><span class="line">        <span class="comment">// 放入缓存</span></span><br><span class="line">        putVal(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeCache</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果有K,不需要判定容量问题</span></span><br><span class="line">        <span class="keyword">if</span> (cacheMap.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; first;</span><br><span class="line"></span><br><span class="line">        K removeKey = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超过最大缓存容量</span></span><br><span class="line">        <span class="keyword">while</span>(cacheMap.size() &gt;= capacity) &#123;</span><br><span class="line">            <span class="comment">// 第一个节点</span></span><br><span class="line">            <span class="keyword">if</span> ((first=countHead) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 节点元素存在</span></span><br><span class="line">                <span class="keyword">if</span> (first.linkMap != <span class="keyword">null</span> &amp;&amp; !first.linkMap.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">// 该节点只有一个元素的场合</span></span><br><span class="line">                    <span class="keyword">if</span> (first.linkMap.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                        removeKey = (K) first.linkMap.keySet().toArray()[<span class="number">0</span>];</span><br><span class="line">                        countHead = first.next;</span><br><span class="line">                        countHead.prev = <span class="keyword">null</span>;</span><br><span class="line">                        first = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Iterator&lt;K&gt; iterator = first.linkMap.keySet().iterator();</span><br><span class="line">                        <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">                            removeKey = iterator.next();</span><br><span class="line">                            first.linkMap.remove(removeKey);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cacheMap.remove(removeKey);</span><br><span class="line">                    <span class="comment">// 节点元素不存在</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    countHead = first.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putVal</span><span class="params">(K key, V val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; be = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 新加入缓存的场合</span></span><br><span class="line">        <span class="keyword">if</span> (!cacheMap.containsKey(key)) &#123;</span><br><span class="line"></span><br><span class="line">            LinkedHashMap&lt;K,Object&gt; newLinkMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(capacity, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 有缓存一次的场合</span></span><br><span class="line">            <span class="keyword">if</span> (countHead != <span class="keyword">null</span> &amp;&amp; countHead.count == <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (countHead.linkMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    countHead.linkMap = newLinkMap;</span><br><span class="line">                &#125;</span><br><span class="line">                countHead.linkMap.put(key,PRESENT);</span><br><span class="line">                be = countHead;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;K&gt; first = countHead;</span><br><span class="line">                Node&lt;K&gt; node = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="number">1</span>, countHead == <span class="keyword">null</span> ? <span class="keyword">null</span> : first);</span><br><span class="line">                newLinkMap.put(key,PRESENT);</span><br><span class="line">                node.linkMap = newLinkMap;</span><br><span class="line">                be = node;</span><br><span class="line">                <span class="comment">// 缓存不为空，即存在大于1的缓存，把1放在前面</span></span><br><span class="line">                <span class="keyword">if</span> (countHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    first.prev = node;</span><br><span class="line">                &#125;</span><br><span class="line">                countHead = node;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            moveCount(key);</span><br><span class="line">        &#125;</span><br><span class="line">        cacheMap.put(key, <span class="keyword">new</span> CacheObject&lt;&gt;(val, be));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中取得数据，同时随着访问次数的增加，移动元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!cacheMap.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        moveCount(key);</span><br><span class="line">        <span class="keyword">return</span> cacheMap.get(key).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随着访问次数增加来移动元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveCount</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; currentNode = cacheMap.get(key).node;</span><br><span class="line">        currentNode.linkMap.remove(key);</span><br><span class="line">        <span class="keyword">int</span> currentCount = currentNode.count;</span><br><span class="line">        <span class="keyword">int</span> nextCount = currentCount + <span class="number">1</span>;</span><br><span class="line">        LinkedHashMap&lt;K,Object&gt; newLinkMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(capacity, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Node&lt;K&gt; after = currentNode.next;</span><br><span class="line">        Node&lt;K&gt; before = currentNode.prev;</span><br><span class="line">        <span class="keyword">if</span> (currentNode.linkMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            currentNode = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            before = currentNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下一个节点没有的场合,新增一个+1的节点放到最后</span></span><br><span class="line">        <span class="keyword">if</span> (after == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K&gt; node = <span class="keyword">new</span> Node&lt;&gt;(before, nextCount, <span class="keyword">null</span>);</span><br><span class="line">            newLinkMap.put(key, PRESENT);</span><br><span class="line">            node.linkMap = newLinkMap;</span><br><span class="line">            cacheMap.get(key).node = node;</span><br><span class="line">            before.next = node;</span><br><span class="line">            <span class="comment">// 下一个正好是+1次数的节点，直接追加</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (after.count == nextCount) &#123;</span><br><span class="line">            after.linkMap.put(key, PRESENT);</span><br><span class="line">            before.next = after;</span><br><span class="line">            after.prev = before;</span><br><span class="line">            cacheMap.get(key).node = after;</span><br><span class="line">            <span class="comment">// 下一个节点的次数&gt;+1次数，新建+1节点，再连接前后节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (after.count &gt; nextCount) &#123;</span><br><span class="line">            Node&lt;K&gt; node = <span class="keyword">new</span> Node&lt;&gt;(before, nextCount, after);</span><br><span class="line">            newLinkMap.put(key, PRESENT);</span><br><span class="line">            node.linkMap = newLinkMap;</span><br><span class="line">            cacheMap.get(key).node = node;</span><br><span class="line">            before.next = node;</span><br><span class="line">            after.prev  = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方案四</strong></p><p>只借助<code>HashMap</code>和双向链表实现O(1)的<strong>LFU</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LFUCache3</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, Node&lt;K,V&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, DoubleLinkedList&lt;K,V&gt;&gt; countMap;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小频次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        Node&lt;K,V&gt; prev;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Node(K key, V value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache3</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;参数错误，容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.min = Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handle(node, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关键函数，当put/set操作发生后调用此函数，分为新增结点以及对现有结点操作</span></span><br><span class="line"><span class="comment">     * 1、新增结点：直接接到对于频次的双向链表头部</span></span><br><span class="line"><span class="comment">     * 2、已存在结点：从老结点所在频次对应的双向链表中删除此结点后，再将其加入到频次+1对应的双向链表的头部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isNew 是否是新增结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Node&lt;K,V&gt; node, <span class="keyword">boolean</span> isNew)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = node.count;</span><br><span class="line">        <span class="comment">//维护全局最小频次</span></span><br><span class="line">        min = Math.min(count, min);</span><br><span class="line">        <span class="comment">//如果有这个次数的Map</span></span><br><span class="line">        <span class="keyword">if</span> (countMap.containsKey(node.count)) &#123;</span><br><span class="line">            <span class="comment">//拿到旧链表</span></span><br><span class="line">            DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(node.count);</span><br><span class="line">            <span class="keyword">if</span> (!isNew) &#123;</span><br><span class="line">                <span class="comment">//不是新增的话，由于访问次数变化，需要在链表下删除该节点</span></span><br><span class="line">                node.count++;</span><br><span class="line">                oldList.delNode(node);</span><br><span class="line">                <span class="comment">// 如果</span></span><br><span class="line">                <span class="comment">// 1、当前结点不为新增结点</span></span><br><span class="line">                <span class="comment">// 2、当前结点频次==全局最小频次</span></span><br><span class="line">                <span class="comment">// 3、且删除该结点后，对应频次双向链表为空，</span></span><br><span class="line">                <span class="comment">// 则全局最小频次+1</span></span><br><span class="line">                <span class="keyword">if</span> (count == min &amp;&amp; oldList.size == <span class="number">0</span>) &#123;</span><br><span class="line">                    countMap.remove(min);</span><br><span class="line">                    min++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有需要新增一个</span></span><br><span class="line">        <span class="keyword">if</span> (!countMap.containsKey(node.count)) &#123;</span><br><span class="line">            countMap.put(node.count, <span class="keyword">new</span> DoubleLinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        DoubleLinkedList&lt;K,V&gt; newList = countMap.get(node.count);</span><br><span class="line">        newList.addHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V val)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; node;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            node = map.get(key);</span><br><span class="line">            node.value = val;</span><br><span class="line">            handle(node, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = <span class="keyword">new</span> Node&lt;&gt;(key, val);</span><br><span class="line">            <span class="comment">//容量超出，则删除全局最小频次对应双向链表中的尾部结点</span></span><br><span class="line">            <span class="keyword">if</span> (map.size() &gt;= capacity) &#123;</span><br><span class="line">                DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(min);</span><br><span class="line">                Node&lt;K,V&gt; tail = oldList.delTail();</span><br><span class="line">                map.remove(tail.key);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            handle(node, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        Node&lt;K,V&gt; head;</span><br><span class="line">        Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.head.next = tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            node.next = head.next;</span><br><span class="line">            head.next.prev = node;</span><br><span class="line">            node.prev = head;</span><br><span class="line">            head.next = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">delNode</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; prev = node.prev;</span><br><span class="line">            Node&lt;K,V&gt; next = node.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">delTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">this</span>.tail.prev;</span><br><span class="line">            node.prev.next = <span class="keyword">this</span>.tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = node.prev;</span><br><span class="line">            node.prev = <span class="keyword">null</span>;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MRU"><a href="#MRU" class="headerlink" title="MRU"></a>MRU</h2><p><strong>MRU(Most recently used)</strong> 最近最常使用，这种缓存淘汰算法使用的较少，其淘汰最近常用的项目。一般用于处理一个条目越久，越容易被访问的情况。</p><p>核心原理：一条数据很久没有被访问，则它将来被访问的概率可能会很高。</p><p>可以看到它和<strong>LRU</strong>是正好相反的。</p><p>优点：对于一些特定的场景，可能会有很好的效果。<br>缺点：适用范围比较窄。</p><p>其相关代码如下，这儿使用双向链表来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这中方案查询会遍历双向链表，时间复杂度较高，如果实现接近O(1)的<strong>MRU</strong>可以借助<code>HashMap</code>，当然空间复杂度会变高，与<strong>LRU</strong>类似，这儿不再过多介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IMRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存队列</span></span><br><span class="line">    <span class="keyword">private</span> DoubleWayLinkedList&lt;K,V&gt; linkedList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="comment">//accessOrder为true的话，最近访问的都会在底部，我们达到容量后直接删除底部元素即可</span></span><br><span class="line">        <span class="comment">//由于linkedHashMap不支持public的删除底端元素，因此我们手动写一个双端队列，添加、访问数据后会进行排序，将最新访问的数据移动到尾部</span></span><br><span class="line">        linkedList = <span class="keyword">new</span> DoubleWayLinkedList&lt;&gt;(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedList.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断容量是否达到</span></span><br><span class="line">        <span class="keyword">int</span> size = linkedList.getSize();</span><br><span class="line">        <span class="keyword">if</span>(size &gt;= capacity)&#123;</span><br><span class="line">            <span class="comment">//删除最新元素(尾部为最新元素)</span></span><br><span class="line">            linkedList.delTail();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        linkedList.add(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表，旧的元素在头部，新的元素在尾部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleWayLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> accessOrder;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> K key;</span><br><span class="line">            <span class="keyword">private</span> V value;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; left;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; right;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleWayLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.accessOrder = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleWayLinkedList</span><span class="params">(<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = getNode(key);</span><br><span class="line">            <span class="keyword">if</span>(node ==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(accessOrder)&#123;</span><br><span class="line">                <span class="comment">//排序，将刚访问的放到尾部</span></span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">add</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">            <span class="comment">//先判断元素key存不存在</span></span><br><span class="line">            Node&lt;K,V&gt; node = getNode(key);</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//新增数据直接添加到链表尾部</span></span><br><span class="line">                <span class="keyword">return</span> addTail(key,value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//存在数据的话，直接更新数据，并移动到链表尾部</span></span><br><span class="line">                node.value = value;</span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = head;</span><br><span class="line">            <span class="keyword">while</span> (node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.key.equals(key))&#123;</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">            Node&lt;K,V&gt; last;</span><br><span class="line">            <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = e, b = p.left, a = p.right;</span><br><span class="line">                p.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = a;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    b.right = a;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    a.left = b;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    last = b;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = p;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    p.left = last;</span><br><span class="line">                    last.right = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tail = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> V <span class="title">addHead</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                head.left = node;</span><br><span class="line">                node.right = head;</span><br><span class="line">                head = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> V <span class="title">addTail</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.left = tail;</span><br><span class="line">                tail.right = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">delHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.right;</span><br><span class="line">            <span class="comment">//只有一个节点，此时head.right=null，赋值head=null</span></span><br><span class="line">            <span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">                head.left = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = tail.left;</span><br><span class="line">            <span class="keyword">if</span> (tail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                tail.right = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h2><p><strong>ARC(Adaptive Replacement Cache)</strong> 自适应缓存替换，这种缓存淘汰策略结合了 <strong>LRU</strong> 和 <strong>LFU</strong> 的特点。</p><p><strong>ARC</strong> 的精髓就是根据被淘汰数据的访问情况，而增加对应 <strong>LRU</strong> 还是 <strong>LFU</strong> 链表的大小。</p><p><strong>ARC</strong> 包含了四个链表。 <strong>LRU</strong> 和 <strong>LRU Ghost</strong> ， <strong>LFU</strong> 和 <strong>LFU Ghost</strong>， <strong>Ghost</strong> 链表为对应淘汰的数据记录链表，不记录数据，只记录 <strong>ID</strong> 等信息。</p><p>当数据 A 加入 <strong>LRU</strong> 后，如果 A 再次被访问，则同时被放到 <strong>LFU</strong> 链表中。所以 <strong>LFU</strong> 链表的缓存为 <strong>LRU</strong> 链表的多次访问的数据。</p><p>当 <strong>LRU</strong> 链表淘汰了 B，那么 B 的信息则进入到 <strong>LRU Ghost</strong> 链表。如果 B 在之后再次被访问，则增加 <strong>LRU</strong> 链表的大小，同时缩减 <strong>LFU</strong> 链表的大小。<strong>LFU</strong> 链表同理。</p><p>所以，这是一个根据最近未使用和最少频率使用动态调整的算法。</p><p>优点：这种算法具有很高的命中率，且可以根据数据使用方式动态调整<strong>LRU</strong>或<strong>LFU</strong>内存大小。</p><p>缺点：实现较复杂，且内存占用较高。</p><p>我们用代码来实现一个<strong>ARC</strong>。</p><p>根据上面的<strong>LRU</strong>和<strong>LFU</strong>代码示例，由于Java自带的<code>LinkedHashMap</code>不能方便的操作内部旧元素。因此对于<strong>ARC</strong>内部使用的<strong>LRU</strong>，我们需要自写一个。而<strong>LFU</strong>可以采用上面的<code>LFUCache3</code>，但仍有一些方法需要补充。</p><p>因此我提供了两个时间复杂度接近O(1)的<strong>LRU</strong>和<strong>LFU</strong>用来实现<strong>ARC</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARC_LRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TLinkedHashMap&lt;K,V&gt; linkedHashMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ARC_LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        linkedHashMap = <span class="keyword">new</span> TLinkedHashMap&lt;&gt;(capacity,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        linkedHashMap.add(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.contains(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        linkedHashMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">removeEldest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.removeEldest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表，旧的元素在头部，新的元素在尾部</span></span><br><span class="line"><span class="comment">     * 由于原来使用Java自带的LinkedHashMap没法方便的操作旧元素，仿照LinkedHashMap自写一个即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TLinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; head;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;K,V&gt; tail;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;K,Node&lt;K,V&gt;&gt; hashMap;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> accessOrder;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> K key;</span><br><span class="line">            <span class="keyword">private</span> V value;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; left;</span><br><span class="line">            <span class="keyword">private</span> Node&lt;K,V&gt; right;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key,V value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity,<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(capacity,<span class="number">0.75f</span>,accessOrder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TLinkedHashMap</span><span class="params">(<span class="keyword">int</span> capacity,<span class="keyword">float</span> loadFactor,<span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.accessOrder = accessOrder;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">            <span class="keyword">this</span>.hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(capacity,loadFactor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = hashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(accessOrder)&#123;</span><br><span class="line">                <span class="comment">//排序，将刚访问的放到尾部</span></span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">add</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">            <span class="comment">//先判断元素key存不存在</span></span><br><span class="line">            Node&lt;K,V&gt; node = hashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                node = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">                <span class="comment">//新增数据直接添加到链表尾部</span></span><br><span class="line">                hashMap.put(key,node);</span><br><span class="line">                addTail(node);</span><br><span class="line">                <span class="comment">//判断容量是否超出，超出移除老元素</span></span><br><span class="line">                <span class="keyword">if</span>(size &gt; capacity)&#123;</span><br><span class="line">                    removeEldest();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//存在数据的话，直接更新数据，并移动到链表尾部</span></span><br><span class="line">                node.value = value;</span><br><span class="line">                hashMap.put(key,node);</span><br><span class="line">                afterNodeAccess(node);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">removeEldest</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = delHead();</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                hashMap.remove(node.key);</span><br><span class="line">                <span class="keyword">return</span> node.key;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 元素被访问，将其移动到链表尾部</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; last;</span><br><span class="line">            <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">                Node&lt;K,V&gt; p = e, b = p.left, a = p.right;</span><br><span class="line">                p.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (b == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = a;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    b.right = a;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    a.left = b;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    last = b;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    head = p;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    p.left = last;</span><br><span class="line">                    last.right = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tail = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTail</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                head = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.left = tail;</span><br><span class="line">                tail.right = node;</span><br><span class="line">                tail = node;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title">delHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node&lt;K,V&gt; temp = head;</span><br><span class="line">            head = head.right;</span><br><span class="line">            <span class="comment">//只有一个节点，此时head.right=null，赋值head=null</span></span><br><span class="line">            <span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">                head.left = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delNode</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; prev = node.left;</span><br><span class="line">            Node&lt;K,V&gt; next = node.right;</span><br><span class="line">            <span class="keyword">if</span>(prev != <span class="keyword">null</span>)&#123;</span><br><span class="line">                prev.right = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                next.left = prev;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hashMap.containsKey(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = hashMap.get(key);</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                delNode(node);</span><br><span class="line">                hashMap.remove(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARC_LFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILFUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, Node&lt;K,V&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, DoubleLinkedList&lt;K,V&gt;&gt; countMap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        Node&lt;K,V&gt; prev;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        Node(K key, V value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ARC_LFUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;参数错误，容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.min = Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handle(node, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询lfu中是否包含指定key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; node = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(countMap.containsKey(node.count))&#123;</span><br><span class="line">            <span class="comment">//拿到双向链表</span></span><br><span class="line">            DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(node.count);</span><br><span class="line">            <span class="comment">//删除</span></span><br><span class="line">            oldList.delNode(node);</span><br><span class="line">            <span class="comment">//判断是否全局最小值</span></span><br><span class="line">            <span class="keyword">if</span>(node.count == min &amp;&amp; oldList.size == <span class="number">0</span>)&#123;</span><br><span class="line">                countMap.remove(min);</span><br><span class="line">                min = countMap.keySet().stream().min(Integer::compareTo).orElse(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">removeEldest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到全局最小频次数据，删除尾节点（时间较旧的数据）</span></span><br><span class="line">        DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(min);</span><br><span class="line">        <span class="keyword">if</span>(oldList == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;K,V&gt; tail = oldList.delTail();</span><br><span class="line">        K key = tail.key;</span><br><span class="line">        map.remove(key);</span><br><span class="line">        <span class="comment">//删除后，需要判断最小频次是否变化</span></span><br><span class="line">        <span class="keyword">if</span>(tail.count == min &amp;&amp; oldList.size == <span class="number">0</span>)&#123;</span><br><span class="line">            countMap.remove(min);</span><br><span class="line">            min = countMap.keySet().stream().min(Integer::compareTo).orElse(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Node&lt;K,V&gt; node, <span class="keyword">boolean</span> isNew)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = node.count;</span><br><span class="line">        <span class="comment">//维护全局最小频次</span></span><br><span class="line">        min = Math.min(count, min);</span><br><span class="line">        <span class="comment">//如果有这个次数的Map</span></span><br><span class="line">        <span class="keyword">if</span> (countMap.containsKey(node.count)) &#123;</span><br><span class="line">            <span class="comment">//拿到旧链表</span></span><br><span class="line">            DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(node.count);</span><br><span class="line">            <span class="keyword">if</span> (!isNew) &#123;</span><br><span class="line">                <span class="comment">//不是新增的话，由于访问次数变化，需要在链表下删除该节点</span></span><br><span class="line">                node.count++;</span><br><span class="line">                oldList.delNode(node);</span><br><span class="line">                <span class="comment">// 如果</span></span><br><span class="line">                <span class="comment">// 1、当前结点不为新增结点</span></span><br><span class="line">                <span class="comment">// 2、当前结点频次==全局最小频次</span></span><br><span class="line">                <span class="comment">// 3、且删除该结点后，对应频次双向链表为空，</span></span><br><span class="line">                <span class="comment">// 则全局最小频次+1</span></span><br><span class="line">                <span class="keyword">if</span> (count == min &amp;&amp; oldList.size == <span class="number">0</span>) &#123;</span><br><span class="line">                    countMap.remove(min);</span><br><span class="line">                    min++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有需要新增一个</span></span><br><span class="line">        <span class="keyword">if</span> (!countMap.containsKey(node.count)) &#123;</span><br><span class="line">            countMap.put(node.count, <span class="keyword">new</span> DoubleLinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        DoubleLinkedList&lt;K,V&gt; newList = countMap.get(node.count);</span><br><span class="line">        newList.addHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V val)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; node;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            node = map.get(key);</span><br><span class="line">            node.value = val;</span><br><span class="line">            handle(node, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = <span class="keyword">new</span> Node&lt;&gt;(key, val);</span><br><span class="line">            <span class="comment">//容量超出，则删除全局最小频次对应双向链表中的尾部结点</span></span><br><span class="line">            <span class="keyword">if</span> (map.size() &gt;= capacity) &#123;</span><br><span class="line">                DoubleLinkedList&lt;K,V&gt; oldList = countMap.get(min);</span><br><span class="line">                Node&lt;K,V&gt; tail = oldList.delTail();</span><br><span class="line">                map.remove(tail.key);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            handle(node, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        Node&lt;K,V&gt; head;</span><br><span class="line">        Node&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.head = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.tail = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">            <span class="keyword">this</span>.head.next = tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            node.next = head.next;</span><br><span class="line">            head.next.prev = node;</span><br><span class="line">            node.prev = head;</span><br><span class="line">            head.next = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">delNode</span><span class="params">(Node&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; prev = node.prev;</span><br><span class="line">            Node&lt;K,V&gt; next = node.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">delTail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">this</span>.tail.prev;</span><br><span class="line">            node.prev.next = <span class="keyword">this</span>.tail;</span><br><span class="line">            <span class="keyword">this</span>.tail.prev = node.prev;</span><br><span class="line">            node.prev = <span class="keyword">null</span>;</span><br><span class="line">            node.next = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用上面的<strong>LRU</strong>和<strong>LFU</strong>来构建<strong>ARC</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IARCCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARCCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">IARCCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自适应值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ARC_LRUCache&lt;K,V&gt; lruCache;</span><br><span class="line">    <span class="keyword">private</span> ARC_LRUCache&lt;K,Object&gt; lruCacheGhost;</span><br><span class="line">    <span class="keyword">private</span> ARC_LFUCache&lt;K,V&gt; lfuCache;</span><br><span class="line">    <span class="keyword">private</span> ARC_LFUCache&lt;K,Object&gt; lfuCacheGhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ARCCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;容量不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LRU和LFU的淘汰我们在当前类进行控制</span></span><br><span class="line">        <span class="comment">//LRU、LFU、LRUGhost、LFUGhost最大只能达到capacity，</span></span><br><span class="line">        <span class="comment">// 我们初始化为capacity+1，这样原来的内部淘汰策略就不会触发（因为淘汰时要加入ghost，我们手动控制）</span></span><br><span class="line">        lruCache = <span class="keyword">new</span> ARC_LRUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        lruCacheGhost = <span class="keyword">new</span> ARC_LRUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        lfuCache = <span class="keyword">new</span> ARC_LFUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        lfuCacheGhost = <span class="keyword">new</span> ARC_LFUCache&lt;&gt;(capacity+<span class="number">1</span>);</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从lru获取数据，如果存在，lru移除并将其放入LFU</span></span><br><span class="line">        V v = lruCache.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            lruCache.remove(key);</span><br><span class="line">            lfuCache.set(key,v);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//尝试从lfu获取数据，存在直接返回数据</span></span><br><span class="line">        v = lfuCache.get(key);</span><br><span class="line">        <span class="keyword">if</span>(v != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//都不存在，直接返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查lru是否有该值，有的话移除并放入lfu</span></span><br><span class="line">        <span class="keyword">if</span>(lruCache.contains(key))&#123;</span><br><span class="line">            lruCache.remove(key);</span><br><span class="line">            lfuCache.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查lfu是否已经有该key</span></span><br><span class="line">        <span class="keyword">if</span>(lfuCache.contains(key))&#123;</span><br><span class="line">            <span class="comment">//存在更新并返回</span></span><br><span class="line">            lfuCache.set(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//都不存在</span></span><br><span class="line">        <span class="comment">//查询lru ghost情况</span></span><br><span class="line">        <span class="keyword">if</span>(lruCacheGhost.contains(key))&#123;</span><br><span class="line">            <span class="comment">//lru过小，需要增大p值</span></span><br><span class="line">            <span class="comment">//根据 lruGhost和lfuGhost比例来计算p值，delta默认1</span></span><br><span class="line">            <span class="comment">//如果 lfuGhost数据量 &gt; lruGhost 数据量，说明lfu淘汰数据数据较快（命中率低），lru淘汰数据较慢（命中率高）</span></span><br><span class="line">            <span class="comment">//此时 delta = lfuGhostSize / lruGhostSize 大于1，也就是快速增大lru，以适应当前数据情况</span></span><br><span class="line">            <span class="keyword">int</span> delta = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> lruGhostSize = lruCacheGhost.size();</span><br><span class="line">            <span class="keyword">int</span> lfuGhostSize = lfuCacheGhost.size();</span><br><span class="line">            <span class="keyword">if</span>(lfuGhostSize &gt; lruGhostSize)&#123;</span><br><span class="line">                delta = lfuGhostSize / lruGhostSize;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p+delta &gt;= capacity)&#123;</span><br><span class="line">                p = capacity;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p += delta;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//lru和lfu容量不能超出范围</span></span><br><span class="line">            <span class="keyword">if</span>(lruCache.size() + lfuCache.size() &gt;= capacity)&#123;</span><br><span class="line">                <span class="comment">//超出之后需要根据p值对lru和lfu进行调整</span></span><br><span class="line">                replace(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在lruGhost中删除</span></span><br><span class="line">            lruCacheGhost.remove(key);</span><br><span class="line">            <span class="comment">//将数据放入lfu</span></span><br><span class="line">            lfuCache.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果在lfuGhost中</span></span><br><span class="line">        <span class="keyword">if</span>(lfuCacheGhost.contains(key))&#123;</span><br><span class="line">            <span class="comment">//lfu 过小，需要减小p值</span></span><br><span class="line">            <span class="comment">//根据lruGhost和lfuGhost来计算p值，delta默认1</span></span><br><span class="line">            <span class="comment">//如果lruGhost数据量 &gt; lfuGhost数据量，说明lru淘汰数据比较快（命中率低），lfu淘汰数据慢（命中率高）</span></span><br><span class="line">            <span class="comment">//此时 delta = lruGhostSize / lfuGhostSize 大于1，也就是快速增大lfu，以适应当前情况</span></span><br><span class="line">            <span class="keyword">int</span> delta = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> lruGhostSize = lruCacheGhost.size();</span><br><span class="line">            <span class="keyword">int</span> lfuGhostSize = lfuCacheGhost.size();</span><br><span class="line">            <span class="keyword">if</span>(lruGhostSize &gt; lfuGhostSize)&#123;</span><br><span class="line">                delta = lruGhostSize / lfuGhostSize;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(delta &gt;= p)&#123;</span><br><span class="line">                p = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p -= delta;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//lru和lfu容量不能超出范围</span></span><br><span class="line">            <span class="keyword">if</span>(lruCache.size() + lfuCache.size() &gt;= capacity)&#123;</span><br><span class="line">                <span class="comment">//超出之后需要根据p值对lru和lfu进行调整</span></span><br><span class="line">                replace(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在lfuGhost中删除</span></span><br><span class="line">            lfuCacheGhost.remove(key);</span><br><span class="line">            <span class="comment">//添加至lfu</span></span><br><span class="line">            lfuCache.set(key,value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lru和lfu总容量不能超过capacity</span></span><br><span class="line">        <span class="keyword">if</span>(lruCache.size() + lfuCache.size() &gt;= capacity)&#123;</span><br><span class="line">            replace(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lruGhost 容量不能超过 capacity - p</span></span><br><span class="line">        <span class="keyword">if</span>(lruCacheGhost.size() &gt; capacity - p)&#123;</span><br><span class="line">            lruCacheGhost.removeEldest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lfuGhost容量不能超过 p</span></span><br><span class="line">        <span class="keyword">if</span>(lfuCacheGhost.size() &gt; p)&#123;</span><br><span class="line">            lfuCacheGhost.removeEldest();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到lru</span></span><br><span class="line">        lruCache.set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于根据P的当前学习值自适应地从lru或lfu中淘汰数据,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lfuGhostContainsKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replace</span><span class="params">(<span class="keyword">boolean</span> lfuGhostContainsKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lruSize = lruCache.size();</span><br><span class="line">        <span class="keyword">if</span>(lruSize &gt; <span class="number">0</span> &amp;&amp; (lruSize &gt; p || (lruSize == p &amp;&amp; lfuGhostContainsKey)))&#123;</span><br><span class="line">            <span class="comment">//lru移除旧元素</span></span><br><span class="line">            K key = lruCache.removeEldest();</span><br><span class="line">            <span class="keyword">if</span>(key != <span class="keyword">null</span>)&#123;</span><br><span class="line">                lruCacheGhost.set(key,PRESENT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//lfu移除旧元素</span></span><br><span class="line">            K key = lfuCache.removeEldest();</span><br><span class="line">            <span class="keyword">if</span>(key != <span class="keyword">null</span>)&#123;</span><br><span class="line">                lfuCacheGhost.set(key,PRESENT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章我们了解了一些常见的缓存淘汰算法，对其工作原理也有了简单认知，其实每一种算法都有自己的特色，但是真正在使用过程中，或多或少都会进行对应的优化。比如 <strong>Redis</strong> 会同时使用 <strong>LRU</strong> 和 <strong>LFU</strong> ，同时 <strong>LFU</strong> 为了体现时间维度特征而会主动将计数器减少等策略。</p><p>有兴趣的同学可以看下这篇关于<strong>Redis</strong>淘汰策略的文章 <a href="https://www.sakuratears.top/blog/Redis%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5.html">Redis淘汰策略</a> 。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一般情况下，我们读取数据，无论从数据库还是磁盘，都是比较慢的，要加快数据读取可以使用缓存，将数据缓存下来。例如比较有名的工具&lt;strong&gt;Redis&lt;/strong&gt;等。&lt;/p&gt;
&lt;p&gt;无论如何缓存数据，随着数据量增大，内存容量是有一定限制的，因此我们只能缓存定量的数据。&lt;/p&gt;
&lt;p&gt;对于我们来说，肯定要缓存经常使用或者未来很大概率被使用的数据，这样才有利于我们的业务。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="缓存淘汰算法" scheme="https://www.sakuratears.top/tags/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表相关经典问题</title>
    <link href="https://www.sakuratears.top/blog/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html"/>
    <id>https://www.sakuratears.top/blog/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98.html</id>
    <published>2021-03-21T10:59:00.000Z</published>
    <updated>2021-03-21T11:09:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链表实际上是线性表的链式存储结构，与数组不同的是，它是用一组任意的存储单元来存储线性表中的数据，存储单元不一定是连续的，且链表的长度不是固定的，链表数据的这一特点使其可以非常的方便地实现节点的插入和删除操作。</p><p>链表的每个元素称为一个节点，每个节点都可以存储在内存中的不同的位置，为了表示每个元素与后继元素的逻辑关系，以便构成“一个节点链着一个节点”的链式存储结构，除了存储元素本身的信息外，还要存储其直接后继信息。</p><p>因此，每个节点都包含两个部分，第一部分称为链表的数据区域，用于存储元素本身的数据信息，可以用data表示，它不局限于一个成员数据，也可是多个成员数据，第二部分是一个结构体指针，称为链表的指针域，用于存储其直接后继的节点信息，可以用next表示，next的值实际上就是下一个节点的地址，当前节点为末节点时，next的值设为空指针。</p><p>链表代码可以用下述代码表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我们来看一下关于链表的一些经典问题。</p><ol><li>如何判断一个链表是否有环？如果有环，如何找到环入口节点？</li><li>如何判断两个链表是否相交？</li></ol><p>对于上述问题，我们分别来看一下。</p><h2 id="是否环链表"><a href="#是否环链表" class="headerlink" title="是否环链表"></a>是否环链表</h2><p>对于第一个问题，我们可以采用“快慢指针”的方法来解决。如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-678.jpg" alt="upload successful"></p><p>思路：（结论1）设置快慢指针，都从链表头出发，快指针每次走两步，慢指针一次走一步，假如有环，一定相遇于环中某点。</p><pre><code> （结论2）接着让两个指针分别从相遇点和链表头出发，两者都改为每次走一步，最终相遇于环入口。</code></pre><p>我们来看下这两个结论。</p><p>结论1：设置快慢指针fast和slow，fast每次走两步，low每次走一步。假如有环，两者一定在环中相遇。（因为low指针一旦进环，可以看作是fast指针在追slow指针，因为fast指针每次走两步，slow指针每次走一步，所以最后一定能相遇）。</p><p>结论2：我们看上面的简化图，链表头a到链表环入口节点b的距离定义为l，环入口b到相遇点p的距离（右边）定义为m，相遇点p到环入口b的距离（左边）定义为n。</p><p>当快指针和慢指针相遇时：</p><p>快指针路程 = l+(m+n)k+m，k&gt;=1，其中m+n为环的长度，k为环的圈数（k&gt;=1，即最少一圈，不能是0圈，不然快慢指针走的路程一样，矛盾）。</p><p>慢指针路程 = l+m。</p><p>因为快指针的路程是慢指针的路程的两倍，所以：(l+m)*2 = l+(m+n)k+m，其中k&gt;=1。</p><p>化简得到 l =(k-1)(m+n)+n</p><p>这个式子的意思是：<strong>链表头到环入口的距离=相遇点到环入口的距离+(k-1)圈数环长度。其中k&gt;=1，所以k-1&gt;=0圈。</strong>  所以两个指针分别从链表头和相遇点出发，最后一定相遇于环入口。</p><p>根据上面内容，可以写出判断是否为环链表的代码及找到环入口节点的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 链表节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 是否环链表</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">    Node fast = head;</span><br><span class="line">    Node slow = head;</span><br><span class="line">    <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取环链表入口节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getLoopStartNode</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">    <span class="comment">//快慢指针</span></span><br><span class="line">    Node fast = head;</span><br><span class="line">    Node slow = head;</span><br><span class="line">    <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        <span class="comment">//相遇退出，此时快慢指针位置为相遇点</span></span><br><span class="line">        <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有环，return null</span></span><br><span class="line">    <span class="keyword">if</span> (fast==<span class="keyword">null</span> || fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="comment">//如果有环，两个指针分别从链表头和相遇点出发，最终必定在环入口相遇</span></span><br><span class="line">    <span class="keyword">while</span> (slow!=fast)&#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实获取环链表入口节点返回null，也代表该链表不是环链表。</p><p>我们再来看下第二个问题，如何判断两个链表是否相交。</p><p>两个链表一般有这三种情况：两个无环链表、两个有环链表、一个有环链表和一个无环链表。</p><p>对于上面三种情况，我们分别来看下：</p><h2 id="两个无环链表相交问题"><a href="#两个无环链表相交问题" class="headerlink" title="两个无环链表相交问题"></a>两个无环链表相交问题</h2><p>两个无环链表A、B如果相交，则在相交点及之后的节点必然相同。如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-679.jpg" alt="upload successful"></p><p>这非常容易理解，当A、B链表相交后，相交节点如果为PNode，则下一个节点 PNode.next 即是A的节点，也是B的节点。</p><p>因为从相交点往后两链表都是相同的，我们往前移动一定位置，较短的链表会到链表头。</p><p>因此我们以A、B当中较短的链表长度为准，从该位置遍历比较两个链表节点，如果节点相同，则说明A、B相交。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断两个无环链表是否相交</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> node2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">noLoopNodeIsIntersect</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node1==<span class="keyword">null</span>||node2==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node temp1 = node1;</span><br><span class="line">    Node temp2 = node2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//PS：两个链表相交，相交点及之后的节点会完全一致</span></span><br><span class="line">    <span class="comment">//1.拿到两链表长度</span></span><br><span class="line">    <span class="keyword">int</span> size1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        size1++;</span><br><span class="line">        temp1 = temp1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (temp2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        size2++;</span><br><span class="line">        temp2 = temp2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.对于较长的链表，遍历到与短链表相同长度</span></span><br><span class="line">    <span class="keyword">if</span>(size1 &gt; size2)&#123;</span><br><span class="line">        <span class="keyword">int</span> p1 = size1 -size2;</span><br><span class="line">        <span class="keyword">while</span> (p1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node1 = node1.next;</span><br><span class="line">            p1--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p2 = size2 -size1;</span><br><span class="line">        <span class="keyword">while</span> (p2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node2 = node2.next;</span><br><span class="line">            p2--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.此时两个链表位置相同，同时向下遍历，如果有相同节点，说明相交</span></span><br><span class="line">    <span class="keyword">while</span> (node1!=node2)&#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        node2 = node2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到相交点，返回成功</span></span><br><span class="line">    <span class="keyword">if</span>(node1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历到最后仍没有相交点，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个有环链表相交问题"><a href="#两个有环链表相交问题" class="headerlink" title="两个有环链表相交问题"></a>两个有环链表相交问题</h2><p>如果两个有环链表相交，则相交部分一定包含整个环。如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-680.jpg" alt="upload successful"></p><p>一般有一个环入口节点和两个环入口节点两种情况。</p><p>因此我们可以先求两个环链表的入口节点，见上面代码。</p><ol><li>如果入口节点是同一个的话，把相同的入口节点当作是尾节点，这个问题就退化成<strong>两个链表都无环</strong>，直接判断是否相交即可。</li><li>如果入口节点不是同一个的话，从第一个入口节点开始next下去，如果遇到第二个入口节点返回true即可；如果回到了本身的入口节点则表示没有相交，直接返回false。</li></ol><p>相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断两个环链表是否相交</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head1 环链表1 头</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loop1 环链表1 环入口节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head2 环链表2 头</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loop2 环链表2 环入口节点</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">bothLoopNodeIsIntersect</span><span class="params">(Node head1, Node loop1, Node head2, Node loop2)</span></span>&#123;</span><br><span class="line">    Node cur1 = <span class="keyword">null</span>;</span><br><span class="line">    Node cur2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//如果两个链表的环入口节点是同一个</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">        cur1 = head1;</span><br><span class="line">        cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//判断链表1和链表2谁到入口节点的长度长</span></span><br><span class="line">        <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">            n--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//长的标记为cur1</span></span><br><span class="line">        cur1 = n &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        n = Math.abs(n);</span><br><span class="line">        <span class="comment">//遍历长链表直到位置和短链表头位置相等</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            n--;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两个链表长度相等开始遍历，直到相等时退出</span></span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到相交点，返回成功，否则返回失败</span></span><br><span class="line">        <span class="keyword">if</span>(cur1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//环入口不是同一个，开始以环入口1为起点遍历环</span></span><br><span class="line">        cur1 = loop1.next;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">            <span class="comment">//如果在环上找到了环入口2，说明就是一个环</span></span><br><span class="line">            <span class="keyword">if</span> (cur1 == loop2) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没找到环入口2，说明不是一个环，两个环链表也不可能相交</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个有环链表和一个无环链表相交问题"><a href="#一个有环链表和一个无环链表相交问题" class="headerlink" title="一个有环链表和一个无环链表相交问题"></a>一个有环链表和一个无环链表相交问题</h2><p><strong>一个有环链表和一个无环链表是不可能相交的。</strong></p><p>我们来简单分析下，如图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-681.jpg" alt="upload successful"></p><p>我们假设有环链表A和无环链表B相交于环链表A非环部分的A点（虚线a表示），可以看到，对于非环链表B，当遍历到相交点时，还是可以继续next的，最后B也成为了环链表，这与B是非环链表矛盾。</p><p>假设它们相交于环链表A的环部分B点（虚线b表示），同理，对于非环链表B，当遍历到相交点时，还是可以继续next的，最后B也成为了环链表，这与B是非环链表矛盾。</p><p>这两种情况都是上面所述的两个环链表相交。</p><p>因此一个有环链表和一个无环链表是不可能相交的。</p><h2 id="相交问题总结"><a href="#相交问题总结" class="headerlink" title="相交问题总结"></a>相交问题总结</h2><p>根据上面的代码及分析，判断链表是否相交的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断两个链表是否相交</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> head2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">nodeIsIntersect</span><span class="params">(Node head1,Node head2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head1==<span class="keyword">null</span> || head2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拿到环入口节点</span></span><br><span class="line">    Node loop1 = getLoopStartNode(head1);</span><br><span class="line">    Node loop2 = getLoopStartNode(head2);</span><br><span class="line">    <span class="comment">//两链表都为无环链表</span></span><br><span class="line">    <span class="keyword">if</span>(loop1==<span class="keyword">null</span>&amp;&amp;loop2==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> noLoopNodeIsIntersect(head1,head2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两链表都为有环链表</span></span><br><span class="line">    <span class="keyword">if</span>(loop1!=<span class="keyword">null</span> &amp;&amp; loop2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> bothLoopNodeIsIntersect(head1,loop1,head2,loop2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个有环一个无环直接返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Node节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否环链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        Node fast = head;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取环链表入口节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getLoopStartNode</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="comment">//快慢指针</span></span><br><span class="line">        Node fast = head;</span><br><span class="line">        Node slow = head;</span><br><span class="line">        <span class="keyword">while</span>(slow !=<span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="comment">//相遇退出，此时快慢指针位置为相遇点</span></span><br><span class="line">            <span class="keyword">if</span>(slow == fast)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有环，return null</span></span><br><span class="line">        <span class="keyword">if</span> (fast==<span class="keyword">null</span> || fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="comment">//如果有环，两个指针分别从链表头和相遇点出发，最终必定在环入口相遇</span></span><br><span class="line">        <span class="keyword">while</span> (slow!=fast)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个无环链表是否相交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">noLoopNodeIsIntersect</span><span class="params">(Node node1,Node node2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node1==<span class="keyword">null</span>||node2==<span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node temp1 = node1;</span><br><span class="line">        Node temp2 = node2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PS：两个链表相交，相交点及之后的节点会完全一致</span></span><br><span class="line">        <span class="comment">//1.拿到两链表长度</span></span><br><span class="line">        <span class="keyword">int</span> size1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            size1++;</span><br><span class="line">            temp1 = temp1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (temp2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            size2++;</span><br><span class="line">            temp2 = temp2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.对于较长的链表，遍历到与短链表相同长度</span></span><br><span class="line">        <span class="keyword">if</span>(size1 &gt; size2)&#123;</span><br><span class="line">            <span class="keyword">int</span> p1 = size1 -size2;</span><br><span class="line">            <span class="keyword">while</span> (p1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                node1 = node1.next;</span><br><span class="line">                p1--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> p2 = size2 -size1;</span><br><span class="line">            <span class="keyword">while</span> (p2&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                node2 = node2.next;</span><br><span class="line">                p2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.此时两个链表位置相同，同时向下遍历，如果有相同节点，说明相交</span></span><br><span class="line">        <span class="keyword">while</span> (node1!=node2)&#123;</span><br><span class="line">            node1 = node1.next;</span><br><span class="line">            node2 = node2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到相交点，返回成功</span></span><br><span class="line">        <span class="keyword">if</span>(node1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历到最后仍没有相交点，返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个环链表是否相交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 环链表1 头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loop1 环链表1 环入口节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 环链表2 头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loop2 环链表2 环入口节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">bothLoopNodeIsIntersect</span><span class="params">(Node head1, Node loop1, Node head2, Node loop2)</span></span>&#123;</span><br><span class="line">        Node cur1 = <span class="keyword">null</span>;</span><br><span class="line">        Node cur2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果两个链表的环入口节点是同一个</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">            cur1 = head1;</span><br><span class="line">            cur2 = head2;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//判断链表1和链表2谁到入口节点的长度长</span></span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                n++;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">                n--;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//长的标记为cur1</span></span><br><span class="line">            cur1 = n &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">            cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">            n = Math.abs(n);</span><br><span class="line">            <span class="comment">//遍历长链表直到位置和短链表头位置相等</span></span><br><span class="line">            <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                n--;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//两个链表长度相等开始遍历，直到相等时退出</span></span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到相交点，返回成功，否则返回失败</span></span><br><span class="line">            <span class="keyword">if</span>(cur1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//环入口不是同一个，开始以环入口1为起点遍历环</span></span><br><span class="line">            cur1 = loop1.next;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                <span class="comment">//如果在环上找到了环入口2，说明就是一个环</span></span><br><span class="line">                <span class="keyword">if</span> (cur1 == loop2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没找到环入口2，说明不是一个环，两个环链表也不可能相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个链表是否相交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">nodeIsIntersect</span><span class="params">(Node head1,Node head2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head1==<span class="keyword">null</span> || head2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拿到环入口节点</span></span><br><span class="line">        Node loop1 = getLoopStartNode(head1);</span><br><span class="line">        Node loop2 = getLoopStartNode(head2);</span><br><span class="line">        <span class="comment">//两链表都为无环链表</span></span><br><span class="line">        <span class="keyword">if</span>(loop1==<span class="keyword">null</span>&amp;&amp;loop2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> noLoopNodeIsIntersect(head1,head2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两链表都为有环链表</span></span><br><span class="line">        <span class="keyword">if</span>(loop1!=<span class="keyword">null</span> &amp;&amp; loop2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> bothLoopNodeIsIntersect(head1,loop1,head2,loop2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一个有环一个无环直接返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们通过对链表的一些经典问题进行分析，加深了我们对于链表的一些理解。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;链表实际上是线性表的链式存储结构，与数组不同的是，它是用一组任意的存储单元来存储线性表中的数据，存储单元不一定是连续的，且链表的长度不是固定的，链表数据的这一特点使其可以非常的方便地实现节点的插入和删除操作。&lt;/p&gt;
&lt;p&gt;链表的每个元素称为一个节点，每个节点都可以存储在内存中的不同的位置，为了表示每个元素与后继元素的逻辑关系，以便构成“一个节点链着一个节点”的链式存储结构，除了存储元素本身的信息外，还要存储其直接后继信息。&lt;/p&gt;
&lt;p&gt;因此，每个节点都包含两个部分，第一部分称为链表的数据区域，用于存储元素本身的数据信息，可以用data表示，它不局限于一个成员数据，也可是多个成员数据，第二部分是一个结构体指针，称为链表的指针域，用于存储其直接后继的节点信息，可以用next表示，next的值实际上就是下一个节点的地址，当前节点为末节点时，next的值设为空指针。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="链表" scheme="https://www.sakuratears.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Hystrix工作原理</title>
    <link href="https://www.sakuratears.top/blog/Spring-Cloud-Hystrix%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html"/>
    <id>https://www.sakuratears.top/blog/Spring-Cloud-Hystrix%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html</id>
    <published>2021-01-10T07:14:00.000Z</published>
    <updated>2021-01-10T09:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇<a href="https://www.sakuratears.top/blog/Spring-Cloud-Hystrix%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4%E5%85%A5%E9%97%A8.html">Spring Cloud Hystrix服务容错保护入门</a>文章里，我们简单的了解了下 <strong>Spring Cloud Hystrix</strong>，并对 <strong>Hystrix</strong> 源码中使用到的两种模式进行了简单介绍，以方便我们更好的的了解 <strong>Hystrix</strong> 的原理。</p><p>这篇文章，我们将结合源码等来了解下 <strong>Hystrix</strong> 的工作原理。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>在 <strong>Netflix Hystrix</strong> 官网上<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">How-it-Works</a>，说明了 当一个请求调用了相关依赖后<strong>Hystrix</strong>是如何工作的。</p><p>我们通过官方的流程图来说明下：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-674.png" alt="upload successful"></p><p>我们来根据图示序号来看下<strong>Hystrix</strong>的工作流程。</p><ol><li>创建<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>对象</li></ol><p>首先，构建一个<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>对象，用来表示对依赖服务的操作请求，同时传递所有需要的参数。</p><p>上篇文章我们已经讲到它们采用了“命令模式”来实现对服务调用操作的封装。</p><ul><li>HystrixCommand：用在依赖的服务返回单个操作结果的时候。</li><li>HystrixObservableCommand：用在依赖的服务返回多个操作结果的时候。</li></ul><ol start="2"><li>命令执行</li></ol><p>图中的4种命令执行方式我们也有简单介绍。</p><p><code>HystrixCommand</code>的两种执行方式：</p><ul><li>execute()：同步执行，从依赖的服务返回一个单一的结果对象，或是在发生错误的时候抛出异常。</li><li>queue()：异步执行，直接返回一个<code>Future</code>对象，其中包含了服务执行结束时要返回的单一结果对象。</li></ul><p><code>HystrixObservableCommand</code>的两种执行方式：</p><ul><li>observe()：返回<code>Observable</code>对象，它代表了操作的多个结果，是一个 <strong>Hot Observable</strong>。</li><li>toObservable()：同样返回<code>Observable</code>对象，也代表了操作的多个结果，但它是一个<strong>Cold Observable</strong>。</li></ul><p>这儿的<strong>观察者-订阅者模式</strong>还有<strong>Hot Observable</strong>和<strong>Cold Observable</strong>我们在上篇文章已经介绍，这儿就不过多叙述。</p><p>看表面的话，大家一定认为只有<code>HystrixObservableCommand</code>使用了<strong>RxJava</strong> ，实际上<code>HystrixCommand</code>的两种命令也使用<strong>RxJava</strong>来实现。</p><p>我们来看下两个命令的部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue().get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exceptions.sneakyThrow(decomposeException(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;R&gt; <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Future&lt;R&gt; delegate = toObservable().toBlocking().toFuture();</span><br><span class="line">    <span class="keyword">final</span> Future&lt;R&gt; f = <span class="keyword">new</span> Future&lt;R&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isCancelled()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (HystrixCommand.<span class="keyword">this</span>.getProperties().executionIsolationThreadInterruptOnFutureCancel().get()) &#123;</span><br><span class="line">                interruptOnFutureCancel.compareAndSet(<span class="keyword">false</span>, mayInterruptIfRunning);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> res = delegate.cancel(interruptOnFutureCancel.get());</span><br><span class="line">            <span class="keyword">if</span> (!isExecutionComplete() &amp;&amp; interruptOnFutureCancel.get()) &#123;</span><br><span class="line">                <span class="keyword">final</span> Thread t = executionThread.get();</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; !t.equals(Thread.currentThread())) &#123;</span><br><span class="line">                    t.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.isCancelled();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.isDone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> R <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> R <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> delegate.get(timeout, unit);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//处理立即抛出的错误</span></span><br><span class="line">    <span class="keyword">if</span> (f.isDone()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f.get();</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Throwable t = decomposeException(e);</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> HystrixBadRequestException) &#123;</span><br><span class="line">                <span class="keyword">return</span> f;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> HystrixRuntimeException) &#123;</span><br><span class="line">                HystrixRuntimeException hre = (HystrixRuntimeException) t;</span><br><span class="line">                <span class="keyword">switch</span> (hre.getFailureType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> COMMAND_EXCEPTION:</span><br><span class="line">                <span class="keyword">case</span> TIMEOUT:</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> hre;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> Exceptions.sneakyThrow(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>execute()</code>是通过<code>queue()</code>返回的异步对象<code>Future&lt;R&gt;</code>的<code>get()</code>方法来实现同步执行的。</li><li><code>queue()</code>则是通过<code>toObservable()</code>来获得一个<strong>Cold Observable</strong>，然后通过<code>toBlocking()</code>转化为<code>BlockingObservable</code>，它可以把数据以阻塞的方式发射出来。<code>toFuture()</code>则把<code>BlockingObservable</code>转换为一个<code>Future</code>，该方法只是创建一个<code>Future</code>返回，并不会阻塞，这使得消费者可以自行决定如何处理异步操作。</li></ul><ol start="3"><li>结果是否被缓存</li></ol><p>若当前命令的请求缓存功能是被启用的，并且该命令缓存命中，那么缓存的结果会立即以<code>Observable</code>对象的形式返回。</p><ol start="4"><li>断路器是否打开</li></ol><p>在命令结果没有缓存命中的时候，<strong>Hystrix</strong>在执行命令前需要检查断路器是否为打开状态：</p><ul><li>如果断路器是打开的，那么<strong>Hystrix</strong>不会执行命令，而是转接到<code>fallback</code>处理逻辑（对应第8步）。</li><li>如果断路器是关闭的，那么<strong>Hystrix</strong>跳到第5步，检查是否有可用资源来执行命令。</li></ul><p>关于断路器的内容我们后面在详述。</p><ol start="5"><li>线程池/请求队列/信号量是否占满</li></ol><p>如果与命令相关的线程池和请求队列，或者信号量（不使用线程池的时候）已经被占满，那么<strong>Hystrix</strong>也不会执行命令，而是转接到<code>fallback</code>处理逻辑（对应第8步）。</p><p>需要注意的是，这里<strong>Hystrix</strong>所判断的线程池并非容器的线程池，而是每个依赖服务的专有线程池。<strong>Hystrix</strong>为了保证不会因为某个依赖服务的问题影响到其他依赖服务而采用了“舱壁模式（Bulkhead Pattern）”来隔离每个依赖的服务。</p><p>关于该方面的内容我们后面介绍。</p><ol start="6"><li><code>HystrixObservableCommand.construct()</code>或<code>HystrixCommand.run()</code></li></ol><p><code>Hystrix</code>会根据我们编写的方法来决定采取什么样的方式去请求依赖服务。</p><ul><li>HystrixCommand.run()：返回一个单一的结果，或者抛出异常。</li><li>HystrixObservableCommand.construct()：返回一个<code>Observable</code>对象来发射多个结果，或者通过<code>onError</code>发送错误通知。</li></ul><p>如果<code>run()</code>或<code>construct()</code>方法的执行时间超过了命令设置的超时阈值，当前处理的线程将会抛出一个<code>TimeoutException</code>（如果该命令不在其自身的线程中执行，则会通过单独的计时线程来抛出）。在这种情况下，<code>Hystrix</code>会转接到<code>fallback</code>处理逻辑（第8步）。同时，如果当前命令没有被取消或者中断，那么它最终会忽略<code>run()</code>或<code>construct()</code>方法的返回。</p><p>如果命令没有抛出异常并返回了结果，那么<code>Hystrix</code>在记录一些日志并采集监控报告之后将该结果返回。在使用<code>run()</code>的情况下，<code>Hystrix</code>会返回一个<code>Observable</code>，它发射单个结果并产生<code>onCompleted()</code>的结束通知；而在使用<code>construct()</code>的情况下，<code>Hystrix</code>会直接返回该方法产生的<code>Observable</code>对象。</p><ol start="7"><li>计算断路器的健康度</li></ol><p><code>Hystrix</code>会将“成功”、“失败”、“拒绝”、“超时”等信息报告给断路器，而断路器会维护一组计数器来统计这些数据。</p><p>断路器会使用这些统计数据来决定是否要将断路器打开，来对某个依赖服务的请求进行“熔断/短路”，直到恢复期结束。若在恢复期结束后，根据统计数据判断如果还是未达到健康指标，就再次“熔断/短路”。</p><ol start="8"><li>fallback处理</li></ol><p>当命令执行失败的时候，<code>Hystrix</code>会进入<code>fallback</code>尝试回退处理，我们通常也称之为“服务降级”。而能够引起服务降级处理的情况有下面几种：</p><ul><li>第4步，当前命令处于“熔断/短路”状态，断路器是打开的时候。</li><li>第5步，当前命令的线程池、请求队列或者信号量被占满的时候。</li><li>第6步，<code>HystrixCommand.run()</code>或者<code>HystrixObservableCommand.construct()</code>抛出异常的时候。</li></ul><p>在服务降级逻辑中，我们需要实现一个通用的响应结果，并且该结果的处理逻辑应当是从缓存或是根据一些静态逻辑来获取，而不是依赖网络请求获取。如果一定要在降级逻辑中包含网络请求，那么该请求也必须被包装在<code>HystrixCommand</code>或者<code>HystrixObservableCommand</code>中，从而形成级联的降级策略，而最终的降级逻辑一定不是一个依赖网络请求的处理，而是一个能够稳定的返回结果的处理逻辑。</p><p><code>HystrixCommand</code>和<code>HystrixObservableCommand</code>服务降级逻辑实现不同：</p><ul><li>当使用<code>HystrixCommand</code>时，通过实现<code>HystrixCommand.getFallback()</code>来实现服务降级逻辑。</li><li>当使用<code>HystrixObservableCommand</code>时，通过<code>HystrixObservableCommand.resumeWithFallback()</code>实现服务降级逻辑，该方法会返回一个<code>Observable</code>对象来发射一个或者多个降级结果。</li></ul><p>当命令的降级逻辑返回结果之后，<code>Hystrix</code>就会将该结果返回给调用者。当使用<code>HystrixCommand.getFallback()</code>时，它会返回一个<code>Observable</code>对象，该对象会发射<code>getFallback()</code>的处理结果。当使用<code>HystrixObservableCommand.resumeWithFallback()</code>时，它会将<code>Observable</code>对象直接返回。</p><p>如果我们没有为命令实现降级逻辑或者降级逻辑处理中抛出了异常，<code>Hystrix</code>依然会返回一个<code>Observable</code>对象，但是它不会发射任何结果数据，而是通过<code>onError()</code>方法通知命令立即中断请求，并通过<code>onError()</code>方法将引起命令失败的异常发给调用者。实现一个有可能失败的降级逻辑是一种非常糟糕的做法，我们应该在实现降级策略时尽可能避免失败的情况。</p><p>当然，完全不可能出现失败的完美降级策略是不存在的，如果降级执行发现失败的时候，<code>Hystrix</code>会根据不同的执行方法做不同的处理。</p><ul><li>execute()：抛出异常。</li><li>queue()：正常返回<code>Future</code>对象，但是当调用<code>get()</code>来获取结果的时候会抛出异常。</li><li>observe()：正常返回<code>Observable</code>对象，当订阅它的时候，将立即通过调用订阅者的<code>onError()</code>方法来通知终止请求。</li><li>toObservable()：正常返回<code>Observable</code>对象，当订阅它的时候，将通过调用订阅者的<code>onError()</code>方法来通知终止请求。</li></ul><ol start="9"><li>返回成功的响应</li></ol><p>当<code>Hystrix</code>命令执行成功之后，它会将处理结果直接返回或是以<code>Observable</code>的形式返回。而具体哪种方式取决于之前第2步中我们所提到的对命令的4种不同执行方式，下图中总结了这4种调用方式之前的依赖关系。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-675.png" alt="upload successful"></p><ul><li>toObservable()：返回最原始的<code>Observable</code>，必须通过订阅它才会真正触发命令的执行流程。</li><li>observe()：在<code>toObservable()</code>产生原始<code>Observable</code>之后立即订阅它，让命令能够马上开始异步执行，并返回一个<code>Observable</code>对象，当调用它的<code>subscribe</code>时，将重新产生结果和通知给订阅者。</li><li>queue()：将<code>toObservable()</code>产生的原始<code>Observable</code>通过<code>toBlocking()</code>方法转换成<code>BlockingObservable</code>对象，并调用它的<code>toFuture()</code>方法返回异步的<code>Future</code>对象。</li><li>execute()：在<code>queue()</code>产生异步结果<code>Future</code>对象之后，通过调用<code>get()</code>方法阻塞并等待结果的返回。</li></ul><h2 id="断路器原理"><a href="#断路器原理" class="headerlink" title="断路器原理"></a>断路器原理</h2><p>断路器在<code>HystrixCommand</code>和<code>HystrixObservableCommand</code>执行过程中起到了至关重要的作用，我们来看下断路器的原理。</p><p>断路器<code>HystrixCircuitBreaker</code>的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HystrixCircuitBreaker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">markSuccess</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;...&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixCircuitBreakerImpl</span> <span class="keyword">implements</span> <span class="title">HystrixCircuitBreaker</span></span>&#123;...&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoOpCircuitBreaker</span> <span class="keyword">implements</span> <span class="title">HystrixCircuitBreaker</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到断路器接口定义了三个抽象方法：</p><ul><li>allowRequest()：每个 <strong>Hystrix</strong> 命令的请求都通过它判断是否被执行。</li><li>isOpen()：返回当前断路器是否打开。</li><li>markSuccess()：用来闭合断路器。</li></ul><p>另外还有三个静态类。</p><ul><li><p>Factory：它维护了一个<strong>Hystrix</strong>命令与<code>HystrixCircuitBreaker</code>的关系集合。其中<code>String</code>类型的<code>key</code>通过<code>HystrixCommandKey</code>定义。每一个<strong>Hystrix</strong>命令都需要一个<code>key</code>来标识。一个<strong>Hystrix</strong>命令也会在该集合中找到它对应的<code>HystrixCircuitBreaker</code>实例。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, HystrixCircuitBreaker&gt; circuitBreakersByCommand = <span class="keyword">new</span> ConcurrentHashMap&lt;String, HystrixCircuitBreaker&gt;();</span><br></pre></td></tr></table></figure></li><li><p>NoOpCircuitBreaker：它定义了一个什么都不做的断路器实现，它允许所有请求，并且断路器状态始终闭合。</p></li><li><p>HystrixCircuitBreakerImpl：它是<code>HystrixCircuitBreaker</code>的实现类，我们来分析一下它。</p></li></ul><p><strong>HystrixCircuitBreakerImpl</strong></p><p><code>HystrixCircuitBreakerImpl</code>定义了断路器的4个核心对象。</p><ul><li>HystrixCommandProperties properties：断路器对应<code>HystrixCommand</code>实例的属性对象。</li><li>HystrixCommandMetrics metrics：用来让<code>HystrixCommand</code>记录各类度量指标的对象。</li><li>AtomicBoolean circuitOpen：断路器是否打开的标志，默认false。</li><li>AtomicLong circuitOpenedOrLastTestedTime：断路器打开或是上一次测试的时间戳。</li></ul><p><code>HystrixCircuitBreakerImpl</code>对<code>HystrixCircuitBreaker</code>接口的各个方法实现如下。</p><p><strong>isOpen()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (circuitOpen.get()) &#123;</span><br><span class="line">        <span class="comment">// if we&#x27;re open we immediately return true and don&#x27;t bother attempting to &#x27;close&#x27; ourself as that is left to allowSingleTest and a subsequent successful test to close</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we&#x27;re closed, so let&#x27;s see if errors have made us so we should trip the circuit open</span></span><br><span class="line">    HealthCounts health = metrics.getHealthCounts();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we are past the statisticalWindowVolumeThreshold</span></span><br><span class="line">    <span class="keyword">if</span> (health.getTotalRequests() &lt; properties.circuitBreakerRequestVolumeThreshold().get()) &#123;</span><br><span class="line">        <span class="comment">// we are not past the minimum volume threshold for the statisticalWindow so we&#x27;ll return false immediately and not calculate anything</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (health.getErrorPercentage() &lt; properties.circuitBreakerErrorThresholdPercentage().get()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// our failure rate is too high, trip the circuit</span></span><br><span class="line">        <span class="keyword">if</span> (circuitOpen.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            <span class="comment">// if the previousValue was false then we want to set the currentTime</span></span><br><span class="line">            circuitOpenedOrLastTestedTime.set(System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// How could previousValue be true? If another thread was going through this code at the same time a race-condition could have</span></span><br><span class="line">            <span class="comment">// caused another thread to set it to true already even though we were in the process of doing the same</span></span><br><span class="line">            <span class="comment">// In this case, we know the circuit is open, so let the other thread set the currentTime and report back that the circuit is open</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体逻辑如下：</p><ol><li>如果断路器打开标识为true，就返回true，表示断路器处于打开状态。否则，就从<code>metrics</code>中获取<code>HealthCounts</code>做判断（该对象记录了一个滚动时间窗内的请求信息快照，默认时间窗为10s）。</li><li>如果它的请求总数（QPS）在预设的阈值范围内就返回false，表示断路器处于闭合状态。该参数配置为<code>circuitBreakerRequestVolumeThreshold</code>，默认值为20。</li><li>如果错误百分比在阈值之内就返回false，表示断路器处于闭合状态。该配置参数为<code>circuitBreakerErrorThresholdPercentage</code>，默认值为50。</li><li>如果上面的两个条件都不满足，则将断路器设置为打开状态。同时如果是从关闭状态切换到打开状态的话，就将当前时间记录到<code>circuitOpenedOrLastTestedTime</code>对象中。</li></ol><p><strong>allowRequest()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (properties.circuitBreakerForceOpen().get()) &#123;</span><br><span class="line">        <span class="comment">// properties have asked us to force the circuit open so we will allow NO requests</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.circuitBreakerForceClosed().get()) &#123;</span><br><span class="line">        <span class="comment">// we still want to allow isOpen() to perform it&#x27;s calculations so we simulate normal behavior</span></span><br><span class="line">        isOpen();</span><br><span class="line">        <span class="comment">// properties have asked us to ignore errors so we will ignore the results of isOpen and just allow all traffic through</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !isOpen() || allowSingleTest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体逻辑如下：</p><ol><li>先检查配置对象<code>properties</code>中的强制打开或关闭属性是否被设置。如果强制打开，就返回false，拒绝请求。如果强制关闭，会允许所有请求，但它也会调用<code>isOpen()</code>来执行断路器计算逻辑，用来模拟断路器行为。</li><li>默认情况下，断路器不会进入到上述分支，而是通过<code>!isOpen() || allowSingleTest()</code>来判断当前断路器是否打开。</li></ol><p>我们再来看下<code>allowSingleTest()</code>的相关代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowSingleTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> timeCircuitOpenedOrWasLastTested = circuitOpenedOrLastTestedTime.get();</span><br><span class="line">    <span class="comment">// 1) if the circuit is open</span></span><br><span class="line">    <span class="comment">// 2) and it&#x27;s been longer than &#x27;sleepWindow&#x27; since we opened the circuit</span></span><br><span class="line">    <span class="keyword">if</span> (circuitOpen.get() &amp;&amp; System.currentTimeMillis() &gt; timeCircuitOpenedOrWasLastTested + properties.circuitBreakerSleepWindowInMilliseconds().get()) &#123;</span><br><span class="line">        <span class="comment">// We push the &#x27;circuitOpenedTime&#x27; ahead by &#x27;sleepWindow&#x27; since we have allowed one request to try.</span></span><br><span class="line">        <span class="comment">// If it succeeds the circuit will be closed, otherwise another singleTest will be allowed at the end of the &#x27;sleepWindow&#x27;.</span></span><br><span class="line">        <span class="keyword">if</span> (circuitOpenedOrLastTestedTime.compareAndSet(timeCircuitOpenedOrWasLastTested, System.currentTimeMillis())) &#123;</span><br><span class="line">            <span class="comment">// if this returns true that means we set the time so we&#x27;ll return true to allow the singleTest</span></span><br><span class="line">            <span class="comment">// if it returned false it means another thread raced us and allowed the singleTest before we did</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体逻辑如下：</p><ol><li>拿到之前记录的时间戳<code>circuitOpenedOrLastTestedTime</code>。</li><li>当断路器打开时，判断时间戳+配置中的<code>circuitBreakerSleepWindowInMilliseconds</code>是否小于当前时间，是的话，就将当前时间更新到<code>circuitOpenedOrLastTestedTime</code>中，并且允许此次请求。</li></ol><p>可以看到<code>circuitBreakerSleepWindowInMilliseconds</code>属性设置了一个断路器打开之后的休眠时间（默认5s），在该休眠时间达到后，将再次允许请求尝试访问，此时断路器处于“半开”状态，若此时请求继续失败，断路器又进入打开状态，并且等待下一个休眠窗口过去之后再次尝试；如果请求成功，则将断路器重新置于关闭状态。所以通过<code>isOpen()</code>和<code>allowSingleTest()</code>方法的配合，实现了断路器打开和关闭状态的切换。</p><p><strong>markSuccess()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (circuitOpen.get()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (circuitOpen.compareAndSet(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="comment">//win the thread race to reset metrics</span></span><br><span class="line">            <span class="comment">//Unsubscribe from the current stream to reset the health counts stream.  This only affects the health counts view,</span></span><br><span class="line">            <span class="comment">//and all other metric consumers are unaffected by the reset</span></span><br><span class="line">            metrics.resetStream();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法用来在断路器“半开路”状态时使用。如果<strong>Hystrix</strong>命令调用成功，通过调用它将打开的断路器关闭，并重置度量指标对象。</p><p>下图是<strong>Netflix Hystrix</strong>官方文档中关于断路器的详细执行逻辑图，可以帮助我们理解相关内容。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-676.png" alt="upload successful"></p><h2 id="依赖隔离"><a href="#依赖隔离" class="headerlink" title="依赖隔离"></a>依赖隔离</h2><p><strong>Hystrix</strong>使用”舱壁模式“实现线程池的隔离。它会为每一个依赖服务创立一个独立的线程池，这样就算某个依赖服务出现延迟过高的情况，也只是对该依赖服务的调用产生影响，而不会拖慢其他的依赖服务。</p><p>通过实现对依赖服务的线程池隔离，可以带来如下优势：</p><ul><li>应用自身得到完全保护，不会受不可控的依赖服务影响。即便给依赖服务分配的线程池被填满，也不会影响应用自身的其余部分。</li><li>可以有效降低接入新服务的风险。如果新服务接入后运行不稳定或存在问题，完全不会影响到应用其他请求。</li><li>当依赖的服务从失效恢复正常后，它的线程池会被清理并且能够马上恢复健康的服务，相比之下，容器级别的清理恢复速度要慢得多。</li><li>当依赖的服务出现配置错误的时候，线程池会快速反映出此问题（通过失败次数、延迟、超时、拒绝等指标的增加情况）。同时，我们可以在不影响应用功能的情况下通过实时的动态属性刷新（Spring Cloud Config）来处理它。</li><li>当依赖的服务因实现机制调整等原因造成其性能出现很大变化时，线程池的监控指标信息会反映出这样的变化。同时，我们也可以通过实时动态刷新自身应用对依赖服务的阈值进行调整以适应依赖方的改变。</li><li>每个专业线程池都提供了内置的并发实现，可以利用它为同步的依赖服务构建异步访问。</li></ul><p>虽然线程池隔离的方案带来了如此多的好处，但我们可能会担心为每一个依赖服务都分配一个线程池是否会过多地增加系统的负载和开销。对于这一点，<strong>Netflix</strong>在设计<strong>Hystrix</strong>时，认为线程池上的开销相对于隔离所带来的的好处是无法比拟的。同时，<strong>Netflix</strong>也针对线程池的开销做了相关测试，以用结果打消<strong>Hystrix</strong>实现对性能影响的顾虑。</p><p>下图是<strong>Netflix Hystrix</strong>官方提供的一个<strong>Hystrix</strong>命令的性能监控图，该命令以每秒60个请求的速度（QPS）对一个单服务实例进行访问，该服务实例每秒运行的线程数峰值为350个。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-677.png" alt="upload successful"></p><p>通过上图我们可以看出，使用线程池隔离与不使用线程池隔离的耗时差异如下：</p><table><thead><tr><th>比较情况</th><th>未使用线程池隔离</th><th>使用了线程池隔离</th><th>耗时差距</th></tr></thead><tbody><tr><td>中位数</td><td>2ms</td><td>2ms</td><td>2ms</td></tr><tr><td>90百分位</td><td>5ms</td><td>8ms</td><td>3ms</td></tr><tr><td>99百分位</td><td>28ms</td><td>37ms</td><td>9ms</td></tr></tbody></table><p>在99%的情况想，使用线程池隔离的延迟有9ms，对于大多数需求来说这样的消耗是微乎其微的，更何况可为系统在稳定性和灵活性上带来巨大提示。</p><p>在<strong>Hystrix</strong>中除了可使用线程池之外，还可以使用信号量来控制单个依赖服务的并发度，信号量的开销远比线程池的开销小，但是它不能设置超时和实现异步访问。所以，只有在依赖服务是足够可靠的情况下才使用信号量。在<code>HystrixCommand</code>和<code>HystrixObservableCommand</code>中有两处支持信号量的使用。</p><ul><li>命令执行：如果将隔离策略参数<code>execution.isolation.strategy</code>设置为<code>SEMAPHORE</code>，<strong>Hystrix</strong>会使用信号量代替线程池来控制依赖服务的并发。</li><li>降级逻辑：当<strong>Hystrix</strong>尝试降级逻辑时，它会在调用线程中使用信号量。</li></ul><p>信号量的默认值为10，我们也可以通过动态刷新配置的方式来控制并发线程的数量。对于信号量大小的估算方法与线程池并发度估算类似。仅访问内存数据的请求一般耗时在1ms以内，性能可以达到 5000rps（rps指每秒请求数），这样级别的请求可以将信号量设置为1或者2，我们可以按照此标准并依据实际请求耗时来设置信号量。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本篇我们通过了解<strong>Hystrix</strong>的部分内容，借助官方文档，可以对<strong>Hystrix</strong>的工作原理有个大概了解，下篇文章我们将详细介绍<strong>Hystrix</strong>的使用方法，如创建请求、服务降级、异常处理、请求缓存、请求合并等。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li>Spring Cloud 微服务实战</li><li><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">Netflix Hystrix</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在上一篇&lt;a href=&quot;https://www.sakuratears.top/blog/Spring-Cloud-Hystrix%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4%E5%85%A5%E9%97%A8.html&quot;&gt;Spring Cloud Hystrix服务容错保护入门&lt;/a&gt;文章里，我们简单的了解了下 &lt;strong&gt;Spring Cloud Hystrix&lt;/strong&gt;，并对 &lt;strong&gt;Hystrix&lt;/strong&gt; 源码中使用到的两种模式进行了简单介绍，以方便我们更好的的了解 &lt;strong&gt;Hystrix&lt;/strong&gt; 的原理。&lt;/p&gt;
&lt;p&gt;这篇文章，我们将结合源码等来了解下 &lt;strong&gt;Hystrix&lt;/strong&gt; 的工作原理。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="SpringCloud" scheme="https://www.sakuratears.top/tags/SpringCloud/"/>
    
    <category term="Hystrix" scheme="https://www.sakuratears.top/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>【转】【译】Java 14 特性及更新</title>
    <link href="https://www.sakuratears.top/blog/%E3%80%90%E8%BD%AC%E3%80%91%E3%80%90%E8%AF%91%E3%80%91Java-14-%E7%89%B9%E6%80%A7%E5%8F%8A%E6%9B%B4%E6%96%B0.html"/>
    <id>https://www.sakuratears.top/blog/%E3%80%90%E8%BD%AC%E3%80%91%E3%80%90%E8%AF%91%E3%80%91Java-14-%E7%89%B9%E6%80%A7%E5%8F%8A%E6%9B%B4%E6%96%B0.html</id>
    <published>2020-12-20T06:32:00.000Z</published>
    <updated>2021-01-10T10:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2020年3月17日，Java 14 发布。通过这篇文章我们来看下它新增的一些特性，便于我们更好的了解及掌握。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>PS： 预览特性表示改特性被放到该版本后，可以正常使用，但在以后版本可能会有改动/删除（也可能不再改动/删除）。</p><h2 id="JEP-305-–-instanceof-匹配模式（预览特性）"><a href="#JEP-305-–-instanceof-匹配模式（预览特性）" class="headerlink" title="JEP 305 – instanceof 匹配模式（预览特性）"></a>JEP 305 – instanceof 匹配模式（预览特性）</h2><h3 id="instanceof操作符的改进"><a href="#instanceof操作符的改进" class="headerlink" title="instanceof操作符的改进"></a>instanceof操作符的改进</h3><p>我们以一个例子来看下<code>instanceof</code>操作符的改进。</p><ol><li>旧版本实现</li></ol><p>如果应用程序需要处理某种类型的类，但我们有父类类型的引用，那么我们需要检查该实例的类型并进行适当的类型转换。</p><p>例如，<code>Customer </code>的类型可以是<code>BusinessCustomer</code>或<code>PersonalCustomer</code>。根据客户实例的类型，我们可以根据上下文获取信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = <span class="keyword">new</span> PersonalCustomer();   <span class="comment">//通过某些方法拿到数据，略</span></span><br><span class="line">String customerName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//旧版本实现</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(customer <span class="keyword">instanceof</span> PersonalCustomer)</span><br><span class="line">&#123;</span><br><span class="line">    PersonalCustomer pCustomer = (PersonalCustomer) customer;   <span class="comment">//强转</span></span><br><span class="line">    customerName = String.join(<span class="string">&quot; &quot;</span>, pCustomer.getFirstName(), </span><br><span class="line">                            pCustomer.getMiddleName(), </span><br><span class="line">                            pCustomer.getLastName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(customer <span class="keyword">instanceof</span> BusinessCustomer)&#123;</span><br><span class="line">    BusinessCustomer bCustomer = (BusinessCustomer) customer;   <span class="comment">//强转</span></span><br><span class="line">    customerName = bCustomer.getLegalName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>新版本实现</li></ol><p>现在，通过与<code>instanceof</code>进行模式匹配，我们可以用以下方式编写类似的代码。在这里，我们可以减少类型转换的样板代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新版本实现</span></span><br><span class="line"><span class="keyword">if</span>(customer <span class="keyword">instanceof</span> PersonalCustomer pCustomer)</span><br><span class="line">&#123;</span><br><span class="line">    customerName = String.join(<span class="string">&quot; &quot;</span>, pCustomer.getFirstName(), </span><br><span class="line">                            pCustomer.getMiddleName(), </span><br><span class="line">                            pCustomer.getLastName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(customer <span class="keyword">instanceof</span> BusinessCustomer bCustomer)</span><br><span class="line">&#123;</span><br><span class="line">    customerName = bCustomer.getLegalName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关细节"><a href="#相关细节" class="headerlink" title="相关细节"></a>相关细节</h3><ol><li>类型测试模式</li></ol><p>类型测试模式包含以下内容:</p><ul><li>可以应用于目标的谓词</li><li>只有在谓词成功应用于目标时才从目标提取的一组绑定变量</li></ul><p>类型测试模式由指定类型的谓词和单个绑定变量组成。</p><p>在下面的代码中，短语字符串<code>s</code>是类型测试模式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">    <span class="comment">// 这儿可以直接使用s变量</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不能使用s变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>它做了什么</li></ol><p>如果<code>obj</code>是<code>String</code>的实例，则<code>instanceof</code>操作符将目标<code>obj</code>“匹配”到类型测试模式，然后将其转换为<code>String</code>并分配给绑定变量<code>s</code>。</p><p>需要注意的是，只有当<code>obj</code>不为空时，模式才会匹配，<code>s</code>才会被赋值。</p><ol start="3"><li>复杂表达式用法</li></ol><p>当<code>if</code>语句变得更加复杂时，绑定变量的作用域也相应增大。</p><p>例如，当我们添加<code>&&</code>运算符和另一条语句时，只有<code>instanceof</code>成功并分配给<code>pCustomer</code>时，添加的语句才会被计算。另外，<code>true</code>块中的<code>pCustomer</code>引用了所包含类中的一个字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以执行</span></span><br><span class="line"><span class="keyword">if</span>(customer <span class="keyword">instanceof</span> PersonalCustomer pCustomer </span><br><span class="line">        &amp;&amp; pCustomer.getId() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    customerName = String.join(<span class="string">&quot; &quot;</span>, pCustomer.getFirstName(), </span><br><span class="line">                            pCustomer.getMiddleName(), </span><br><span class="line">                            pCustomer.getLastName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与上面的情况相反，当我们添加<code>||</code>操作符和另一条语句时，绑定变量<code>pCustomer</code>不在<code>||</code>操作符右手边的作用域内，也不在<code>true</code>块的作用域内。在这些点上，<code>pCustomer</code>引用了封闭类中的一个字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译错误 :: The pattern variable pCustomer is not in scope in this location</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(customer <span class="keyword">instanceof</span> PersonalCustomer pCustomer </span><br><span class="line">        || pCustomer.getId() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    customerName = String.join(<span class="string">&quot; &quot;</span>, pCustomer.getFirstName(), </span><br><span class="line">                            pCustomer.getMiddleName(), </span><br><span class="line">                            pCustomer.getLastName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JEP-368-–-文本块（二次预览特性）"><a href="#JEP-368-–-文本块（二次预览特性）" class="headerlink" title="JEP 368 – 文本块（二次预览特性）"></a>JEP 368 – 文本块（二次预览特性）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在<strong>Java</strong>中，文本块是一个多行字符串字面量。这意味着我们不需要陷入显式的行结束符、字符串连接和分隔符的混乱就可以编写普通字符串文本。</p><blockquote><p><strong>Java</strong> 文本块在 <strong>Java 13 (JEP 355)</strong> 和 <strong>Java 14 (JEP 368)</strong> 中作为预览特性可用。它计划成为<strong>Java 15 (JEP 378)</strong> 中的一个标准特性。</p></blockquote><p>要启用这个预览特性，我们必须使用<code>-enable-preview</code>和<code>-source 14</code>标志。</p><h3 id="文本块语法"><a href="#文本块语法" class="headerlink" title="文本块语法"></a>文本块语法</h3><ul><li>文本块由多行文本组成，并使用三个双引号字符(“ “ “)作为开始和结束分隔符。</li><li>开始的三个双引号字符后面总是跟一个行结束符。</li><li>我们不能将分隔符和文本块放在一行上。开始的分隔符必须在它自己的行上。内容只能从下一行开始。</li><li>如果文本内容包含单引号或双引号，则不需要对它们进行转义。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String dbSchema =   <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            CREATE TABLE &#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;</span></span><br><span class="line"><span class="string">            (</span></span><br><span class="line"><span class="string">              &#x27;ID&#x27; INT NOT NULL DEFAULT 0 ,</span></span><br><span class="line"><span class="string">              &#x27;FIRST_NAME&#x27; VARCHAR(100) NOT NULL ,</span></span><br><span class="line"><span class="string">              &#x27;LAST_NAME&#x27; VARCHAR(100) NULL ,</span></span><br><span class="line"><span class="string">              &#x27;STAT_CD&#x27; TINYINT NOT NULL DEFAULT 0</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string">                    &quot;</span><span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>看起来十分简单，我们再深入了解一下。</p><h3 id="与String相似之处"><a href="#与String相似之处" class="headerlink" title="与String相似之处"></a>与String相似之处</h3><ul><li>从文本块生成的实例的类型是<code>java.lang.String</code>。具有与传统双引号字符串相同特征的字符串。这包括对象表示和在字符串池中的表现。</li><li>我们可以使用文本块作为<code>String</code>类型的方法参数传递。</li><li>文本块可以在任何可以使用字符串文字的地方使用。例如，我们可以将它用于字符串连接。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">String textBlock = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                    World&quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">String joinedString =  string + textBlock;</span><br><span class="line"> </span><br><span class="line">System.out.println(joinedString);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ol><li>偶然缩进和基本缩进</li></ol><p>文本块保留其内容的缩进。为了执行此操作，JEP将空格分为偶然缩进和基本缩进。</p><p>让我们来看下第一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String dbSchema =   <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            CREATE TABLE &#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;</span></span><br><span class="line"><span class="string">            (</span></span><br><span class="line"><span class="string">              &#x27;ID&#x27; INT NOT NULL DEFAULT 0 ,</span></span><br><span class="line"><span class="string">              &#x27;FIRST_NAME&#x27; VARCHAR(100) NOT NULL ,</span></span><br><span class="line"><span class="string">              &#x27;LAST_NAME&#x27; VARCHAR(100) NULL ,</span></span><br><span class="line"><span class="string">              &#x27;STAT_CD&#x27; TINYINT NOT NULL DEFAULT 0</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string">                    &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">System.out.println(dbSchema);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|CREATE TABLE <span class="string">&#x27;TEST&#x27;</span>.<span class="string">&#x27;EMPLOYEE&#x27;</span></span><br><span class="line">|(</span><br><span class="line">|  <span class="string">&#x27;ID&#x27;</span> INT NOT NULL DEFAULT <span class="number">0</span> ,</span><br><span class="line">|  <span class="string">&#x27;FIRST_NAME&#x27;</span> VARCHAR(<span class="number">100</span>) NOT NULL ,</span><br><span class="line">|  <span class="string">&#x27;LAST_NAME&#x27;</span> VARCHAR(<span class="number">100</span>) NULL ,</span><br><span class="line">|  <span class="string">&#x27;STAT_CD&#x27;</span> TINYINT NOT NULL DEFAULT <span class="number">0</span></span><br><span class="line">|);</span><br></pre></td></tr></table></figure><p>这里，我们有两种类型的缩进:</p><p>第一个缩进是从行开始到所有行中的单词“CREATE”为止。这可以根据各种因素增加或减少，比如格式化插件或开发人员的选择。这是偶然的缩进。</p><p>第二次缩进是从字符’(‘到’ID’。大部分空间是4到8个空格。这样做是为了保持文本块的缩进意图。这被称为基本缩进。</p><blockquote><p><strong>Java</strong>文本块删除所有偶然的缩进，只保留基本的缩进。</p></blockquote><ol start="2"><li>添加自定义的缩进</li></ol><p>让我们想象一下，在上面的例子中，我们想要给所有行的左边两个制表符缩进。要做到这一点，我们可以将关闭的三重引号精确地向左移动两个制表符。放置的位置与应起压痕的位置完全相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String dbSchema =   <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">            CREATE TABLE &#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;</span></span><br><span class="line"><span class="string">            (</span></span><br><span class="line"><span class="string">                &#x27;ID&#x27; INT NOT NULL DEFAULT 0 ,</span></span><br><span class="line"><span class="string">                &#x27;FIRST_NAME&#x27; VARCHAR(100) NOT NULL ,</span></span><br><span class="line"><span class="string">                &#x27;LAST_NAME&#x27; VARCHAR(100) NULL ,</span></span><br><span class="line"><span class="string">                &#x27;STAT_CD&#x27; TINYINT NOT NULL DEFAULT 0</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(dbSchema);  </span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|       CREATE TABLE &#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;</span><br><span class="line">|       (</span><br><span class="line">|           &#x27;ID&#x27; INT NOT NULL DEFAULT 0 ,</span><br><span class="line">|           &#x27;FIRST_NAME&#x27; VARCHAR(100) NOT NULL ,</span><br><span class="line">|           &#x27;LAST_NAME&#x27; VARCHAR(100) NULL ,</span><br><span class="line">|           &#x27;STAT_CD&#x27; TINYINT NOT NULL DEFAULT 0</span><br><span class="line">|       );</span><br></pre></td></tr></table></figure><p>另外，请注意文本块中每行末尾的空格也会被Java编译器除去。</p><ol start="3"><li>TAB的处理</li></ol><p>对于编译器来说，了解制表符在不同编辑器中是如何显示的并不困难。</p><p>编译器将单个空格字符视为单个制表符，即使制表符可能会产生相当于8个空格的空白。</p><h3 id="行终止符"><a href="#行终止符" class="headerlink" title="行终止符"></a>行终止符</h3><p>不同的平台有不同的行结束符。Java不进行平台检测，并将文本块中的所有行终止符规范化为<code>\n</code>。</p><p>如果需要平台行终止符，则可以使用<code>String::replaceAll("\n",System.lineSeparator())</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">String textBlock = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                    World&quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">String joinedString =  string + textBlock;</span><br><span class="line"> </span><br><span class="line">joinedString = joinedString.replaceAll(<span class="string">&quot;\n&quot;</span>, System.lineSeparator());</span><br><span class="line"> </span><br><span class="line">System.out.println(joinedString);</span><br></pre></td></tr></table></figure><h3 id="新转义符"><a href="#新转义符" class="headerlink" title="新转义符"></a>新转义符</h3><ol><li>避开换行符</li></ol><p>很多时候，我们只希望将内容写入程序中的多行，但它们实际上是单个字符串内容。在这种情况下，我们可以使用行结束符转义字符，即单反斜杠’&#39;。它禁止包含隐式换行字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String dbSchema = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    CREATE TABLE &#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;\</span></span><br><span class="line"><span class="string">    (\</span></span><br><span class="line"><span class="string">    &#x27;ID&#x27; INT NOT NULL DEFAULT 0 ,\</span></span><br><span class="line"><span class="string">    &#x27;FIRST_NAME&#x27; VARCHAR(100) NOT NULL ,</span></span><br><span class="line"><span class="string">    &#x27;LAST_NAME&#x27; VARCHAR(100) NULL ,\</span></span><br><span class="line"><span class="string">    &#x27;STAT_CD&#x27; TINYINT NOT NULL DEFAULT 0 \</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">System.out.println(dbSchema);     </span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|CREATE TABLE &#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;(&#x27;ID&#x27; INT NOT NULL DEFAULT 0 ,&#x27;FIRST_NAME&#x27; VARCHAR(100) NOT NULL ,</span><br><span class="line">&#x27;LAST_NAME&#x27; VARCHAR(100) NULL ,&#x27;STAT_CD&#x27; TINYINT NOT NULL DEFAULT 0 );</span><br></pre></td></tr></table></figure><ol start="2"><li>右侧空格补充</li></ol><p>如果出于某种原因不想去掉缩进，可以使用’\s’ (ASCII字符32，空格)转义序列。在任何一行的末尾使用它可以保证一行在遇到’\s’之前都有空格字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String dbSchema =   <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    CREATE TABLE &#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;          \s</span></span><br><span class="line"><span class="string">    (                                       \s</span></span><br><span class="line"><span class="string">      &#x27;ID&#x27; INT NOT NULL DEFAULT 0 ,         \s</span></span><br><span class="line"><span class="string">       &#x27;FIRST_NAME&#x27; VARCHAR(100) NOT NULL , \s</span></span><br><span class="line"><span class="string">      &#x27;LAST_NAME&#x27; VARCHAR(100) NULL ,       \s</span></span><br><span class="line"><span class="string">      &#x27;STAT_CD&#x27; TINYINT NOT NULL DEFAULT 0  \s</span></span><br><span class="line"><span class="string">    );                                      \s</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">System.out.println(dbSchema.replaceAll(<span class="string">&quot;\s&quot;</span>, <span class="string">&quot;.&quot;</span>));</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>注：为便于理解，我们用’.’替换了所有空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE.TABLE.&#x27;TEST&#x27;.&#x27;EMPLOYEE&#x27;...........</span><br><span class="line">(........................................</span><br><span class="line">..&#x27;ID&#x27;.INT.NOT.NULL.DEFAULT.0.,..........</span><br><span class="line">...&#x27;FIRST_NAME&#x27;.VARCHAR(100).NOT.NULL.,..</span><br><span class="line">..&#x27;LAST_NAME&#x27;.VARCHAR(100).NULL.,........</span><br><span class="line">..&#x27;STAT_CD&#x27;.TINYINT.NOT.NULL.DEFAULT.0...</span><br><span class="line">);.......................................</span><br></pre></td></tr></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>只有在提高代码的清晰度时才使用文本块，特别是对于多行字符串。</li><li>如果字符串符合使用条件，请始终使用字符串。它们在应用程序性能方面更好。</li><li>为了保持所需的缩进，始终使用相对于内容的最后一行的三引号结束位置。</li><li>避免在复杂表达式(如lambda表达式或流操作)中出现内联文本块，以保持可读性。可考虑重构为局部变量或静态<code>final</code>字段。</li><li>文本块的缩进只使用空格或制表符。混合使用会导致文本对齐出现问题。</li></ol><h2 id="JEP-358-空指针问题定位"><a href="#JEP-358-空指针问题定位" class="headerlink" title="JEP 358 - 空指针问题定位"></a>JEP 358 - 空指针问题定位</h2><p>Java 14 通过精确地描述哪个变量为<code>null</code>，提高了由JVM生成的<code>NullPointerException</code>的可用性。</p><p>首先，我们需要传递<code>-XX:+ShowCodeDetailsInExceptionMessages</code> JVM参数，以便在运行应用程序时启用该特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelpfulNullPointerException</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">null</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(e.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    Long id;</span><br><span class="line">    String name;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出错误日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException: </span><br><span class="line">    Cannot invoke &quot;com.howtodoinjava.core.basic.Employee.getName()&quot; because &quot;e&quot; is null</span><br><span class="line">    at com.howtodoinjava.core.basic.HelpfulNullPointerException.main </span><br><span class="line">    (HelpfulNullPointerException.java:9)</span><br></pre></td></tr></table></figure><p>可以看到现在日志清晰的告诉我们哪个方法哪个变量为<code>null</code>而引发的异常。</p><p>没有此特性之前的输出日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">    at com.howtodoinjava.core.basic.HelpfulNullPointerException.main</span><br><span class="line">    (HelpfulNullPointerException.java:9)</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>只有由JVM直接创建和抛出的<strong>NPEs</strong>才会包含<code>null</code>的细节消息(当我们在程序中创建异常时，通常会在构造函数中传递这些消息)。运行在JVM上的程序显式地创建和（或）抛出的<strong>NPEs</strong>不受字节码分析的影响。</li><li>请注意，由于一些原因，可能在所有情况下都不需要<code>null</code>细节消息。例如，它会影响性能，因为算法会给堆栈跟踪的生成增加一些开销。</li><li>此外，它还增加了安全风险，因为<code>null</code>细节消息提供了对源代码的洞察，否则就不容易获得这些信息。</li></ol><h2 id="JEP-359-record（预览特性）"><a href="#JEP-359-record（预览特性）" class="headerlink" title="JEP 359 - record（预览特性）"></a>JEP 359 - record（预览特性）</h2><p>Java 中的<code>record</code>类型。它是在 Java 14 中作为预览特性引入的，用于修饰普通的不可变数据类，实现类和应用程序之间的数据传输。</p><h3 id="record-类型"><a href="#record-类型" class="headerlink" title="record 类型"></a>record 类型</h3><p>与<code>enum</code>一样，<code>record</code>也是 Java 中的一种特殊类类型。它的目的是用于创建类仅作为纯数据载体的地方。</p><p><code>class</code>和<code>record</code>之间的重要区别在于，<code>record</code>旨在消除设置和从实例获取数据所需的所有样板代码。<code>record</code>将这个责任转移给Java编译器，Java编译器帮我们生成构造函数、字段<code>getter</code>、<code>hashCode()</code>和<code>equals()</code>以及<code>toString()</code>等方法。</p><p>我们可以在<code>record</code>定义中覆盖上面提供的任何默认方法来实现自定义行为。</p><ol><li>语法</li></ol><p>使用关键字<code>record</code>在Java中创建这样的<code>record</code>类。就像我们在构造函数中所做的一样，我们需要在<code>record</code>中设置属性和它们的类型。</p><p>在给定的示例中，<code>EmployeeRecord</code>用于保存员工信息，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.howtodoinjava.core.basic;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> record <span class="title">EmployeeRecord</span><span class="params">(Long id, </span></span></span><br><span class="line"><span class="params"><span class="function">        String firstName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String lastName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String email, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建和使用</li></ol><p>要创建一个<code>record</code>，需要调用它的构造函数并将所有字段信息传递进去。然后，我们可以使用JVM生成的<code>getter</code>方法获取记录信息，并调用任何生成的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.howtodoinjava.core.basic;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        EmployeeRecord e1 = <span class="keyword">new</span> EmployeeRecord</span><br><span class="line">                (<span class="number">1l</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>, <span class="string">&quot;howtodoinjava@gmail.com&quot;</span>, <span class="number">38</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(e1.id());</span><br><span class="line">        System.out.println(e1.email());</span><br><span class="line">         </span><br><span class="line">        System.out.println(e1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">howtodoinjava@gmail.com</span><br><span class="line">EmployeeRecord[id=1, firstName=Lokesh, lastName=Gupta, </span><br><span class="line">            email=howtodoinjava@gmail.com, age=38]</span><br></pre></td></tr></table></figure><ol start="3"><li>底层原理</li></ol><p>当我们创建<code>EmployeeRecord</code>记录时，编译器创建字节代码并在生成的类文件中包括以下内容:</p><ol><li>一个包含所有字段的构造函数。</li><li><code>toString()</code>方法的作用是:打印<code>record</code>中所有字段的状态/值。</li><li><code>equals()</code>和<code>hashCode()</code>方法使用基于 动态反射（invokedynamic）的机制。</li><li><code>getter</code>方法的名字类似于字段名，例如<code>id()</code>， <code>firstName()</code>， <code>lastName()</code>， <code>email()</code>和<code>age()</code>。</li><li>这个类继承自<code>java.lang.Record</code>，它是所有<code>record</code>的基类。这意味着<code>record</code>不能继承其他类。</li><li>这个类被标记为<code>final</code>类型，这意味着我们不能创建它的子类。</li><li>它没有任何<code>setter</code>方法，这意味着<code>record</code>实例被设计为不可变的。</li></ol><p>如果我们在生成的类文件上运行<code>javap</code>工具，我们将看到类文件的相关内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">howtodoinjava</span>.<span class="title">core</span>.<span class="title">basic</span>.<span class="title">EmployeeRecord</span> </span></span><br><span class="line"><span class="class">                                        <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Record</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1                           </span></span><br><span class="line">  <span class="keyword">public</span> com.howtodoinjava.core.basic</span><br><span class="line">    .EmployeeRecord(java.lang.Long, java.lang.String, java.lang.String, java.lang.String, <span class="keyword">int</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//2</span></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//3</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(java.lang.Object)</span></span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//4</span></span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">Long <span class="title">id</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">firstName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">lastName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">email</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-record-的场景"><a href="#使用-record-的场景" class="headerlink" title="使用 record 的场景"></a>使用 record 的场景</h3><ol><li>在建模诸如领域模型类(可能通过ORM持久化)或数据传输对象(DTO)之类的东西时，<code>record</code>是理想的候选对象。</li><li>这些<code>record</code>在临时存储数据时很有用。例如，可以在JSON反序列化期间。通常在反序列化期间，我们不期望程序改变从JSON读取的数据。我们只是读取数据并将其传递给数据处理器或验证器。</li><li>另外，<code>record</code>不能替换可变<strong>Java bean</strong>，因为<code>record</code>在设计上是不可变的。</li><li>当一个类打算保存数据一段时间并且希望避免编写大量样板代码时，请使用<code>record</code>。</li><li>我们可以在各种其他情况下使用<code>record</code>，例如保存方法、流连接、复合键的多个返回值，以及在数据结构(如树节点)中使用记录。</li></ol><h3 id="原理深度分析"><a href="#原理深度分析" class="headerlink" title="原理深度分析"></a>原理深度分析</h3><ol><li>动态反射（invokedynamic）</li></ol><p>如果我们看Java编译器生成的字节码来检查<code>toString()</code>(以及<code>equals()</code>和<code>hashCode()</code>)的方法实现，那么它们是使用基于<code>invokedynamic</code>的机制实现的。</p><p><code>invokedynamic</code>是一个字节码指令，它通过动态方法调用来实现动态语言(针对JVM)的相关功能。</p><ol start="2"><li>无法被继承实现子类化</li></ol><p>尽管所有<code>record</code>都继承了<code>java.lang.Record</code>类，我们仍然不能显式创建<code>java.lang.Record</code>的子类，编译器不会通过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> <span class="keyword">extends</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> unit;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Compiler error : The type Data may not subclass Record explicitly</span></span><br></pre></td></tr></table></figure><p>这意味着获得<code>record</code>的唯一方法是显式地声明一个<code>record</code>，并让<code>javac</code>创建类文件。</p><ol start="3"><li>使用注解</li></ol><p>我们可以向记录的组件添加适用于它们的注释。例如，我们可以对<code>id</code>字段应用<code>@Transient</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> record <span class="title">EmployeeRecord</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Transient</span> Long id, </span></span></span><br><span class="line"><span class="params"><span class="function">        String firstName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String lastName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String email, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> age)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>序列化</li></ol><p><code>record</code>的Java序列化与常规类的序列化不同。<code>record</code>对象的序列化形式是从该对象的最终实例字段派生的值序列。<code>record</code>对象的流格式与流中的普通对象的流格式相同。</p><p>在反序列化中，如果指定流类描述符的本地类等价于一个<code>record</code>类，则首先读取并重新构建流字段，以作为<code>record</code>的组件值;其次，通过以组件值作为参数(或者如果流中缺少组件值，则为组件类型的默认值)调用<code>record</code>的规范构造函数来创建<code>record</code>对象。</p><p>除非是显式声明，否则<code>record</code>类的<code>serialVersionUID</code>为<code>0L</code>。对于<code>record</code>，也无需匹配<code>serialVersionUID</code>值。</p><p>无法自定义用于序列化<code>record</code>对象的过程;在序列化和反序列化期间，<code>record</code>类定义的任何特定于类的<code>writeObject</code>、<code>readObject</code>、<code>readObjectNoData</code>、<code>readResolve</code>、<code>writeExternal</code>和<code>readExternal</code>方法都会被忽略。但是，<code>writeReplace</code>方法可用于返回要序列化的替代对象。</p><p>在执行任何序列化或反序列化之前，我们必须确保<code>record</code>必须是可序列化或可外部化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> record <span class="title">EmployeeRecord</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        Long id, </span></span></span><br><span class="line"><span class="params"><span class="function">        String firstName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String lastName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String email, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> age)</span> implements Serializable</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        EmployeeRecord e1 = <span class="keyword">new</span> EmployeeRecord</span><br><span class="line">                (<span class="number">1l</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>, <span class="string">&quot;howtodoinjava@gmail.com&quot;</span>, <span class="number">38</span>);</span><br><span class="line">         </span><br><span class="line">        writeToFile(e1, <span class="string">&quot;employee1&quot;</span>);</span><br><span class="line">        System.out.println(readFromFile(<span class="string">&quot;employee1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToFile</span><span class="params">(EmployeeRecord obj, String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream( <span class="keyword">new</span> FileOutputStream(path)))&#123;</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">static</span> EmployeeRecord <span class="title">readFromFile</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        EmployeeRecord result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> (ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(path)))&#123;</span><br><span class="line">            result = (EmployeeRecord) ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EmployeeRecord[id=1, firstName=Lokesh, lastName=Gupta, </span><br><span class="line">            email=howtodoinjava@gmail.com, age=38]</span><br></pre></td></tr></table></figure><ol start="5"><li>其他字段和方法</li></ol><p>可以添加新的字段和方法，但不建议添加。</p><p>添加到<code>record</code>的新字段(未添加到组件列表中)必须是静态的。也可以添加一个方法来访问记录字段的内部状态。</p><p>添加的字段和方法不会在编译器隐式生成的字节代码中使用，因此它们不是<code>equals()</code>、<code>hashCode()</code>或<code>toString()</code>等任何方法实现的一部分。我们必须根据需要显式地使用它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> record <span class="title">EmployeeRecord</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        Long id, </span></span></span><br><span class="line"><span class="params"><span class="function">        String firstName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String lastName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String email, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> age)</span> implements Serializable </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//additional field</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> minor;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//additional method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fullName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>Compact Constructor</li></ol><p>我们可以在Compact Constructor中添加用于数据验证的构造函数特定代码。它有助于构建在给定业务上下文中有效的记录。</p><p>Compact Constructor不会导致编译器生成单独的构造函数。相反，在Compact Constructor中指定的代码将作为额外代码出现在规范构造函数的开始处。</p><p>我们不需要指定构造函数参数给字段的赋值，就像在规范构造函数中通常发生的那样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> record <span class="title">EmployeeRecord</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        Long id, </span></span></span><br><span class="line"><span class="params"><span class="function">        String firstName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String lastName, </span></span></span><br><span class="line"><span class="params"><span class="function">        String email, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> age)</span> implements Serializable </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> EmployeeRecord</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">18</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;You cannot hire a minor person as employee&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="API变化"><a href="#API变化" class="headerlink" title="API变化"></a>API变化</h3><ol><li>Class class</li></ol><p><code><a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Class.html">Class</a></code>类有两个方法—<code>isRecord()</code>和<code>getRecordComponents()</code>。<code>getRecordComponents()</code>方法返回一个<code>RecordComponent</code>对象数组。</p><p><code><a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/reflect/RecordComponent.html">RecordComponent</a></code>是<code>java.lang.reflect</code>包中的一个新类。它包含十一个方法，用于检索注释和泛型类型的详细信息。</p><ol start="2"><li>ElementType 枚举</li></ol><p><code><a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/annotation/ElementType.html">ElementType</a></code> 为 <code>record</code>新增了一个常量，<code>RECORD_COMPONENT</code>。</p><ol start="3"><li>javax.lang.model.element</li></ol><p><code><a href="https://docs.oracle.com/en/java/javase/14/docs/api/java.compiler/javax/lang/model/element/ElementKind.html">ElementKind</a></code>枚举为<code>record</code>新增了三个新的常量和<code>instanceof</code>特性的模式匹配，即<code>BINDING_VARIABLE</code>、<code>RECORD</code>和<code>RECORD_COMPONENT</code>。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>Java <code>record</code>是一个非常有用的特性，对Java类型系统是一个很好的补充，有助于几乎完全地减少为简单数据载体类编写的样板代码。</p><p>但是我们使用时应当注意，不要试图自定义它的行为，最好使用默认的构造。</p><h2 id="JEP-361-switch-表达式（标准）"><a href="#JEP-361-switch-表达式（标准）" class="headerlink" title="JEP 361 - switch 表达式（标准）"></a>JEP 361 - switch 表达式（标准）</h2><p>Java 14 中<code>switch</code>语句允许程序在运行时根据给定表达式的值有多个可能的执行路径。</p><p>求值表达式称为选择器表达式，它的类型必须是<code>char</code>、<code>byte</code>、<code>short</code>、<code>int</code>、<code>Character</code>、<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>String</code>或<code>enum</code>。</p><blockquote><p>在Java 14中，使用<code>switch</code>表达式，整个<code>switch</code>块“获得一个值”，然后可以在同一语句中将该值赋给一个变量。</p></blockquote><ol><li>例子</li></ol><ul><li>在Java 14中，它是一个标准特性。在Java 13和Java 12中，它作为预览特性。</li><li>它支持多个<code>case</code>标签，并使用<code>yield</code>来代替旧的<code>return</code>关键字返回值。</li><li>它还支持通过标签规则返回值(类似于<code>lambda</code>的箭头操作符)。</li><li>如果使用箭头函数(-&gt;)操作符，可以跳过<code>yield</code>关键字，如<code>isWeekDayV1_1()</code>所示。</li><li>如果使用冒号(:)操作符，则需要使用<code>yield</code>关键字，如<code>isWeekDayV1_2()</code>所示。</li><li>对于多个语句，使用大括号和<code>yield</code>关键字，如<code>isWeekDayV2()</code>所示。</li><li>对于<code>enum</code>，我们可以跳过默认情况。如果有任何丢失的值没有在<code>case</code>中处理，编译器将会报错。在所有其他表达式类型(<code>int</code>, <code>String</code>等)中，我们也必须提供默认情况。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchExpressions</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(isWeekDayV1_1(Day.MON));     <span class="comment">//true</span></span><br><span class="line">        System.out.println(isWeekDayV1_2(Day.MON));     <span class="comment">//true</span></span><br><span class="line">        System.out.println(isWeekDayV2(Day.MON));       <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//1 - 直接返回结果</span></span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Day</span> </span>&#123;</span><br><span class="line">        MON, TUE, WED, THUR, FRI, SAT, SUN</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isWeekDayV1_1</span> <span class="params">(Day day)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Boolean result = <span class="keyword">switch</span>(day) &#123;</span><br><span class="line">            <span class="keyword">case</span> MON, TUE, WED, THUR, FRI -&gt; <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> SAT, SUN -&gt; <span class="keyword">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isWeekDayV1_2</span> <span class="params">(Day day)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Boolean result = <span class="keyword">switch</span>(day) &#123;</span><br><span class="line">            <span class="keyword">case</span> MON, TUE, WED, THUR, FRI : yield <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">case</span> SAT, SUN : yield <span class="keyword">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//2 - 多条语句（部分处理后返回结果）</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isWeekDayV2</span> <span class="params">(Day day)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Boolean result = <span class="keyword">switch</span>(day) &#123;</span><br><span class="line">            <span class="keyword">case</span> MON, TUE, WED, THUR, FRI -&gt;</span><br><span class="line">            &#123; </span><br><span class="line">                System.out.println(<span class="string">&quot;It is WeekDay&quot;</span>);</span><br><span class="line">                yield <span class="keyword">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> SAT, SUN -&gt;</span><br><span class="line">            &#123; </span><br><span class="line">                System.out.println(<span class="string">&quot;It is Weekend&quot;</span>);</span><br><span class="line">                yield <span class="keyword">false</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>yield 和 return</li></ol><p><code>return</code>语句将控制权返回给方法或构造函数的调用者。<code>yield</code>语句通过使封闭的<code>switch</code>表达式产生指定的值来传递控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SwitchExpression:</span><br><span class="line">    YieldStatement:</span><br><span class="line">        yield Expression;</span><br></pre></td></tr></table></figure><ul><li><code>SwitchExpression</code>试图找到一个正确的<code>YieldStatement</code>，以便将控制转移到最内层的<code>yield</code>目标。</li><li><code>SwitchExpression</code>正常终止，表达式的值成为<code>SwitchExpression</code>的值。</li><li>如果表达式的求值由于某种原因突然结束，那么<code>yield</code>语句也会由于同样的原因突然结束。</li></ul><h2 id="更多新特性"><a href="#更多新特性" class="headerlink" title="更多新特性"></a>更多新特性</h2><h3 id="JEP-343-–-打包工具（孵化）"><a href="#JEP-343-–-打包工具（孵化）" class="headerlink" title="JEP 343 – 打包工具（孵化）"></a>JEP 343 – 打包工具（孵化）</h3><p>在 JDK 8 中，一个名为<code>javapackager</code>的工具作为 JavaFX 工具包的一部分发布。然而，随着 JDK 11 的发布，JavaFX 从 Java 中分离出来后，流行的<code>javapackager</code>就不再可用了。</p><p>这个 JEP 基于<code>javapackager</code>工具创建了一个简单的打包工具，该工具支持本地打包格式，为最终用户提供自然的安装体验。这些格式包括 Windows 上的 msi和exe, macOS 上的 pkg和dmg，以及Linux上的 deb和rpm。</p><p>该工具可以从命令行直接调用，也可以通过工具提供程序API以编程方式调用。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jpackage --name myapp --input lib --main-jar main.jar</span><br></pre></td></tr></table></figure><h3 id="JEP-345-–-NUMA-Aware-Memory-Allocation-for-G1"><a href="#JEP-345-–-NUMA-Aware-Memory-Allocation-for-G1" class="headerlink" title="JEP 345 – NUMA-Aware Memory Allocation for G1"></a>JEP 345 – NUMA-Aware Memory Allocation for G1</h3><p>在Numa(Non-Uniform Memory Access 非均匀内存访问)内存体系结构中，每个处理器接收少量的本地内存，但是其他核心被授予访问它的权限。</p><p>并行垃圾收集器(由<code>-XX:+UseParallelGC</code>启用)，多年来一直支持Numa，并提高了跨多个套接字运行单个 JVM 的配置的性能。</p><p>有了这个 JEP , G1垃圾收集器得到了增强，可以在 Linux OS 下更好地管理内存。</p><h3 id="JEP-349-–-JFR-事件流"><a href="#JEP-349-–-JFR-事件流" class="headerlink" title="JEP 349 – JFR 事件流"></a>JEP 349 – JFR 事件流</h3><p>该JEP为进程内和进程外程序公开了JDK运行情况记录数据，方便我们进行监控。</p><p>以前要使用这些数据，用户必须启动记录、停止记录、将内容转储到磁盘，然后解析记录文件。虽然对于程序分析比较友好，因为通常一次记录至少一分钟的时间，但是它不适用于实时监控。</p><p>该JEP对包 <code>jdk.jfr.consumer</code>，<code>jdk.jfr</code>模块进行了扩展，提供了异步订阅事件的功能。用户可以直接从磁盘存储库读取记录数据或流，而无需转储记录文件。</p><h3 id="JEP-352-–-非易失性映射的字节缓冲区"><a href="#JEP-352-–-非易失性映射的字节缓冲区" class="headerlink" title="JEP 352 – 非易失性映射的字节缓冲区"></a>JEP 352 – 非易失性映射的字节缓冲区</h3><p>这个 JEP 添加了一个新的特定于JDK的文件映射模式，这样<code>FileChannel API</code>就可以用来创建引用 <strong>NVM</strong>(non-volatile memory 非易失性内存)的<code>MappedByteBuffer</code>实例。<strong>NVM</strong>也被称为持久内存，用于永久存储数据。</p><p>当前对<code>MappedByteBufer API</code>的更改意味着它支持允许直接内存更新所需的所有行为，并提供实现持久数据类型(例如块文件系统、日志记录日志、持久对象等)的更高级别<strong>Java</strong>客户端库所需的持久性保证。</p><h3 id="JEP-363-–-删除并发标记清除-CMS-垃圾收集器"><a href="#JEP-363-–-删除并发标记清除-CMS-垃圾收集器" class="headerlink" title="JEP 363 – 删除并发标记清除(CMS)垃圾收集器"></a>JEP 363 – 删除并发标记清除(CMS)垃圾收集器</h3><p>这个 JEP 的目的是删除掉在**Java 9 (JEP 291)**中被标记为<code>deprecated</code>的CMS垃圾收集器。由于 <strong>CMS GC</strong>的代码难以理解维护，且两年内未有相关感兴趣人员进行维护和更新。</p><p>所以现在，<strong>CMS GC</strong>已经从<strong>Java 14</strong>中删除了。需要注意的是，<strong>CMS GC</strong> 在 <strong>Java 13</strong>之前都是可用的。</p><h3 id="JEP-367-–-删除-Pack200-工具和相关-API"><a href="#JEP-367-–-删除-Pack200-工具和相关-API" class="headerlink" title="JEP 367 – 删除 Pack200 工具和相关 API"></a>JEP 367 – 删除 Pack200 工具和相关 API</h3><p>在<code>java.util.jar</code>包中删除<code>pack200</code>和<code>unpack200</code>工具。<code>Pack200 API</code>(<strong>Java SE 5.0</strong>中引入的JAR文件的压缩方案)在<strong>Java SE 11</strong>中他们已经被标记为<code>deprecated</code>，不建议使用，且未来版本明确会删除。</p><h3 id="JEP-370-–-外部内存访问API（孵化）"><a href="#JEP-370-–-外部内存访问API（孵化）" class="headerlink" title="JEP 370 – 外部内存访问API（孵化）"></a>JEP 370 – 外部内存访问API（孵化）</h3><p>有了这个 JEP , <strong>Java</strong> 提供了一个 <strong>API</strong> 来允许 <strong>Java</strong> 程序安全有效地访问 <strong>Java</strong> 堆之外的外部内存。</p><p>目标是相同的 <strong>API</strong> 应该能够操作各种类型的外部内存(例如，本机内存、持久内存、托管堆内存等)。</p><p>无论操作的内存类型如何，<strong>API</strong> 都不应该破坏 <strong>JVM</strong> 的安全性。另外，在源代码中内存回收操作应该是显式的。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="https://howtodoinjava.com/java14/java14-new-features/">Java 14 – New Features and Improvements</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2020年3月17日，Java 14 发布。通过这篇文章我们来看下它新增的一些特性，便于我们更好的了解及掌握。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;PS： 预览特性表示改特性被放到该版本后，可以正常使用，但在以后版本可能会有改动/删除（也可能不再改动/删除）。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://www.sakuratears.top/tags/Java/"/>
    
    <category term="Java 14" scheme="https://www.sakuratears.top/tags/Java-14/"/>
    
  </entry>
  
  <entry>
    <title>【转】【译】The Twelve-Factor App</title>
    <link href="https://www.sakuratears.top/blog/%E3%80%90%E8%BD%AC%E3%80%91%E3%80%90%E8%AF%91%E3%80%91The-Twelve-Factor-App.html"/>
    <id>https://www.sakuratears.top/blog/%E3%80%90%E8%BD%AC%E3%80%91%E3%80%90%E8%AF%91%E3%80%91The-Twelve-Factor-App.html</id>
    <published>2020-11-29T13:42:00.000Z</published>
    <updated>2021-01-10T10:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（<strong>SaaS</strong>）。<strong>12-Factor</strong> 为构建如下的 <strong>SaaS</strong> 应用提供了方法论：</p><ul><li>使用标准化流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。</li><li>和操作系统之间尽可能的划清界限，在各个系统中提供最大的可移植性。</li><li>适合部署在现代的云计算平台，从而在服务器和系统管理方面节省资源。</li><li>将开发环境和生产环境的差异降至最低，并使用持续交付实施敏捷开发。</li><li>可以在工具、架构和开发流程不发生明显变化的前提下实现扩展。</li></ul><p>这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本文的贡献者参与过数以百计的应用程序的开发和部署，并通过 <a href="https://www.heroku.com/">Heroku</a> 平台间接见证了数十万应用程序的开发，运作以及扩展的过程。</p><p>本文综合了我们关于 <strong>SaaS</strong> 应用几乎所有的经验和智慧，是开发此类应用的理想实践标准，并特别关注于应用程序如何保持良性成长，开发者之间如何进行有效的代码协作，以及如何 避免软件污染 。</p><p>我们的初衷是分享在现代软件开发过程中发现的一些系统性问题，并加深对这些问题的认识。我们提供了讨论这些问题时所需的共享词汇，同时使用相关术语给出一套针对这些问题的广义解决方案。本文格式的灵感来自于 <strong>Martin Fowler</strong> 的书籍： <strong>Patterns of Enterprise Application Architecture ， Refactoring</strong> 。</p><h1 id="读者应该是哪些人？"><a href="#读者应该是哪些人？" class="headerlink" title="读者应该是哪些人？"></a>读者应该是哪些人？</h1><p>任何 <strong>SaaS</strong> 应用的开发人员。部署和管理此类应用的运维工程师。</p><h1 id="12-Factors"><a href="#12-Factors" class="headerlink" title="12-Factors"></a>12-Factors</h1><h2 id="I-基准代码"><a href="#I-基准代码" class="headerlink" title="I. 基准代码"></a>I. 基准代码</h2><p><em>一份基准代码（Codebase），多份部署（deploy）</em></p><p><strong>12-Factor</strong>应用(译者注：应该是说一个使用本文概念来设计的应用，下同)通常会使用版本控制系统加以管理，如<strong>Git</strong>, <strong>Mercurial</strong>, <strong>Subversion</strong>。一份用来跟踪代码所有修订版本的数据库被称作 代码库（<strong>code repository</strong>, <strong>code repo</strong>, <strong>repo</strong>）。</p><p>在类似 <strong>SVN</strong> 这样的集中式版本控制系统中，基准代码 就是指控制系统中的这一份代码库；而在 <strong>Git</strong> 那样的分布式版本控制系统中，基准代码 则是指最上游的那份代码库。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-670.png" alt="upload successful"></p><p>基准代码和应用之间总是保持一一对应的关系：</p><ul><li>一旦有多个基准代码，就不能称为一个应用，而是一个分布式系统。分布式系统中的每一个组件都是一个应用，每一个应用可以分别使用 <strong>12-Factor</strong> 进行开发。</li><li>多个应用共享一份基准代码是有悖于 <strong>12-Factor</strong> 原则的。解决方案是将共享的代码拆分为独立的类库，然后使用 依赖管理 策略去加载它们。</li></ul><p>尽管每个应用只对应一份基准代码，但可以同时存在多份部署。每份 部署 相当于运行了一个应用的实例。通常会有一个生产环境，一个或多个预发布环境。此外，每个开发人员都会在自己本地环境运行一个应用实例，这些都相当于一份部署。</p><p>所有部署的基准代码相同，但每份部署可以使用其不同的版本。比如，开发人员可能有一些提交还没有同步至预发布环境；预发布环境也有一些提交没有同步至生产环境。但它们都共享一份基准代码，我们就认为它们只是相同应用的不同部署而已。</p><h2 id="II-依赖"><a href="#II-依赖" class="headerlink" title="II. 依赖"></a>II. 依赖</h2><p><em>显式声明依赖关系（ dependency ）</em></p><p>大多数编程语言都会提供一个打包系统，用来为各个类库提供打包服务，就像 <strong>Perl</strong> 的 <strong>CPAN</strong> 或是 <strong>Ruby</strong> 的 <strong>Rubygems</strong> 。通过打包系统安装的类库可以是系统级的（称之为 “site packages”），或仅供某个应用程序使用，部署在相应的目录中（称之为 “vendoring” 或 “bunding”）。</p><p><strong>12-Factor</strong>规则下的应用程序不会隐式依赖系统级的类库。 它一定通过 依赖清单 ，确切地声明所有依赖项。此外，在运行过程中通过 依赖隔离 工具来确保程序不会调用系统中存在但清单中未声明的依赖项。这一做法会统一应用到生产和开发环境。</p><p>例如， <strong>Ruby</strong> 的 <strong>Bundler</strong> 使用 <code>Gemfile</code> 作为依赖项声明清单，使用 <code>bundle exec</code> 来进行依赖隔离。<strong>Python</strong> 中则可分别使用两种工具 – <strong>Pip</strong> 用作依赖声明， <strong>Virtualenv</strong> 用作依赖隔离。甚至 <strong>C</strong> 语言也有类似工具， <strong>Autoconf</strong> 用作依赖声明，静态链接库用作依赖隔离。无论用什么工具，依赖声明和依赖隔离必须一起使用，否则无法满足 <strong>12-Factor</strong> 规范。</p><p>显式声明依赖的优点之一是为新进开发者简化了环境配置流程。新进开发者可以检出应用程序的基准代码，安装编程语言环境和它对应的依赖管理工具，只需通过一个 构建命令 来安装所有的依赖项，即可开始工作。例如，<strong>Ruby/Bundler</strong> 下使用 <code>bundle install</code>，而 <strong>Clojure/Leiningen</strong> 则是 <code>lein deps</code>。</p><p><strong>12-Factor</strong> 应用同样不会隐式依赖某些系统工具，如 <strong>ImageMagick</strong> 或是<code>curl</code>。即使这些工具存在于几乎所有系统，但终究无法保证所有未来的系统都能支持应用顺利运行，或是能够和应用兼容。如果应用必须使用到某些系统工具，那么这些工具应该被包含在应用之中。</p><h2 id="III-配置"><a href="#III-配置" class="headerlink" title="III. 配置"></a>III. 配置</h2><p><em>在环境中存储配置</em></p><p>通常，应用的 配置 在不同 部署 (预发布、生产环境、开发环境等等)间会有很大差异。这其中包括：</p><ul><li>数据库，<strong>Memcached</strong>，以及其他 后端服务 的配置</li><li>第三方服务的证书，如 <strong>Amazon S3</strong>、<strong>Twitter</strong> 等</li><li>每份部署特有的配置，如域名等</li></ul><p>有些应用在代码中使用常量保存配置，这与 <strong>12-Factor</strong> 所要求的代码和配置严格分离显然大相径庭。配置文件在各部署间存在大幅差异，代码却完全一致。</p><p>判断一个应用是否正确地将配置排除在代码之外，一个简单的方法是看该应用的基准代码是否可以立刻开源，而不用担心会暴露任何敏感的信息。</p><p>需要指出的是，这里定义的“配置”并不包括应用的内部配置，比如 <strong>Rails</strong> 的 <code>config/routes.rb</code>，或是使用 <strong>Spring</strong> 时 代码模块间的依赖注入关系 。这类配置在不同部署间不存在差异，所以应该写入代码。</p><p>另外一个解决方法是使用配置文件，但不把它们纳入版本控制系统，就像 <strong>Rails</strong> 的 <code>config/database.yml</code> 。这相对于在代码中使用常量已经是长足进步，但仍然有缺点：总是会不小心将配置文件签入了代码库；配置文件的可能会分散在不同的目录，并有着不同的格式，这让找出一个地方来统一管理所有配置变的不太现实。更糟的是，这些格式通常是语言或框架特定的。</p><p><strong>12-Factor</strong>推荐将应用的配置存储于 <em>环境变量</em> 中（ <code>env vars, env</code> ）。环境变量可以非常方便地在不同的部署间做修改，却不动一行代码；与配置文件不同，不小心把它们签入代码库的概率微乎其微；与一些传统的解决配置问题的机制（比如 <strong>Java</strong> 的属性配置文件）相比，环境变量与语言和系统无关。</p><p>配置管理的另一个方面是分组。有时应用会将配置按照特定部署进行分组（或叫做“环境”），例如 <strong>Rails</strong> 中的 <code>development</code>,<code>test</code>, 和 <code>production</code> 环境。这种方法无法轻易扩展：更多部署意味着更多新的环境，例如 <code>staging</code> 或 <code>qa</code>。 随着项目的不断深入，开发人员可能还会添加他们自己的环境，比如 <code>joes-staging</code> ，这将导致各种配置组合的激增，从而给管理部署增加了很多不确定因素。</p><p><strong>12-Factor</strong> 应用中，环境变量的粒度要足够小，且相对独立。它们永远也不会组合成一个所谓的“环境”，而是独立存在于每个部署之中。当应用程序不断扩展，需要更多种类的部署时，这种配置管理方式能够做到平滑过渡。</p><h2 id="IV-后端服务"><a href="#IV-后端服务" class="headerlink" title="IV. 后端服务"></a>IV. 后端服务</h2><p><em>把后端服务(backing services)当作附加资源</em></p><p>后端服务是指程序运行所需要的通过网络调用的各种服务，如数据库（<strong>MySQL</strong>，<strong>CouchDB</strong>），消息/队列系统（<strong>RabbitMQ，Beanstalkd</strong>），<strong>SMTP</strong> 邮件发送服务（<strong>Postfix</strong>），以及缓存系统（<strong>Memcached</strong>）。</p><p>类似数据库的后端服务，通常由部署应用程序的系统管理员一起管理。除了本地服务之外，应用程序有可能使用了第三方发布和管理的服务。示例包括 <strong>SMTP</strong>（例如 <strong>Postmark</strong>），数据收集服务（例如 <strong>New Relic</strong> 或 <strong>Loggly</strong>），数据存储服务（如 <strong>Amazon S3</strong>），以及使用 <strong>API</strong> 访问的服务（例如 <strong>Twitter</strong>, <strong>Google Maps</strong>, <strong>Last.fm</strong>）。</p><p><strong>12-Factor</strong> 应用不会区别对待本地或第三方服务。 对应用程序而言，两种都是附加资源，通过一个 <strong>url</strong> 或是其他存储在 配置 中的服务定位/服务证书来获取数据。<strong>12-Factor</strong> 应用的任意 部署 ，都应该可以在不进行任何代码改动的情况下，将本地 <strong>MySQL</strong> 数据库换成第三方服务（例如 <strong>Amazon RDS</strong>）。类似的，本地 <strong>SMTP</strong> 服务应该也可以和第三方 <strong>SMTP</strong> 服务（例如 Postmark ）互换。上述 2 个例子中，仅需修改配置中的资源地址。</p><p>每个不同的后端服务是一份 资源 。例如，一个 <strong>MySQL</strong> 数据库是一个资源，两个 <strong>MySQL</strong> 数据库（用来数据分区）就被当作是 2 个不同的资源。<strong>12-Factor</strong> 应用将这些数据库都视作 附加资源 ，这些资源和它们附属的部署保持松耦合。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-671.png" alt="upload successful"></p><p>部署可以按需加载或卸载资源。例如，如果应用的数据库服务由于硬件问题出现异常，管理员可以从最近的备份中恢复一个数据库，卸载当前的数据库，然后加载新的数据库 – 整个过程都不需要修改代码。</p><h2 id="V-构建，发布，运行"><a href="#V-构建，发布，运行" class="headerlink" title="V. 构建，发布，运行"></a>V. 构建，发布，运行</h2><p><em>严格分离构建和运行</em></p><p>基准代码 转化为一份部署(非开发环境)需要以下三个阶段：</p><ul><li>构建阶段 是指将代码仓库转化为可执行包的过程。构建时会使用指定版本的代码，获取和打包 依赖项，编译成二进制文件和资源文件。</li><li>发布阶段 会将构建的结果和当前部署所需 配置 相结合，并能够立刻在运行环境中投入使用。</li><li>运行阶段 （或者说“运行时”）是指针对选定的发布版本，在执行环境中启动一系列应用程序 进程。</li></ul><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-672.png" alt="upload successful"></p><p><strong>12-factor</strong> 应用严格区分构建，发布，运行这三个步骤。 举例来说，直接修改处于运行状态的代码是非常不可取的做法，因为这些修改很难再同步回构建步骤。</p><p>部署工具通常都提供了发布管理工具，最引人注目的功能是退回至较旧的发布版本。比如， <strong>Capistrano</strong> 将所有发布版本都存储在一个叫 <code>releases</code> 的子目录中，当前的在线版本只需映射至对应的目录即可。该工具的 <code>rollback</code> 命令可以很容易地实现回退版本的功能。</p><p>每一个发布版本必须对应一个唯一的发布 <code>ID</code>，例如可以使用发布时的时间戳（<code>2011-04-06-20:32:17</code>），亦或是一个增长的数字（<code>v100</code>）。发布的版本就像一本只能追加的账本，一旦发布就不可修改，任何的变动都应该产生一个新的发布版本。</p><p>新的代码在部署之前，需要开发人员触发构建操作。但是，运行阶段不一定需要人为触发，而是可以自动进行。如服务器重启，或是进程管理器重启了一个崩溃的进程。因此，运行阶段应该保持尽可能少的模块，这样假设半夜发生系统故障而开发人员又捉襟见肘也不会引起太大问题。构建阶段是可以相对复杂一些的，因为错误信息能够立刻展示在开发人员面前，从而得到妥善处理。</p><h2 id="VI-进程"><a href="#VI-进程" class="headerlink" title="VI. 进程"></a>VI. 进程</h2><p><em>以一个或多个无状态进程运行应用</em></p><p>运行环境中，应用程序通常是以一个和多个 进程 运行的。</p><p>最简单的场景中，代码是一个独立的脚本，运行环境是开发人员自己的笔记本电脑，进程由一条命令行（例如<code>python my_script.py</code>）。另外一个极端情况是，复杂的应用可能会使用很多 进程类型 ，也就是零个或多个进程实例。</p><p><strong>12-Factor</strong> 应用的进程必须无状态且 无共享 。 任何需要持久化的数据都要存储在 后端服务 内，比如数据库。</p><p>内存区域或磁盘空间可以作为进程在做某种事务型操作时的缓存，例如下载一个很大的文件，对其操作并将结果写入数据库的过程。<strong>12-Factor</strong>应用根本不用考虑这些缓存的内容是不是可以保留给之后的请求来使用，这是因为应用启动了多种类型的进程，将来的请求多半会由其他进程来服务。即使在只有一个进程的情形下，先前保存的数据（内存或文件系统中）也会因为重启（如代码部署、配置更改、或运行环境将进程调度至另一个物理区域执行）而丢失。</p><p>源文件打包工具（<strong>Jammit</strong>, <strong>django-compressor</strong>） 使用文件系统来缓存编译过的源文件。<strong>12-Factor</strong> 应用更倾向于在 构建步骤 做此动作——正如 <strong>Rails</strong>资源管道 ，而不是在运行阶段。</p><p>一些互联网系统依赖于 “粘性 <code>session</code>”， 这是指将用户 <code>session</code> 中的数据缓存至某进程的内存中，并将同一用户的后续请求路由到同一个进程。粘性 <code>session</code> 是 <strong>12-Factor</strong> 极力反对的。<strong>Session</strong> 中的数据应该保存在诸如 <strong>Memcached</strong> 或 <strong>Redis</strong> 这样的带有过期时间的缓存中。</p><h2 id="VII-端口绑定"><a href="#VII-端口绑定" class="headerlink" title="VII. 端口绑定"></a>VII. 端口绑定</h2><p><em>通过端口绑定(Port binding)来提供服务</em></p><p>互联网应用有时会运行于服务器的容器之中。例如 <strong>PHP</strong> 经常作为 <strong>Apache HTTPD</strong> 的一个模块来运行，正如 <strong>Java</strong> 运行于 <strong>Tomcat</strong> 。</p><p><strong>12-Factor</strong> 应用完全自我加载 而不依赖于任何网络服务器就可以创建一个面向网络的服务。互联网应用 通过端口绑定来提供服务 ，并监听发送至该端口的请求。</p><p>本地环境中，开发人员通过类似 <em><a href="http://localhost:5000/">http://localhost:5000/</a></em> 的地址来访问服务。在线上环境中，请求统一发送至公共域名而后路由至绑定了端口的网络进程。</p><p>通常的实现思路是，将网络服务器类库通过 依赖声明 载入应用。例如，<strong>Python</strong> 的 <strong>Tornado</strong>, <strong>Ruby</strong> 的<strong>Thin</strong> , <strong>Java</strong> 以及其他基于 <strong>JVM</strong> 语言的 <strong>Jetty</strong>。完全由 用户端 ，确切的说应该是应用的代码，发起请求。和运行环境约定好绑定的端口即可处理这些请求。</p><p><strong>HTTP</strong> 并不是唯一一个可以由端口绑定提供的服务。其实几乎所有服务器软件都可以通过进程绑定端口来等待请求。例如，使用 <strong>XMPP</strong> 的 <strong>ejabberd</strong> ， 以及使用 <strong>Redis</strong> 协议 的 <strong>Redis</strong> 。</p><p>还要指出的是，端口绑定这种方式也意味着一个应用可以成为另外一个应用的 后端服务 ，调用方将服务方提供的相应 <strong>URL</strong> 当作资源存入 配置 以备将来调用。</p><h2 id="VIII-并发"><a href="#VIII-并发" class="headerlink" title="VIII. 并发"></a>VIII. 并发</h2><p><em>通过进程模型进行扩展</em></p><p>任何计算机程序，一旦启动，就会生成一个或多个进程。互联网应用采用多种进程运行方式。例如，<strong>PHP</strong> 进程作为 <strong>Apache</strong> 的子进程存在，随请求按需启动。<strong>Java</strong> 进程则采取了相反的方式，在程序启动之初 <strong>JVM</strong> 就提供了一个超级进程储备了大量的系统资源(CPU 和内存)，并通过多线程实现内部的并发管理。上述 2 个例子中，进程是开发人员可以操作的最小单位。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-673.png" alt="upload successful"></p><p>在 <strong>12-factor</strong> 应用中，进程是一等公民。<strong>12-Factor</strong> 应用的进程主要借鉴于 <strong>unix</strong> 守护进程模型 。开发人员可以运用这个模型去设计应用架构，将不同的工作分配给不同的 进程类型 。例如，<strong>HTTP</strong> 请求可以交给 <strong>web</strong> 进程来处理，而常驻的后台工作则交由 <strong>worker</strong> 进程负责。</p><p>这并不包括个别较为特殊的进程，例如通过虚拟机的线程处理并发的内部运算，或是使用诸如 <strong>EventMachine</strong>, <strong>Twisted</strong>, <strong>Node.js</strong> 的异步/事件触发模型。但一台独立的虚拟机的扩展有瓶颈（垂直扩展），所以应用程序必须可以在多台物理机器间跨进程工作。</p><p>上述进程模型会在系统急需扩展时大放异彩。 <strong>12-Factor</strong> 应用的进程所具备的无共享，水平分区的特性 意味着添加并发会变得简单而稳妥。这些进程的类型以及每个类型中进程的数量就被称作 进程构成 。</p><p><strong>12-Factor</strong> 应用的进程 不需要守护进程 或是写入 <strong>PID</strong> 文件。相反的，应该借助操作系统的进程管理器(例如 <strong>systemd</strong> ，分布式的进程管理云平台，或是类似 <strong>Foreman</strong> 的工具)，来管理 输出流 ，响应崩溃的进程，以及处理用户触发的重启和关闭超级进程的请求。</p><h2 id="IX-易处理"><a href="#IX-易处理" class="headerlink" title="IX. 易处理"></a>IX. 易处理</h2><p><em>快速启动和优雅终止可最大化健壮性</em></p><p><strong>12-Factor</strong> 应用的 进程 是 易处理（<strong>disposable</strong>）的，意思是说它们可以瞬间开启或停止。 这有利于快速、弹性的伸缩应用，迅速部署变化的 代码 或 配置 ，稳健的部署应用。</p><p>进程应当追求 最小启动时间 。 理想状态下，进程从敲下命令到真正启动并等待请求的时间应该只需很短的时间。更少的启动时间提供了更敏捷的 发布 以及扩展过程，此外还增加了健壮性，因为进程管理器可以在授权情形下容易的将进程搬到新的物理机器上。</p><p>进程 一旦接收 终止信号（<strong>SIGTERM</strong>） 就会优雅的终止 。就网络进程而言，优雅终止是指停止监听服务的端口，即拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。此类型的进程所隐含的要求是<strong>HTTP</strong>请求大多都很短(不会超过几秒钟)，而在长时间轮询中，客户端在丢失连接后应该马上尝试重连。</p><p>对于 <strong>worker</strong> 进程来说，优雅终止是指将当前任务退回队列。例如，<strong>RabbitMQ</strong> 中，<strong>worker</strong> 可以发送一个<strong>NACK</strong>信号。 <strong>Beanstalkd</strong> 中，任务终止并退回队列会在<strong>worker</strong>断开时自动触发。有锁机制的系统诸如 <strong>Delayed Job</strong> 则需要确定释放了系统资源。此类型的进程所隐含的要求是，任务都应该 可重复执行 ， 这主要由将结果包装进事务或是使重复操作 幂等 来实现。</p><p>进程还应当在面对突然死亡时保持健壮，例如底层硬件故障。虽然这种情况比起优雅终止来说少之又少，但终究有可能发生。一种推荐的方式是使用一个健壮的后端队列，例如 <strong>Beanstalkd</strong> ，它可以在客户端断开或超时后自动退回任务。无论如何，<strong>12-Factor</strong> 应用都应该可以设计能够应对意外的、不优雅的终结。<strong>Crash-only design</strong> 将这种概念转化为 合乎逻辑的理论。</p><h2 id="X-开发环境与线上环境等价"><a href="#X-开发环境与线上环境等价" class="headerlink" title="X. 开发环境与线上环境等价"></a>X. 开发环境与线上环境等价</h2><p><em>尽可能的保持开发，预发布，线上环境相同</em></p><p>从以往经验来看，开发环境（即开发人员的本地 部署）和线上环境（外部用户访问的真实部署）之间存在着很多差异。这些差异表现在以下三个方面：</p><ul><li>时间差异： 开发人员正在编写的代码可能需要几天，几周，甚至几个月才会上线。</li><li>人员差异： 开发人员编写代码，运维人员部署代码。</li><li>工具差异： 开发人员或许使用 <strong>Nginx</strong>，<strong>SQLite</strong>，<strong>OS X</strong>，而线上环境使用 <strong>Apache</strong>，<strong>MySQL</strong> 以及 <strong>Linux</strong>。</li></ul><p><strong>12-Factor</strong> 应用想要做到 持续部署 就必须缩小本地与线上差异。 再回头看上面所描述的三个差异:</p><ul><li>缩小时间差异：开发人员可以几小时，甚至几分钟就部署代码。</li><li>缩小人员差异：开发人员不只要编写代码，更应该密切参与部署过程以及代码在线上的表现。</li><li>缩小工具差异：尽量保证开发环境以及线上环境的一致性。</li></ul><p>将上述总结变为一个表格如下：</p><table><thead><tr><th>项目</th><th>传统应用</th><th>12-Factor 应用</th></tr></thead><tbody><tr><td>每次部署间隔</td><td>数周</td><td>几小时</td></tr><tr><td>开发人员 vs 运维人员</td><td>不同的人</td><td>相同的人</td></tr><tr><td>开发环境 vs 线上环境</td><td>不同</td><td>尽量接近</td></tr></tbody></table><p>后端服务 是保持开发与线上等价的重要部分，例如数据库，队列系统，以及缓存。许多语言都提供了简化获取后端服务的类库，例如不同类型服务的 适配器 。下列表格提供了一些例子。</p><table><thead><tr><th>类型</th><th>语言</th><th>类库</th><th>适配器</th></tr></thead><tbody><tr><td>数据库</td><td>Ruby/Rails</td><td>ActiveRecord</td><td>MySQL, PostgreSQL, SQLite</td></tr><tr><td>队列</td><td>Python/Django</td><td>Celery</td><td>RabbitMQ, Beanstalkd, Redis</td></tr><tr><td>缓存</td><td>Ruby/Rails</td><td>ActiveSupport::Cache</td><td>Memory, filesystem, Memcached</td></tr></tbody></table><p>开发人员有时会觉得在本地环境中使用轻量的后端服务具有很强的吸引力，而那些更重量级的健壮的后端服务应该使用在生产环境。例如，本地使用 <strong>SQLite</strong> 线上使用 <strong>PostgreSQL</strong>；又如本地缓存在进程内存中而线上存入 <strong>Memcached</strong>。</p><p><strong>12-Factor</strong> 应用的开发人员应该反对在不同环境间使用不同的后端服务 ，即使适配器已经可以几乎消除使用上的差异。这是因为，不同的后端服务意味着会突然出现的不兼容，从而导致测试、预发布都正常的代码在线上出现问题。这些错误会给持续部署带来阻力。从应用程序的生命周期来看，消除这种阻力需要花费很大的代价。</p><p>与此同时，轻量的本地服务也不像以前那样引人注目。借助于<strong>Homebrew</strong>，<strong>apt-get</strong>等现代的打包系统，诸如<strong>Memcached</strong>、<strong>PostgreSQL</strong>、<strong>RabbitMQ</strong> 等后端服务的安装与运行也并不复杂。此外，使用类似 <strong>Chef</strong> 和 <strong>Puppet</strong> 的声明式配置工具，结合像 Vagrant 这样轻量的虚拟环境就可以使得开发人员的本地环境与线上环境无限接近。与同步环境和持续部署所带来的益处相比，安装这些系统显然是值得的。</p><p>不同后端服务的适配器仍然是有用的，因为它们可以使移植后端服务变得简单。但应用的所有部署，这其中包括开发、预发布以及线上环境，都应该使用同一个后端服务的相同版本。</p><h2 id="XI-日志"><a href="#XI-日志" class="headerlink" title="XI. 日志"></a>XI. 日志</h2><p><em>把日志当作事件流</em></p><p>日志 使得应用程序运行的动作变得透明。在基于服务器的环境中，日志通常被写在硬盘的一个文件里，但这只是一种输出格式。</p><p>日志应该是 事件流 的汇总，将所有运行中进程和后端服务的输出流按照时间顺序收集起来。尽管在回溯问题时可能需要看很多行，日志最原始的格式确实是一个事件一行。日志没有确定开始和结束，但随着应用在运行会持续的增加。</p><p><strong>12-factor</strong>应用本身从不考虑存储自己的输出流。 不应该试图去写或者管理日志文件。相反，每一个运行的进程都会直接的标准输出（<strong>stdout</strong>）事件流。开发环境中，开发人员可以通过这些数据流，实时在终端看到应用的活动。</p><p>在预发布或线上部署中，每个进程的输出流由运行环境截获，并将其他输出流整理在一起，然后一并发送给一个或多个最终的处理程序，用于查看或是长期存档。这些存档路径对于应用来说不可见也不可配置，而是完全交给程序的运行环境管理。类似 <strong>Logplex</strong> 和 <strong>Fluentd</strong> 的开源工具可以达到这个目的。</p><p>这些事件流可以输出至文件，或者在终端实时观察。最重要的，输出流可以发送到 <strong>Splunk</strong> 这样的日志索引及分析系统，或 <strong>Hadoop/Hive</strong> 这样的通用数据存储系统。这些系统为查看应用的历史活动提供了强大而灵活的功能，包括：</p><ul><li>找出过去一段时间特殊的事件。</li><li>图形化一个大规模的趋势，比如每分钟的请求量。</li><li>根据用户定义的条件实时触发警报，比如每分钟的报错超过某个警戒线。</li></ul><h2 id="XII-管理进程"><a href="#XII-管理进程" class="headerlink" title="XII. 管理进程"></a>XII. 管理进程</h2><p><em>后台管理任务当作一次性进程运行</em></p><p>进程构成（<strong>process formation</strong>）是指用来处理应用的常规业务（比如处理 <strong>web</strong> 请求）的一组进程。与此不同，开发人员经常希望执行一些管理或维护应用的一次性任务，例如：</p><ul><li>运行数据移植（<strong>Django</strong> 中的 <code>manage.py migrate</code>, <strong>Rails</strong> 中的 <code>rake db:migrate</code>）。</li><li>运行一个控制台（也被称为 <strong>REPL shell</strong>），来执行一些代码或是针对线上数据库做一些检查。大多数语言都通过解释器提供了一个 <strong>REPL</strong> 工具（<code>python</code> 或 <code>perl</code>） ，或是其他命令（<strong>Ruby</strong> 使用 <code>irb</code>, <strong>Rails</strong> 使用 <code>rails console</code>）。</li><li>运行一些提交到代码仓库的一次性脚本。</li></ul><p>一次性管理进程应该和正常的 常驻进程 使用同样的环境。这些管理进程和任何其他的进程一样使用相同的 代码 和 配置 ，基于某个 发布版本 运行。后台管理代码应该随其他应用程序代码一起发布，从而避免同步问题。</p><p>所有进程类型应该使用同样的 依赖隔离 技术。例如，如果Ruby的web进程使用了命令 <code>bundle exec thin start</code> ，那么数据库移植应使用 <code>bundle exec rake db:migrate</code> 。同样的，如果一个 <strong>Python</strong> 程序使用了 <strong>Virtualenv</strong>，则需要在运行 <strong>Tornado Web</strong> 服务器和任何 <code>manage.py</code> 管理进程时引入 <code>bin/python</code> 。</p><p><strong>12-factor</strong> 尤其青睐那些提供了 <strong>REPL shell</strong> 的语言，因为那会让运行一次性脚本变得简单。在本地部署中，开发人员直接在命令行使用 <code>shell</code> 命令调用一次性管理进程。在线上部署中，开发人员依旧可以使用<strong>ssh</strong>或是运行环境提供的其他机制来运行这样的进程。</p><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://12factor.net/">The Twelve-Factor App</a></p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（&lt;strong&gt;SaaS&lt;/strong&gt;）。&lt;strong&gt;12-Factor&lt;/strong&gt; 为构建如下的 &lt;strong&gt;SaaS&lt;/strong&gt; 应用提供了方法论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用标准化流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。&lt;/li&gt;
&lt;li&gt;和操作系统之间尽可能的划清界限，在各个系统中提供最大的可移植性。&lt;/li&gt;
&lt;li&gt;适合部署在现代的云计算平台，从而在服务器和系统管理方面节省资源。&lt;/li&gt;
&lt;li&gt;将开发环境和生产环境的差异降至最低，并使用持续交付实施敏捷开发。&lt;/li&gt;
&lt;li&gt;可以在工具、架构和开发流程不发生明显变化的前提下实现扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="12-factors" scheme="https://www.sakuratears.top/tags/12-factors/"/>
    
    <category term="12准则" scheme="https://www.sakuratears.top/tags/12%E5%87%86%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>CAS详解</title>
    <link href="https://www.sakuratears.top/blog/CAS%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://www.sakuratears.top/blog/CAS%E8%AF%A6%E8%A7%A3.html</id>
    <published>2020-11-21T09:24:00.000Z</published>
    <updated>2021-01-10T10:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CAS全称CompareAndSwap，比较并交换，主要是通过处理器的指令来保证操作的原子性，它包含三个操作数：</p><ol><li>变量内存地址，V表示</li><li>旧的预期值，A表示</li><li>准备设置的新值，B表示</li></ol><p>当执行CAS指令时，只有当V等于A时，才会用B去更新V的值，否则就不会执行更新操作。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="CAS原理"><a href="#CAS原理" class="headerlink" title="CAS原理"></a>CAS原理</h2><p>CAS的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//备份旧数据</span></span><br><span class="line">    <span class="comment">//基于旧数据构造新数据B</span></span><br><span class="line">&#125;<span class="keyword">while</span> (!CAS(变量内存地址,旧的预期值,准备设置的新值));</span><br></pre></td></tr></table></figure><p>如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-667.jpg" alt="upload successful"></p><ol><li>我们假设线程1和线程2同时访问变量V=33，两线程将变量值33拷贝到各自工作空间内存；</li><li>两线程分别进行 +1 操作，分别得到准备设置的新值34，而后进行值设置，对V进行 CAS 操作；</li><li>线程1操作成功，将值设置为34，完成后并更新自己本地值A=34；</li><li>这时候线程2操作就会返回失败，因为V的值以及被线程1设置为了34；</li><li>失败后，它会进行重试，它需要在获取34到本地，进行 +1 操作，再进行CAS(34,34,35)的操作，而后线程2将值设置成功。</li></ol><p>大家可能会有个疑问，如果在第2步，线程1和线程2同时进行CAS操作，是如何保证原子性的呢？</p><p>在<code>sun.misc.Unsafe</code>类中，我们可以看到<code>CompareAndSwap</code>方法是调用的原生代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapObject</span><span class="params">(Object var1, <span class="keyword">long</span> var2, Object var4, Object var5)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapLong</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">long</span> var4, <span class="keyword">long</span> var6)</span></span>;</span><br></pre></td></tr></table></figure><p>我们来分析一下它们的相关代码。</p><h2 id="CAS源码解析"><a href="#CAS源码解析" class="headerlink" title="CAS源码解析"></a>CAS源码解析</h2><p>我们以<code>compareAndSwapInt</code>为例，在<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/prims/unsafe.cpp">openjdk 1.8 unsafe.cpp</a>里可以找到如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UNSAFE_ENTRY</span>(jboolean, <span class="built_in">Unsafe_CompareAndSwapInt</span>(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line">  <span class="built_in">UnsafeWrapper</span>(<span class="string">&quot;Unsafe_CompareAndSwapInt&quot;</span>);</span><br><span class="line">  oop p = JNIHandles::<span class="built_in">resolve</span>(obj);</span><br><span class="line">  jint* addr = (jint *) <span class="built_in">index_oop_from_field_offset_long</span>(p, offset);</span><br><span class="line">  <span class="keyword">return</span> (jint)(Atomic::<span class="built_in">cmpxchg</span>(x, addr, e)) == e;</span><br><span class="line">UNSAFE_END</span><br></pre></td></tr></table></figure><p>其对应我们的<code>sun.misc.Unsafe</code>类中的<code>compareAndSwapInt</code>方法。</p><p>关键方法为<code>Atomic::cmpxchg(x, addr, e)</code>，它位于<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/atomic.cpp">openjdk 1.8 atomic.cpp</a>文件中，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">Atomic::cmpxchg</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> exchange_value,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>* dest, <span class="keyword">unsigned</span> <span class="keyword">int</span> compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">int</span>) == <span class="built_in"><span class="keyword">sizeof</span></span>(jint), <span class="string">&quot;more work to do&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)Atomic::<span class="built_in">cmpxchg</span>((jint)exchange_value, (<span class="keyword">volatile</span> jint*)dest,</span><br><span class="line">                                       (jint)compare_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Atomic::cmpxchg((jint)exchange_value, (volatile jint*)dest,(jint)compare_value)</code>方法位于<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/os_cpu/windows_x86/vm/atomic_windows_x86.inline.hpp">openjdk 1.8 atomic_windows_x86.inline.hpp</a>文件中，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> jint     <span class="title">Atomic::cmpxchg</span>    <span class="params">(jint     exchange_value, <span class="keyword">volatile</span> jint*     dest, jint     compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// alternative for InterlockedCompareExchange</span></span><br><span class="line">  <span class="keyword">int</span> mp = os::<span class="built_in">is_MP</span>();</span><br><span class="line">  __asm &#123;</span><br><span class="line">    mov edx, dest</span><br><span class="line">    mov ecx, exchange_value</span><br><span class="line">    mov eax, <span class="function">compare_value</span></span><br><span class="line"><span class="function">    <span class="title">LOCK_IF_MP</span><span class="params">(mp)</span></span></span><br><span class="line"><span class="function">    cmpxchg dword ptr [edx], ecx</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><code>mp</code>是<code>os::is_MP()</code>的返回结果，<code>os::is_MP()</code>是一个内联函数，用来判断当前系统是否为多处理器。</p><p>如果当前系统是多处理器，该函数返回1，否则，返回0。</p><p><code>LOCK_IF_MP(mp)</code>会根据<code>mp</code>的值来决定是否为<code>cmpxchg</code>指令添加<code>lock</code>前缀。</p><ul><li>如果通过<code>mp</code>判断当前系统是多处理器（即<code>mp</code>值为1），则为<code>cmpxchg</code>指令添加<code>lock</code>前缀。</li><li>否则，不加<code>lock</code>前缀。</li></ul><p>这是一种优化手段，单处理器的环境没有必要添加<code>lock</code>前缀，只有在多核情况下才会添加<code>lock</code>前缀，因为<code>lock</code>会导致性能下降。</p><p><code>cmpxchg</code>是汇编指令，作用是比较并交换操作数。</p><p><strong>关于lock指令</strong></p><ol><li>确保对内存的读-改-写操作原子执行。在Pentium及Pentium之前的处理器中，带有lock前缀的指令在执行期间会锁住总线，使得其他处理器暂时无法通过总线访问内存。很显然，这会带来昂贵的开销。从Pentium 4，Intel Xeon及P6处理器开始，intel在原有总线锁的基础上做了一个很有意义的优化：如果要访问的内存区域（area of memory）在lock前缀指令执行期间已经在处理器内部的缓存中被锁定（即包含该内存区域的缓存行当前处于独占或以修改状态），并且该内存区域被完全包含在单个缓存行（cache line）中，那么处理器将直接执行该指令。由于在指令执行期间该缓存行会一直被锁定，其它处理器无法读/写该指令要访问的内存区域，因此能保证指令执行的原子性。这个操作过程叫做缓存锁定（cache locking），缓存锁定将大大降低lock前缀指令的执行开销，但是当多处理器之间的竞争程度很高或者指令访问的内存地址未对齐时，仍然会锁住总线。</li><li>禁止该指令与之前和之后的读和写指令重排序。</li><li>把写缓冲区中的所有数据刷新到内存中。</li></ol><p>上面的第1点保证了CAS操作是一个原子操作，第2点和第3点所具有的内存屏障效果，保证了CAS同时具有<code>volatile</code>读和<code>volatile</code>写的内存语义。</p><p>有关<code>lock</code>指令更多内容，我们可以下载<a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/64-ia-32-architectures-software-developer-vol-2a-manual.html">Intel 官方文档</a> 来查看。</p><h2 id="CAS的缺点"><a href="#CAS的缺点" class="headerlink" title="CAS的缺点"></a>CAS的缺点</h2><p>虽然CAS很高效的解决了原子操作问题，但CAS仍有3个主要缺点：</p><ol><li>ABA问题：ABA的问题指的是在CAS更新的过程中，当读取到的值是A，然后准备赋值的时候仍然是A，但是实际上有可能A的值被改成了B，然后又被改回了A，这个CAS更新的漏洞就叫做ABA。只是ABA的问题大部分场景下都不影响并发的最终效果。</li></ol><p>Java中有<code>AtomicStampedReference</code>来解决这个问题，它加入了预期标志和更新后标志两个字段，更新时不光检查值，还要检查当前的标志是否等于预期标志，全部相等的话才会更新。</p><p>我们来简单看下它的部分代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicStampedReference</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> T reference;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> stamp;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Pair</span><span class="params">(T reference, <span class="keyword">int</span> stamp)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.reference = reference;</span><br><span class="line">            <span class="keyword">this</span>.stamp = stamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> &lt;T&gt; <span class="function">Pair&lt;T&gt; <span class="title">of</span><span class="params">(T reference, <span class="keyword">int</span> stamp)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;T&gt;(reference, stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Pair&lt;V&gt; pair;</span><br><span class="line">    <span class="comment">//....部分代码略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V   expectedReference,</span></span></span><br><span class="line"><span class="params"><span class="function">                                V   newReference,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="keyword">int</span> expectedStamp,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="keyword">int</span> newStamp)</span> </span>&#123;</span><br><span class="line">    Pair&lt;V&gt; current = pair;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        expectedReference == current.reference &amp;&amp;</span><br><span class="line">        expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">        ((newReference == current.reference &amp;&amp;</span><br><span class="line">            newStamp == current.stamp) ||</span><br><span class="line">            casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...部分代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>AtomicStampedReference</code>类中除了对象引用<code>reference</code>，还加入了标志字段<code>stamp</code>来解决ABA问题。</p><ol start="2"><li>循环时间长开销大：自旋CAS的方式如果长时间不成功，会给CPU带来很大的开销。</li></ol><p>上面图示中我们提到线程2如果更新不成功，会进行重试，其采用自旋方式进行重试，如果有多个线程操作共享变量时，部分线程可能自旋时间过长，对CPU造成较大开销。</p><ol start="3"><li>只能保证一个共享变量的原子操作：只对一个共享变量操作可以保证原子性，但是多个则不行，多个可以通过<code>AtomicReference</code>来处理或者使用锁<code>synchronized</code>实现。</li></ol><p>我们来看下<code>AtomicReference</code>的部分代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReference</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1848883965231344442L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicReference.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...部分代码略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expect, V update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...部分代码略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它是通过<code>compareAndSwapObject</code>函数来实现的。</p><p>经过上面分析，我们可以看到CAS操作和乐观锁的性质类似。</p><h2 id="CAS应用"><a href="#CAS应用" class="headerlink" title="CAS应用"></a>CAS应用</h2><p>CAS在<code>java.util.concurrent</code>包下的类中有大量被应用，有兴趣的同学可以看一下。</p><h2 id="CAS的开销"><a href="#CAS的开销" class="headerlink" title="CAS的开销"></a>CAS的开销</h2><p>CAS（比较并交换）是CPU指令级的操作，只有一步原子操作，所以非常快。而且CAS避免了请求操作系统来裁定锁的问题，不用麻烦操作系统，直接在CPU内部就搞定了。但CAS就没有开销了吗？不！有cache miss的情况。这个问题比较复杂，首先需要了解CPU的硬件体系结构：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-668.png" alt="upload successful"></p><p>上图可以看到一个8核CPU计算机系统，每个CPU有cache（CPU内部的高速缓存，寄存器），管芯内还带有一个互联模块，使管芯内的两个核可以互相通信。在图中央的系统互联模块可以让四个管芯相互通信，并且将管芯与主存连接起来。数据以“缓存线”为单位在系统中传输，“缓存线”对应于内存中一个 2 的幂大小的字节块，大小通常为 32 到 256 字节之间。当 CPU 从内存中读取一个变量到它的寄存器中时，必须首先将包含了该变量的缓存线读取到 CPU 高速缓存。同样地，CPU 将寄存器中的一个值存储到内存时，不仅必须将包含了该值的缓存线读到 CPU 高速缓存，还必须确保没有其他 CPU 拥有该缓存线的拷贝。</p><p>比如，如果 CPU0 在对一个变量执行“比较并交换”（CAS）操作，而该变量所在的缓存线在 CPU7 的高速缓存中，就会发生以下经过简化的事件序列：</p><ul><li>CPU0 检查本地高速缓存，没有找到缓存线。</li><li>请求被转发到 CPU0 和 CPU1 的互联模块，检查 CPU1 的本地高速缓存，没有找到缓存线。</li><li>请求被转发到系统互联模块，检查其他三个管芯，得知缓存线被 CPU6和 CPU7 所在的管芯持有。</li><li>请求被转发到 CPU6 和 CPU7 的互联模块，检查这两个 CPU 的高速缓存，在 CPU7 的高速缓存中找到缓存线。</li><li>CPU7 将缓存线发送给所属的互联模块，并且刷新自己高速缓存中的缓存线。</li><li>CPU6 和 CPU7 的互联模块将缓存线发送给系统互联模块。</li><li>系统互联模块将缓存线发送给 CPU0 和 CPU1 的互联模块。</li><li>CPU0 和 CPU1 的互联模块将缓存线发送给 CPU0 的高速缓存。</li><li>CPU0 现在可以对高速缓存中的变量执行 CAS 操作了</li></ul><p>以上是刷新不同CPU缓存的开销。最好情况下的 CAS 操作消耗大概 40 纳秒，超过 60 个时钟周期。这里的“最好情况”是指对某一个变量执行 CAS 操作的 CPU 正好是最后一个操作该变量的CPU，所以对应的缓存线已经在 CPU 的高速缓存中了，类似地，最好情况下的锁操作（一个“round trip 对”包括获取锁和随后的释放锁）消耗超过 60 纳秒，超过 100 个时钟周期。这里的“最好情况”意味着用于表示锁的数据结构已经在获取和释放锁的 CPU 所属的高速缓存中了。锁操作比 CAS 操作更加耗时，是因深入理解并行编程<br>为锁操作的数据结构中需要两个原子操作。缓存未命中消耗大概 140 纳秒，超过 200 个时钟周期。需要在存储新值时查询变量的旧值的 CAS 操作，消耗大概 300 纳秒，超过 500 个时钟周期。想想这个，在执行一次 CAS 操作的时间里，CPU 可以执行 500 条普通指令。这表明了细粒度锁的局限性。</p><p>以下是cache miss cas 和lock的性能对比：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-669.png" alt="upload successful"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章我们讲到了CAS的一些特点，大致了解了CAS的一些原理，在实际工作中，针对于一些场景，也可以使用CAS来操作。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="https://www.cnblogs.com/Mainz/p/3546347.html">非阻塞同步算法与CAS(Compare and Swap)无锁算法</a></li><li><a href="http://hg.openjdk.java.net/jdk8">openjdk hotspot 1.8源码</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/64-ia-32-architectures-software-developer-vol-2a-manual.html">Intel 官方文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;CAS全称CompareAndSwap，比较并交换，主要是通过处理器的指令来保证操作的原子性，它包含三个操作数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量内存地址，V表示&lt;/li&gt;
&lt;li&gt;旧的预期值，A表示&lt;/li&gt;
&lt;li&gt;准备设置的新值，B表示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当执行CAS指令时，只有当V等于A时，才会用B去更新V的值，否则就不会执行更新操作。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://www.sakuratears.top/tags/Java/"/>
    
    <category term="CAS" scheme="https://www.sakuratears.top/tags/CAS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Hystrix服务容错保护入门</title>
    <link href="https://www.sakuratears.top/blog/Spring-Cloud-Hystrix%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4%E5%85%A5%E9%97%A8.html"/>
    <id>https://www.sakuratears.top/blog/Spring-Cloud-Hystrix%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4%E5%85%A5%E9%97%A8.html</id>
    <published>2020-11-21T09:13:00.000Z</published>
    <updated>2020-11-21T09:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在微服务中，系统由许多服务单元构成，各单元的应用间通过服务注册与订阅的方式互相依赖。由于每个单元都在不同的进程中进行，依赖通过远程调用的方式执行，这样就有可能因为网络原因或者依赖服务自身问题出现调用故障或延迟，这些问题会直接导致调用方的对外服务也出现延迟，若此时调用方的请求不断增加，最后就会因等待出现故障的依赖方响应而形成任务积压，最终导致自身服务瘫痪。</p><p>由于微服务中存在众多服务单元，若一个单元出现故障，就很容易因依赖关系而引发故障的蔓延，最终导致整个系统瘫痪。未解决这样的问题，产生了断路器等一系列服务保护机制，而 Spring Cloud Hystrix 就是其中之一。</p><p>Spring Cloud Hystrix 基于 Netflix 开源框架 Hystrix 实现，具备 服务降级、服务熔断、线程和信号隔离、请求缓存、请求合并以及服务监控等强大功能。</p><p>接下来，我们从一个示例来了解它的使用及原理。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>由于内容较多，这篇文章我们先来了解下 Hystrix 的一个简单例子，然后再来了解两种模式：命令模式 和 观察者-订阅者模式。</p><h2 id="Hystrix示例"><a href="#Hystrix示例" class="headerlink" title="Hystrix示例"></a>Hystrix示例</h2><p>在Eureka和Ribbon的例子里，我们创建了 eureka-server、sakura-service、sakura-consumer服务，简单实现了微服务的调用。</p><p>PS：详见此文章<a href="https://www.sakuratears.top/blog/Eureka%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html">Eureka简介及简单使用</a></p><p>我们启动3个 eureka-server（高可用服务注册中心）端口号为8001、8002、8003，启动2个sakura-service 模拟服务提供方，端口号为9001、9002，启动1个sakura-service 模拟服务提供方，端口号7001。</p><p>正常情况下，我们访问 <a href="http://host:port/consumer">http://host:port/consumer</a> 会提示HelloWorld信息，如下图。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-662.jpg" alt="upload successful"></p><p>现在我们模拟服务提供方部分服务故障，停掉 sakura-service 的一个节点 9002 ，再次访问 <a href="http://host:port/consumer">http://host:port/consumer</a> ，有时候正常，有时候会出现如下错误。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-663.jpg" alt="upload successful"></p><p>同时反应缓慢，因为需要等到我们这边服务调用超时，这种错误信息当调用方请求不断增加后，易出现任务积压，从而导致调用方对外服务也变得不可用。</p><p>下面我们引入 Spring Cloud Hystrix。</p><ul><li><p>在 sakura-consumer 工程的 <code>pom.xml</code>的 <code>dependency</code> 节点中引入 <code>spring-cloud-starter-netflix-hystrix</code>依赖。</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 sakura-consumer 工程的主类<code>SakuraConsumerApplication</code>中使用<code>@EnableCircuitBreaker</code>开启断路器功能。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;sakura&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SakuraConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SakuraConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改造服务消费方式，我们新增<code>SakuraService</code>类，注入<code>RestTemplate</code>。然后在<code>SakuraController</code>中注入<code>SakuraService</code>，并对其方法<code>hello</code>进行调用，同时，在<code>hello</code>方法上增加<code>@HystrixCommand</code>注解来指定回调方法。如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SakuraService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;helloFallback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">&quot;http://SAKURA-SERVICE/hello&quot;</span>,String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SakuraController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SakuraService sakuraService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/consumer&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sakuraService.hello();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这时候我们启动 sakura-consumer，同时停掉 sakura-service 的一个节点 9002 ，再次访问 <a href="http://host:port/consumer">http://host:port/consumer</a> ，我们多次访问，可以看到有时候正常，有时候提示如下：</p><p>正常显示：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-664.jpg" alt="upload successful"></p><p>访问到服务异常的实例后提示：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-665.jpg" alt="upload successful"></p><p>上面的信息说明了当consumer访问到异常的实例后，不再返回之前的错误内容，而输出内容为error，也就是我们指定的 Hystrix 服务回调，即<code>helloFallback</code>里的内容。</p><p>这种是属于服务异常的情况，我们也可以模拟服务请求阻塞（长时间无响应）的情况，我们来看一下：</p><p>我们对sakura-service进行部分修改，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SakuraController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务注册</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;eurekaRegistration&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Registration registration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> time = <span class="keyword">new</span> Random().nextInt(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sleepTime:&quot;</span>+time);</span><br><span class="line">        Thread.sleep(time);</span><br><span class="line">        System.out.println(<span class="string">&quot;Host:&quot;</span>+registration.getHost()</span><br><span class="line">                +<span class="string">&quot;;ServiceID:&quot;</span>+registration.getServiceId()</span><br><span class="line">                +<span class="string">&quot;;port:&quot;</span>+registration.getPort()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使其收到请求后随机0~3000ms在进行处理，而后重新启动 sakura-service （9001、9002）。</p><p>我们通过全局配置，在<code>application.properties</code>文件里设置 Hystrix 超时时间为 2000ms。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span>=<span class="string">2000</span></span><br></pre></td></tr></table></figure><p>然后我们调用 <a href="http://host:port/consumer">http://host:port/consumer</a> ，可以看到当响应时间在 2000ms 内时，输出 Hello World，否则输出 error。</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-666.jpg" alt="upload successful"></p><p>上面就是服务消费者因调用的服务超时从而触发熔断请求，并调用回调逻辑返回结果。</p><p>在了解 Hystrix 原理及详情之前，我们需要先对一下部分内容有所熟悉。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令模式，它可以将来自客户端的请求封装成一个对象，从而让我们可以使用不同的请求对客户端进行参数化。它可以被用于实现“行为请求者”与“行为实现者”的解耦，以便使两者可以适应变化。</p><p>我们通过代码来看下命令模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令接收者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//真正的业务逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体命令实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        Command command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        invoker.setCommand(command);</span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码对象示意如下：</p><ul><li>Receiver：接收者，它知道如何处理具体的业务逻辑。</li><li>Command：抽象命令，它定义了一个命令对象应具备的一系列命令操作，如<code>execute</code>，<code>undo</code>，<code>redo</code>等。当命令操作被调用的时候就会触发接收者去做具体命令对应的业务逻辑。</li><li>ConcreteCommand：具体的命令实现，在这里它绑定了命令操作与接收者之间的关系，<code>execute</code>命令的实现委托给了<code>Receiver</code>的<code>action</code>函数。</li><li>Invoker：调用者，它持有一个命令对象，并且可以在需要的时候通过命令对象完成具体的业务逻辑。</li></ul><p>从上面的例子我们可以看到，调用者<code>Invoker</code>与操作者<code>Receiver</code>通过<code>Command</code>命令接口实现了解耦。</p><p>对于调用者来说，我们可以为其注入多个命令操作，比如新建文件、复制文件、删除文件等操作，调用者只需在需要的时候调用即可，而不需要知道这些操作命令实际是如何实现的。</p><p>上面的示例中，我们可以发现，<code>Invoker</code>与<code>Receiver</code>的关系非常类似于“请求-响应”模式，所以它比较适用于实现记录日志、撤销操作、队列请求等。</p><p>下面这些情况下应考虑使用命令模式。</p><ul><li>使用命令模式作为“回调（Callback）”在面向对象系统中的替代。“Callback”讲的便是先将一个函数登记上，然后在以后在调用此函数。</li><li>需要在不同的时间指定请求、将请求排队。一个命令对象和原先的请求发出者可以有不同的生命期。换言之，原先的请求发出者可能已经不在了，而命令对象本身仍然是活动的。这时命令的接收者可以是在本地，也可以在网络的另一个地址。命令对象可以在序列化之后传送到另一台机器上去。</li><li>系统需要支持命令的撤销。命令对象可以把状态存储起来，等到客户端需要撤销命令所产生的效果时，可以调用<code>undo()</code>方法，把命令所产生的效果撤销掉。命令对象还可以提高<code>redo()</code>方法，以供客户端在需要时再重新实施命令效果。</li><li>如果要将系统中所有的数据更新到日志里，以便在系统崩溃是，可以根据日志读回所有的数据更新命令，重新调用<code>execute()</code>方法一条一条执行这些命令，从而恢复系统在崩溃前所做的数据更新。</li></ul><p>在 Hystrix 中，共有两种命令对象，如下：</p><ul><li>HystrixCommand ： 用在依赖的服务返回单个操作结果的时候。</li><li>HystrixObservableCommand ： 用在依赖的服务返回多个操作结果的时候。</li></ul><p>上面两个命令对象分别有两种命令执行方式，如下：</p><p>HystrixCommand：</p><ul><li>execute()：同步执行，从依赖的服务返回一个单一的结果对象，或是在发生错误的时候抛出异常。</li><li>queue()：异步执行，直接返回一个 <code>Future</code> 对象，其中包含了服务执行结束时要返回的单一结果对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R value = command.execute();</span><br><span class="line">Future&lt;R&gt; fValue = command.queue();</span><br></pre></td></tr></table></figure><p>HystrixObservableCommand:</p><ul><li>observe()：返回<code>Observable</code>对象，它代表了操作的多个结果，它是一个<strong>Hot Observable</strong>。</li><li>toObservable()：同样会返回<code>Observable</code>对象，也代表了操作的多个结果，但它返回的是一个<strong>Cold Observable</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;R&gt; ohValue = command.observe();</span><br><span class="line">Observable&lt;R&gt; ocValue = command.toObservable();</span><br></pre></td></tr></table></figure><p>在Hystrix底层大量使用了<strong>RxJava</strong>，我们在介绍Hystrix原理时，先对<strong>RxJava</strong>的 观察者-订阅者 模式来做一个简单了解。</p><h2 id="RxJava-观察者-订阅者模式"><a href="#RxJava-观察者-订阅者模式" class="headerlink" title="RxJava 观察者-订阅者模式"></a>RxJava 观察者-订阅者模式</h2><p>上面我们所提到的<code>Observable</code>对象就是<strong>RxJava</strong>的核心内容之一，可以把它理解为“事件源”或是“被观察者”，与其对应的<code>Subscriber</code>对象，可以理解为“订阅者”或是“观察者”。这两个对象是<strong>RxJava</strong>响应式编程的重要组成部分。</p><ul><li><code>Observable</code>用来向订阅者<code>Subscriber</code>对象发布事件，<code>Subscriber</code>对象则在接收到事件后对其进行处理，而在这里所指的的事件通常就是对依赖服务的调用。</li><li>一个<code>Observable</code>可以发出多个事件，直到结束或者发生异常。</li><li><code>Observable</code>对象每发出一个事件，就会调用对应观察者<code>Subscriber</code>对象的<code>onNext()</code>方法。</li><li>每一个<code>Observable</code>的执行，最后一定会通过调用<code>Subscriber.onCompleted()</code>或者<code>Subscriber.onError()</code>来结束该事件的操作流。</li></ul><p>我们通过一个例子来看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建事件源observable</span></span><br><span class="line">        Observable&lt;String&gt; observable = Observable.unsafeCreate(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                subscriber.onNext(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">                subscriber.onNext(<span class="string">&quot;I am sakuratears&quot;</span>);</span><br><span class="line">                subscriber.onCompleted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;completed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Subscriber:&quot;</span>+s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅</span></span><br><span class="line">        observable.subscribe(subscriber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该示例中，我们创建了一个简单的事件源<code>observable</code>，一个对事件传递内容输出的订阅者<code>subscriber</code>，通过<code>observable.subscribe(subscriber)</code>来触发事件的发布。</p><p>对于事件源<code>observable</code>，有两个不同的概念： <strong>Hot Observable</strong> 和 <strong>Cold Observable</strong>。其中<strong>Hot Observable</strong>，它不论“事件源”是否有“订阅者”，都会在创建后对事件进行发布，所以对于<strong>Hot Observable</strong>的每一个“订阅者”都有可能是从“事件源”的中途开始的，并可能只是看到了整个操作过程的局部过程。而<strong>Cold Observable</strong>在没有“订阅者”的时候并不会发布事件，而是进行等待，直到有“订阅者”之后才进行发布事件，所以对于<strong>Cold Observable</strong>的订阅者，它可以保证从一开始看到整个操作的全部过程。</p><p>以上就是在熟悉 Hystrix 源码时，我们应该有所了解的部分内容。</p><p>我们将在下篇文章详细分析 Hystrix 的一些内容。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇文章我们通过一个 Hystrix 的示例，对 Hystrix 有了简单的认识，同时简单介绍了两种模式，在 Hystrix 中，便使用了这两种模式，我们将在下篇文章详细分析，并进一步了解 Hystrix 的一些特点。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在微服务中，系统由许多服务单元构成，各单元的应用间通过服务注册与订阅的方式互相依赖。由于每个单元都在不同的进程中进行，依赖通过远程调用的方式执行，这样就有可能因为网络原因或者依赖服务自身问题出现调用故障或延迟，这些问题会直接导致调用方的对外服务也出现延迟，若此时调用方的请求不断增加，最后就会因等待出现故障的依赖方响应而形成任务积压，最终导致自身服务瘫痪。&lt;/p&gt;
&lt;p&gt;由于微服务中存在众多服务单元，若一个单元出现故障，就很容易因依赖关系而引发故障的蔓延，最终导致整个系统瘫痪。未解决这样的问题，产生了断路器等一系列服务保护机制，而 Spring Cloud Hystrix 就是其中之一。&lt;/p&gt;
&lt;p&gt;Spring Cloud Hystrix 基于 Netflix 开源框架 Hystrix 实现，具备 服务降级、服务熔断、线程和信号隔离、请求缓存、请求合并以及服务监控等强大功能。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="SpringCloud" scheme="https://www.sakuratears.top/tags/SpringCloud/"/>
    
    <category term="Hystrix" scheme="https://www.sakuratears.top/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Ribbon 配置详解</title>
    <link href="https://www.sakuratears.top/blog/SpringCloud-Ribbon-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://www.sakuratears.top/blog/SpringCloud-Ribbon-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html</id>
    <published>2020-11-01T10:02:00.000Z</published>
    <updated>2021-01-10T10:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前面的文章中我们分析了SpringCloud Ribbon的源码，了解了Ribbon的特点及一些重要接口。这篇文章我们来看下Ribbon在使用时的各种配置。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Ribbon的自动化配置"><a href="#Ribbon的自动化配置" class="headerlink" title="Ribbon的自动化配置"></a>Ribbon的自动化配置</h2><p>由于Ribbon中定义的每个接口都有多种不同的策略实现，同时这些接口之间又有一定的依赖关系，某些开发者开始时很难上手，不知道如何选择具体实现策略等。</p><p>Spring Cloud Ribbon的自动化配置恰恰能够解决这种问题，当我们引入Spring Cloud Ribbon依赖之后，就能自动化构建下面这些接口的实现。</p><ul><li><code>IClientConfig</code>：Ribbon的客户端配置，默认采用<code>com.netflix.client.config.DefaultClientConfigImpl</code>实现。</li><li><code>IRule</code>：Ribbon的负载均衡策略，默认采用<code>com.netflix.loadbalancer.ZoneAvoidanceRule</code>实现，该策略能够在多区域环境下选出最佳区域的实例进行访问。</li><li><code>IPing</code>：Ribbon的实例检查策略，默认采用<code>com.netflix.loadbalancer.NoOpPing</code>实现，该策略不会检查实例是否可用，直接返回<code>true</code>，默认所有实例都是可用的。</li><li><code>ServerList&lt;Server&gt;</code>：服务实例清单维护机制，默认采用<code>com.netflix.loadbalancer.ConfigurationBasedServerList</code>实现。</li><li><code>ServerListFilter&lt;Server&gt;</code>：服务实例清单过滤机制，默认采用<code>org.springframework.cloud.netflix.ribbon.ZonePreferenceServerListFilter</code>实现，该策略能够优先过滤出与请求调用方处于同区域的服务实例。</li><li><code>ILoadBalancer</code>：负载均衡器，默认采用<code>com.netflix.loadbalancer.ZoneAwareLoadBalancer</code>实现，它具备了区域感知的能力。</li></ul><p>通过自动化配置的实现，我们可以轻松地实现客户端负载均衡。如果我们想实现一些个性化需求，也可以替换掉这些默认实现。</p><h2 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h2><p>如果我们想实现个性化配置，可以通过实现自定义的配置来完成，如下：</p><p>我们制定配置为<code>CustomLoadBalancer</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;sakura&quot;,configuration = CustomLoadBalancer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SakuraConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SakuraConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实现如下：</p><p>使用了<code>NIWSDiscoveryPing</code>、<code>RandomRule</code>和我们前面文章自写的<code>ParallelPingStrategy</code>策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomLoadBalancer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ILoadBalancer <span class="title">loadBalancer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseLoadBalancer(<span class="keyword">new</span> NIWSDiscoveryPing(),<span class="keyword">new</span> RandomRule(),<span class="keyword">new</span> ParallelPingStrategy());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果我们不需这么多改动，只想改变负载均衡策略。则如下配置即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">rule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他也与之类似。</p><p>这种配置方式唯一一个缺点是对于集群部署，如果我们想让每个节点的策略不同，需要变更相关代码，当然一般情况下每个节点的策略应是一致的。</p><h2 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h2><p>相比代码配置，使用配置文件配置相关参数更加灵活。</p><p>我们在<code>org.springframework.cloud.netflix.ribbon.PropertiesFactory</code>这个类里可以看到如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;Class, String&gt; classToProperty = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertiesFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">classToProperty.put(ILoadBalancer.class, <span class="string">&quot;NFLoadBalancerClassName&quot;</span>);</span><br><span class="line">classToProperty.put(IPing.class, <span class="string">&quot;NFLoadBalancerPingClassName&quot;</span>);</span><br><span class="line">classToProperty.put(IRule.class, <span class="string">&quot;NFLoadBalancerRuleClassName&quot;</span>);</span><br><span class="line">classToProperty.put(ServerList.class, <span class="string">&quot;NIWSServerListClassName&quot;</span>);</span><br><span class="line">classToProperty.put(ServerListFilter.class, <span class="string">&quot;NIWSServerListFilterClassName&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSet</span><span class="params">(Class clazz, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> StringUtils.hasText(getClassName(clazz, name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">(Class clazz, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.classToProperty.containsKey(clazz)) &#123;</span><br><span class="line">String classNameProperty = <span class="keyword">this</span>.classToProperty.get(clazz);</span><br><span class="line">String className = environment</span><br><span class="line">.getProperty(name + <span class="string">&quot;.&quot;</span> + NAMESPACE + <span class="string">&quot;.&quot;</span> + classNameProperty);</span><br><span class="line"><span class="keyword">return</span> className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> &lt;C&gt; <span class="function">C <span class="title">get</span><span class="params">(Class&lt;C&gt; clazz, IClientConfig config, String name)</span> </span>&#123;</span><br><span class="line">String className = getClassName(clazz, name);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(className)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; toInstantiate = Class.forName(className);</span><br><span class="line"><span class="keyword">return</span> (C) SpringClientFactory.instantiateWithConfig(toInstantiate,</span><br><span class="line">config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unknown class to load &quot;</span> + className</span><br><span class="line">+ <span class="string">&quot; for class &quot;</span> + clazz + <span class="string">&quot; named &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类可以动态地为<code>RibbonClient</code>创建接口实现。使用时，我们只需要&lt;clientName&gt;.ribbon.&lt;key&gt;=&lt;value&gt;的形式进行配置即可。</p><p>比如上面我们的代码配置，则可以用配置文件进行如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sakura.ribbon.NFLoadBalancerPingClassName</span> = <span class="string">com.netflix.niws.loadbalancer.NIWSDiscoveryPing</span></span><br><span class="line"><span class="meta">sakura.ribbon.NFLoadBalancerRuleClassName</span> = <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br><span class="line"><span class="meta">sakura.ribbon.NFLoadBalancerClassName</span> = <span class="string">com.zwt.sakuraconsumer.loadbalancer.CustomLoadBalancer</span></span><br></pre></td></tr></table></figure><h3 id="关于参数配置"><a href="#关于参数配置" class="headerlink" title="关于参数配置"></a>关于参数配置</h3><p>对于Ribbon的参数配置通常有两种方式：全局配置及指定客户端配置。</p><ul><li><p>全局配置：全局配置很简单，类如如下形式即可，ribbon.&lt;key&gt;=&lt;value&gt;格式配置即可。</p><p>  比如，我们全局配置Ribbon创建连接的超时时间。</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ribbon.ConnectTimeout</span>=<span class="string">300</span></span><br></pre></td></tr></table></figure><p>  全局配置可以作为默认值使用，当指定客户端配置了相应的key的值时，将覆盖全局配置的内容。</p></li><li><p>指定客户端配置：采用&lt;client&gt;.ribbon.&lt;key&gt;=&lt;value&gt;的格式进行配置。其中的&lt;client&gt;代表客户端名称，我们可以通过在<code>@RibbonClient</code>进行指定。</p><p>  比如，我们可以为客户端指定具体的实例清单，如下：</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">sakura.ribbon.listOfServers</span>=<span class="string">localhost:8001,localhost:8002</span></span><br></pre></td></tr></table></figure></li></ul><p>在<code>com.netflix.client.config.CommonClientConfigKey</code>类中，我们可以找到Ribbon更为详细的配置参数内容。</p><p>我把参数详细信息整理如下，大家可以参考下：</p><table><thead><tr><th>配置项</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>AppName</td><td>String</td><td></td><td>应用名称</td></tr><tr><td>Version</td><td>String</td><td></td><td>应用版本号</td></tr><tr><td>Port</td><td>Integer</td><td>7001</td><td>端口号</td></tr><tr><td>SecurePort</td><td>Integer</td><td>443</td><td>安全端口号</td></tr><tr><td>VipAddress</td><td>String</td><td></td><td>虚拟IP地址</td></tr><tr><td>ForceClientPortConfiguration</td><td>Boolean</td><td>false</td><td>是否强制使用客户端口号配置</td></tr><tr><td>DeploymentContextBasedVipAddresses</td><td>String</td><td></td><td></td></tr><tr><td>MaxAutoRetries</td><td>Integer</td><td>0</td><td>当前实例连接最大重试次数</td></tr><tr><td>MaxAutoRetriesNextServer</td><td>Integer</td><td>1</td><td>实例连接最大重试次数，超过会换其他实例重试</td></tr><tr><td>OkToRetryOnAllOperations</td><td>Boolean</td><td>false</td><td>是否对所有请求操作进行重试</td></tr><tr><td>RequestSpecificRetryOn</td><td>Boolean</td><td>false</td><td>是否对特殊请求进行重试</td></tr><tr><td>ReceiveBufferSize</td><td>Integer</td><td></td><td>接收到的数据流长度限制</td></tr><tr><td>EnablePrimeConnections</td><td>Boolean</td><td>false</td><td>启用预连接 （关于预连接请参考下文）</td></tr><tr><td>PrimeConnectionsClassName</td><td>String</td><td>com.netflix.niws.client.http.HttpPrimeConnection</td><td>预连接类名</td></tr><tr><td>MaxRetriesPerServerPrimeConnection</td><td>Integer</td><td>9</td><td>每个server的预连接最大重试次数</td></tr><tr><td>MaxTotalTimeToPrimeConnections</td><td>Integer</td><td>30000</td><td>预连接超时时间</td></tr><tr><td>MinPrimeConnectionsRatio</td><td>Float</td><td>1.0f</td><td>预连接最小时间间隔</td></tr><tr><td>PrimeConnectionsURI</td><td>String</td><td>/</td><td>预连接URI</td></tr><tr><td>PoolMaxThreads</td><td>Integer</td><td>200</td><td>连接池内最大可用线程数</td></tr><tr><td>PoolMinThreads</td><td>Integer</td><td>1</td><td>连接池内最小可用线程数</td></tr><tr><td>PoolKeepAliveTime</td><td>Integer</td><td>15 * 60L</td><td>连接在池内存活时间，默认15min</td></tr><tr><td>PoolKeepAliveTimeUnits</td><td>String</td><td>SECONDS</td><td>连接在池内存活时间单位</td></tr><tr><td>EnableConnectionPool</td><td>Boolean</td><td>true</td><td>是否启用连接池</td></tr><tr><td>MaxHttpConnectionsPerHost</td><td>Integer</td><td>50</td><td>已过时，详见MaxConnectionsPerHost</td></tr><tr><td>MaxTotalHttpConnections</td><td>Integer</td><td>200</td><td>已过时，详见MaxTotalConnections</td></tr><tr><td>MaxConnectionsPerHost</td><td>Integer</td><td>50</td><td>每个主机的最大连接数</td></tr><tr><td>MaxTotalConnections</td><td>Integer</td><td>200</td><td>最大连接总数</td></tr><tr><td>IsSecure</td><td>Boolean</td><td>false</td><td>是否安全连接</td></tr><tr><td>GZipPayload</td><td>Boolean</td><td>true</td><td>是否启用GZip传输</td></tr><tr><td>ConnectTimeout</td><td>Integer</td><td>2000</td><td>请求连接超时时间</td></tr><tr><td>BackoffTimeout</td><td>Integer</td><td></td><td></td></tr><tr><td>ReadTimeout</td><td>Integer</td><td>5000</td><td>请求处理超时时间</td></tr><tr><td>SendBufferSize</td><td>Integer</td><td></td><td>发送的数据最大长度</td></tr><tr><td>StaleCheckingEnabled</td><td>Boolean</td><td></td><td></td></tr><tr><td>Linger</td><td>Integer</td><td></td><td></td></tr><tr><td>ConnectionManagerTimeout</td><td>Integer</td><td>2000</td><td>连接管理器超时时间</td></tr><tr><td>FollowRedirects</td><td>Boolean</td><td>false</td><td>连接是否自动处理重定向</td></tr><tr><td>ConnectionPoolCleanerTaskEnabled</td><td>Boolean</td><td>true</td><td>是否启用连接池自动清理任务</td></tr><tr><td>ConnIdleEvictTimeMilliSeconds</td><td>Integer</td><td>30000</td><td>空闲连接存活时间</td></tr><tr><td>ConnectionCleanerRepeatInterval</td><td>Integer</td><td>30000</td><td>连接清理时间间隔</td></tr><tr><td>EnableGZIPContentEncodingFilter</td><td>Boolean</td><td>false</td><td>是否启用GZIP编码过滤</td></tr><tr><td>ProxyHost</td><td>String</td><td></td><td>服务代理地址</td></tr><tr><td>ProxyPort</td><td>Integer</td><td>Integer.MIN_VALUE + 1</td><td>代理服务端口号，默认值没有实际用途，如果使用需要用户自行设置</td></tr><tr><td>KeyStore</td><td>String</td><td></td><td></td></tr><tr><td>KeyStorePassword</td><td>String</td><td></td><td></td></tr><tr><td>TrustStore</td><td>String</td><td></td><td></td></tr><tr><td>TrustStorePassword</td><td>String</td><td></td><td></td></tr><tr><td>IsClientAuthRequired</td><td>Boolean</td><td>false</td><td>是否需要客户端安全认证（如果请求需要的话）</td></tr><tr><td>CustomSSLSocketFactoryClassName</td><td>String</td><td></td><td>用户自定义的SSL连接类</td></tr><tr><td>IsHostnameValidationRequired</td><td>Boolean</td><td></td><td>是否需要校验</td></tr><tr><td>IgnoreUserTokenInConnectionPoolForSecureClient</td><td>Boolean</td><td></td><td></td></tr><tr><td>ClientClassName</td><td>String</td><td>com.netflix.niws.client.http.RestClient</td><td>请求客户端的实现类</td></tr><tr><td>InitializeNFLoadBalancer</td><td>Boolean</td><td>true</td><td>是否初始化Ribbon负载均衡器</td></tr><tr><td>NFLoadBalancerClassName</td><td>String</td><td>com.netflix.loadbalancer.ZoneAwareLoadBalancer</td><td>使用的负载均衡器类名</td></tr><tr><td>NFLoadBalancerRuleClassName</td><td>String</td><td>com.netflix.loadbalancer.AvailabilityFilteringRule</td><td>负载均衡器的过滤规则</td></tr><tr><td>NFLoadBalancerPingClassName</td><td>String</td><td>com.netflix.loadbalancer.DummyPing</td><td>负载均衡器的ping规则</td></tr><tr><td>NFLoadBalancerPingInterval</td><td>Integer</td><td>30</td><td>ping间隔时间</td></tr><tr><td>NFLoadBalancerMaxTotalPingTime</td><td>Integer</td><td>2</td><td>ping的最大次数</td></tr><tr><td>NFLoadBalancerStatsClassName</td><td>String</td><td>com.netflix.loadbalancer.LoadBalancerStats</td><td>负载均衡状态统计类</td></tr><tr><td>NIWSServerListClassName</td><td>String</td><td>com.netflix.loadbalancer.ConfigurationBasedServerList</td><td>获取服务列表所使用的类</td></tr><tr><td>ServerListUpdaterClassName</td><td>String</td><td>com.netflix.loadbalancer.PollingServerListUpdater</td><td>服务列表更新所使用的类</td></tr><tr><td>NIWSServerListFilterClassName</td><td>String</td><td>com.netflix.loadbalancer.ZoneAffinityServerListFilter</td><td>区域甄别服务列表过滤类名</td></tr><tr><td>ServerListRefreshInterval</td><td>Integer</td><td>30 * 1000 ms</td><td>服务列表刷新间隔，单位毫秒</td></tr><tr><td>EnableMarkingServerDownOnReachingFailureLimit</td><td>Boolean</td><td></td><td></td></tr><tr><td>ServerDownFailureLimit</td><td>Integer</td><td></td><td></td></tr><tr><td>ServerDownStatWindowInMillis</td><td>Integer</td><td></td><td></td></tr><tr><td>EnableZoneAffinity</td><td>Boolean</td><td>false</td><td>是否开启区域甄别</td></tr><tr><td>EnableZoneExclusivity</td><td>Boolean</td><td>false</td><td>是否开启ZoneAffinity</td></tr><tr><td>PrioritizeVipAddressBasedServers</td><td>Boolean</td><td>true</td><td></td></tr><tr><td>VipAddressResolverClassName</td><td>String</td><td>com.netflix.client.SimpleVipAddressResolver</td><td></td></tr><tr><td>TargetRegion</td><td>String</td><td></td><td></td></tr><tr><td>RulePredicateClasses</td><td>String</td><td></td><td></td></tr><tr><td>RequestIdHeaderName</td><td>String</td><td></td><td></td></tr><tr><td>UseIPAddrForServer</td><td>Boolean</td><td>false</td><td>是否使用IP地址请求</td></tr><tr><td>listOfServers</td><td>String</td><td>“”</td><td>为客户端指定具体的实例清单</td></tr></tbody></table><p><strong>预连接</strong></p><p>对于那些拥有客户端负载均衡，并且知道要链接的服务器集群的客户端，我们可以预先与服务端建立连接，进行“预热”，这样做的好处是对于一些有防火墙的服务应用，请求时可以快速与之建立连接，提高应用体验。</p><p>详细信息可以查看 <code>com.netflix.niws.client.http.HttpPrimeConnection</code> 预连接处理类，这儿就不过多介绍了。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>关于上面的参数，很多是关于对Ribbon使用的HttpClient的配置，不太了解的可以先了解下HttpClient的一些参数配置等。</p><p>参数都遵循&lt;client&gt;.ribbon.&lt;key&gt;=&lt;value&gt;的配置。</p><p>比如我们以Ribbon的重试机制来进行举例，Spring Cloud整合了 Spring Retry来增强RestTemplate的重试能力，对于我们只需简单的配置，便可以实现重试功能。</p><p>我们在配置文件中添加如下配置信息，其配置信息含义已经说明。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">该参数用来开启重试机制</span></span><br><span class="line"><span class="meta">spring.cloud.loadbalancer.retry.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//断路器超时时间（断路器超时时间需要大于Ribbon超时时间，不然不会触发重试，有关断路器的内容，我们后面在了解）</span></span><br><span class="line"><span class="meta">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span>=<span class="string">10000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//请求连接的超时时间</span></span><br><span class="line"><span class="meta">sakura.ribbon.ConnectTimeout</span> = <span class="string">250</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//请求处理的超时时间</span></span><br><span class="line"><span class="meta">sakura.ribbon.ReadTimeout</span>= <span class="string">1000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//对所有请求操作进行重试</span></span><br><span class="line"><span class="meta">sakura.ribbon.OkToRetryOnAllOperations</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//切换实例的重试次数</span></span><br><span class="line"><span class="meta">sakura.ribbon.MaxAutoRetriesNextServer</span> = <span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//对当前实例的重试次数</span></span><br><span class="line"><span class="meta">sakura.ribbon.MaxAutoRetries</span> = <span class="string">1</span></span><br></pre></td></tr></table></figure><p>根据如上配置，当访问到故障请求时，Ribbon会再尝试访问一次当前实例（访问次数取决于<code>MaxAutoRetries</code>），如果不行，就换一个实例进行访问，如果还是不行，再换一次实例访问（更换次数取决于<code>MaxAutoRetriesNextServer</code>），如果依然不行，返回失败。</p><h3 id="与Eureka结合"><a href="#与Eureka结合" class="headerlink" title="与Eureka结合"></a>与Eureka结合</h3><p>当我们在 Spring Cloud 的应用中同时引入 Spring Cloud Ribbon 和 Spring Cloud Eureka 依赖时，会触发 Eureka 中实现的对 Ribbon 的自动化配置。这时<code>ServerList</code>的维护机制实现将被<code>com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList</code>的实例所覆盖，该实现会将服务列表交给 Eureka 的服务治理机制来进行维护；<code>IPing</code>的实现将被<code>com.netflix.niws.loadbalancer.NIWSDiscoveryPing</code>的实例所覆盖，该实例也将实例检查的任务交给了服务治理框架来进行维护。默认情况下，用于获取实例请求的<code>ServerList</code>接口实现将采用 Spring Cloud Eureka 中封装的 <code>org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList</code>,其目的是为了让实例维护策略更加通用。</p><p>由于 Eureka 会为我们维护所有服务实例的清单，因此结合使用的时候，我们无需再配置类似<code>sakura.ribbon.listOfServers</code>的参数来指定服务实例清单。</p><p>此外，由于 Spring Cloud Ribbon 默认实现了区域亲和策略，所以我们可以通过 Eureka 实例的元数据配置来实现区域化的实例配置方案。比如，可以将处于不同机房的实例配置成不同的区域值，以作为跨区域的容错机制实现。而实现方式非常简单，只需在服务实例的元数据中增加 <code>zone</code>参数来指定自己所在的区域，比如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.instance.metadataMap.zone</span>=<span class="string">beijing</span></span><br></pre></td></tr></table></figure><p>在 Spring Cloud Ribbon 和 Spring Cloud Eureka 结合的工程中，我们也可以通过参数配置来禁用 Eureka 对 Ribbon 服务实例的维护实现。只需在配置文件加入如下参数：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ribbon.eureka.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>禁用后，我们服务实例的维护需要手动指定<code>listOfServers</code>等参数。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是关于 Spring Cloud Ribbon 的一些配置及介绍，实际应用中，我们大多数与 Eureka 结合使用，很多遵循默认配置，真正的开箱即用，但我们也应对它们的配置及原理有所了解，方便我们更好的使用及解决可能出现的一系列问题。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在前面的文章中我们分析了SpringCloud Ribbon的源码，了解了Ribbon的特点及一些重要接口。这篇文章我们来看下Ribbon在使用时的各种配置。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;Ribbon的自动化配置&quot;&gt;&lt;a href=&quot;#Ribbon的自动化配置&quot; class=&quot;headerlink&quot; title=&quot;Ribbon的自动化配置&quot;&gt;&lt;/a&gt;Ribbon的自动化配置&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://www.sakuratears.top/tags/Java/"/>
    
    <category term="SpringCloud" scheme="https://www.sakuratears.top/tags/SpringCloud/"/>
    
    <category term="Ribbon" scheme="https://www.sakuratears.top/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Ribbon 负载均衡策略</title>
    <link href="https://www.sakuratears.top/blog/SpringCloud-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.html"/>
    <id>https://www.sakuratears.top/blog/SpringCloud-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.html</id>
    <published>2020-10-18T13:29:00.000Z</published>
    <updated>2021-01-10T10:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过上篇文章对于SpringCloud Ribbon 负载均衡器的解读，我们已经对 Ribbon 实现负载均衡器以及其中包含的服务实例过滤器、服务实例信息存储对象、区域的信息快照等有了深入的认识和理解，接下来我们来看下负载均衡的几个策略实现。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>Ribbon中的负载均衡选择策略通过实现<code>IRule</code>接口来实现。具体关系如下图：</p><p><img data-src="https://sakuratears.oss-cn-beijing.aliyuncs.com/blog/article/pasted-661.jpg" alt="upload successful"></p><p>下面我们来看下各种负载均衡策略。</p><h2 id="AbstractLoadBalancerRule"><a href="#AbstractLoadBalancerRule" class="headerlink" title="AbstractLoadBalancerRule"></a>AbstractLoadBalancerRule</h2><p>负载均衡策略的抽象类，在该抽象类中定义了负载均衡器<code>ILoadBalancer</code>对象，该对象能够在具体实现选择服务策略时，获取到一些负载均衡中维护的信息来作为分配依据，并以此设计一些算法来实现针对特定场景的高效策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLoadBalancerRule</span> <span class="keyword">implements</span> <span class="title">IRule</span>, <span class="title">IClientConfigAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ILoadBalancer lb;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lb = lb;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILoadBalancer <span class="title">getLoadBalancer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lb;</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RandomRule"><a href="#RandomRule" class="headerlink" title="RandomRule"></a>RandomRule</h2><p>该策略实现了从服务实例清单中随机选择一个服务实例的功能。其具体实现如下：</p><p>主要由<code>choose</code>函数完成，委托给函数<code>choose(ILoadBalancer lb, Object key)</code>来实现。</p><ol><li>获取可用实例列表<code>upList</code>和所有实例列表<code>allList</code>；</li><li>获取一个随机数，通过<code>chooseRandomInt(serverCount)</code>函数；</li><li>将该随机数作为<code>upList</code>的索引值来返回具体实例；</li><li>选择逻辑处于一个循环中，正常情况下，每次都应该选出一个具体实例，如果出现死循环获取不到服务实例的情况，则可能出现一些问题。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Server server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Server&gt; upList = lb.getReachableServers();</span><br><span class="line">        List&lt;Server&gt; allList = lb.getAllServers();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line">        <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = chooseRandomInt(serverCount);</span><br><span class="line">        server = upList.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        server = <span class="keyword">null</span>;</span><br><span class="line">        Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">chooseRandomInt</span><span class="params">(<span class="keyword">int</span> serverCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RoundRobinRule"><a href="#RoundRobinRule" class="headerlink" title="RoundRobinRule"></a>RoundRobinRule</h2><p>该策略实现了按照线性轮询的方式一次选择每个服务实例的功能。其具体实现逻辑如下：</p><ol><li>获取可用实例列表<code>reachableServers</code>和所有实例列表<code>allServers</code>，并记录它们的数量<code>upCount</code>、<code>serverCount</code>；</li><li>获取下一个可用服务的索引，主要通过<code>incrementAndGetModulo</code>函数实现；</li><li>选择逻辑处于循环中，与<code>RandomRule</code>不同的是，如果一直选不到<code>server</code>超过10次，该循环终止，打印警告日志并返回null。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;no load balancer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Server server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">        List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">        <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">        <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;No up servers available from load balancer: &quot;</span> + lb);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nextServerIndex = incrementAndGetModulo(serverCount);</span><br><span class="line">        server = allServers.get(nextServerIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* Transient. */</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next.</span></span><br><span class="line">        server = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span></span><br><span class="line">                + lb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">        <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RetryRule"><a href="#RetryRule" class="headerlink" title="RetryRule"></a>RetryRule</h2><p>该策略实现了一个具备重试机制的实例选择功能。其具体实现逻辑如下：</p><ol><li>内部定义一个<code>IRule</code>对象，默认使用<code>RoundRobinRule</code>实例；</li><li><code>choose</code>函数中实现了对内部策略进行反复尝试的策略；</li><li>若期间能够选择到具体实例就返回，若选择不到就根据设置的尝试结束时间为阈值<code>maxRetryMillis</code>，当超过阈值后就返回null。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">IRule subRule = <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line"><span class="keyword">long</span> maxRetryMillis = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RetryRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RetryRule</span><span class="params">(IRule subRule)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subRule = (subRule != <span class="keyword">null</span>) ? subRule : <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RetryRule</span><span class="params">(IRule subRule, <span class="keyword">long</span> maxRetryMillis)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subRule = (subRule != <span class="keyword">null</span>) ? subRule : <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line"><span class="keyword">this</span>.maxRetryMillis = (maxRetryMillis &gt; <span class="number">0</span>) ? maxRetryMillis : <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRule</span><span class="params">(IRule subRule)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subRule = (subRule != <span class="keyword">null</span>) ? subRule : <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">getRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> subRule;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxRetryMillis</span><span class="params">(<span class="keyword">long</span> maxRetryMillis)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (maxRetryMillis &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.maxRetryMillis = maxRetryMillis;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.maxRetryMillis = <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getMaxRetryMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> maxRetryMillis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setLoadBalancer(lb);</span><br><span class="line">subRule.setLoadBalancer(lb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Loop if necessary. Note that the time CAN be exceeded depending on the</span></span><br><span class="line"><span class="comment"> * subRule, because we&#x27;re not spawning additional threads and returning</span></span><br><span class="line"><span class="comment"> * early.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> requestTime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> deadline = requestTime + maxRetryMillis;</span><br><span class="line"></span><br><span class="line">Server answer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">answer = subRule.choose(key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (((answer == <span class="keyword">null</span>) || (!answer.isAlive()))</span><br><span class="line">&amp;&amp; (System.currentTimeMillis() &lt; deadline)) &#123;</span><br><span class="line"></span><br><span class="line">InterruptTask task = <span class="keyword">new</span> InterruptTask(deadline</span><br><span class="line">- System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">answer = subRule.choose(key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (((answer == <span class="keyword">null</span>) || (!answer.isAlive()))</span><br><span class="line">&amp;&amp; (System.currentTimeMillis() &lt; deadline)) &#123;</span><br><span class="line"><span class="comment">/* pause and retry hoping it&#x27;s transient */</span></span><br><span class="line">Thread.yield();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task.cancel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((answer == <span class="keyword">null</span>) || (!answer.isAlive())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WeightedResponseTimeRule"><a href="#WeightedResponseTimeRule" class="headerlink" title="WeightedResponseTimeRule"></a>WeightedResponseTimeRule</h2><p>该策略是对<code>RoundRobinRule</code>的扩展，增加了根据实例的运行情况来计算权重，并根据权重来挑选实例，以达到更优的分配效果。</p><p>其主要构成如下：</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p><code>WeightedResponseTimeRule</code>策略在初始化的时候会通过<code>serverWeightTimer.schedule</code>启动一个定时任务，用来为每个服务实例计算权重，该任务默认30s执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_TIMER_INTERVAL = <span class="number">30</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> serverWeightTaskTimerInterval = DEFAULT_TIMER_INTERVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setLoadBalancer(lb);</span><br><span class="line">    <span class="keyword">if</span> (lb <span class="keyword">instanceof</span> BaseLoadBalancer) &#123;</span><br><span class="line">        name = ((BaseLoadBalancer) lb).getName();</span><br><span class="line">    &#125;</span><br><span class="line">    initialize(lb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ILoadBalancer lb)</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">if</span> (serverWeightTimer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        serverWeightTimer.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    serverWeightTimer = <span class="keyword">new</span> Timer(<span class="string">&quot;NFLoadBalancer-serverWeightTimer-&quot;</span></span><br><span class="line">            + name, <span class="keyword">true</span>);</span><br><span class="line">    serverWeightTimer.schedule(<span class="keyword">new</span> DynamicServerWeightTask(), <span class="number">0</span>,</span><br><span class="line">            serverWeightTaskTimerInterval);</span><br><span class="line">    <span class="comment">// do a initial run</span></span><br><span class="line">    ServerWeight sw = <span class="keyword">new</span> ServerWeight();</span><br><span class="line">    sw.maintainWeights();</span><br><span class="line"></span><br><span class="line">    Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            logger</span><br><span class="line">                    .info(<span class="string">&quot;Stopping NFLoadBalancer-serverWeightTimer-&quot;</span></span><br><span class="line">                            + name);</span><br><span class="line">            serverWeightTimer.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicServerWeightTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServerWeight serverWeight = <span class="keyword">new</span> ServerWeight();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverWeight.maintainWeights();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Error running DynamicServerWeightTask for &#123;&#125;&quot;</span>, name, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//....</span></span><br></pre></td></tr></table></figure><h3 id="权重计算"><a href="#权重计算" class="headerlink" title="权重计算"></a>权重计算</h3><p>在源码中我们可以找到用于存储权重的对象 <code>List<Double> accumulatedWeights = new ArrayList<Double>()</code>，该<code>List</code>中每个权重值所处的位置对应了负载均衡器维护的实例清单中所有实例所在清单中的位置。</p><p>维护实例权重的计算过程通过<code>maintainWeights</code>函数实现，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">maintainWeights</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ILoadBalancer lb = getLoadBalancer();</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!serverWeightAssignmentInProgress.compareAndSet(<span class="keyword">false</span>,  <span class="keyword">true</span>))  &#123;</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Weight adjusting job started&quot;</span>);</span><br><span class="line">        AbstractLoadBalancer nlb = (AbstractLoadBalancer) lb;</span><br><span class="line">        LoadBalancerStats stats = nlb.getLoadBalancerStats();</span><br><span class="line">        <span class="keyword">if</span> (stats == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// no statistics, nothing to do</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> totalResponseTime = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// find maximal 95% response time</span></span><br><span class="line">        <span class="keyword">for</span> (Server server : nlb.getAllServers()) &#123;</span><br><span class="line">            <span class="comment">// this will automatically load the stats if not in cache</span></span><br><span class="line">            ServerStats ss = stats.getSingleServerStat(server);</span><br><span class="line">            totalResponseTime += ss.getResponseTimeAvg();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// weight for each server is (sum of responseTime of all servers - responseTime)</span></span><br><span class="line">        <span class="comment">// so that the longer the response time, the less the weight and the less likely to be chosen</span></span><br><span class="line">        Double weightSoFar = <span class="number">0.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// create new list and hot swap the reference</span></span><br><span class="line">        List&lt;Double&gt; finalWeights = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Server server : nlb.getAllServers()) &#123;</span><br><span class="line">            ServerStats ss = stats.getSingleServerStat(server);</span><br><span class="line">            <span class="keyword">double</span> weight = totalResponseTime - ss.getResponseTimeAvg();</span><br><span class="line">            weightSoFar += weight;</span><br><span class="line">            finalWeights.add(weightSoFar);   </span><br><span class="line">        &#125;</span><br><span class="line">        setWeights(finalWeights);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Error calculating server weights&quot;</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        serverWeightAssignmentInProgress.set(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数实现内容如下：</p><ul><li>根据<code>LoadBalancerStats</code>中记录的每个实例的统计信息，累加所有实例的平均响应时间，得到总平均响应时间<code>totalResponseTime</code>，该值会用于后续计算。</li><li>为负载均衡器中维护的实例清单逐个计算权重（从第一个开始），计算规则为<code>weightSoFar+totalResponseTime-实例平均响应时间</code>，其中<code>weightSoFar</code>初始化为0，并且每计算好一个权重需要累加到<code>weightSoFar</code>上供下次计算使用。</li></ul><p>如下例子：</p><p>假设4个实例A、B、C、D，它们平均响应时间为10、40、80、100，所以总响应时间为10+40+80+100=230，根据上面，可以计算出实例A、B、C、D的权重：</p><ul><li>A：230 - 10 = 220</li><li>B：220 + (230 - 40) = 410</li><li>C：410 + (230 - 80) = 560</li><li>D：560 + (230 - 100) = 690</li></ul><p>需要注意的是，这里的权重值只是表示了各实例权重区间上限，并非实例优先级。实例A、B、C、D的权重区间如下：</p><ul><li>A：[0,220]</li><li>B：(220,410]</li><li>C：(410,560]</li><li>D：(560,690)</li></ul><p>可以看到，每个区间的宽度就是：总平均响应时间-实例的平均响应时间，所有实例的平均响应时间越短、权重区间的宽度越大，宽度越大被选中的概率就越高。</p><p>我们再来看下区间边界的开闭是如何确定的。</p><h3 id="实例选择"><a href="#实例选择" class="headerlink" title="实例选择"></a>实例选择</h3><p>我们来看下该策略的实例选择算法相关代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Server server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// get hold of the current reference in case it is changed from the other thread</span></span><br><span class="line">        List&lt;Double&gt; currentWeights = accumulatedWeights;</span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Server&gt; allList = lb.getAllServers();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> serverIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// last one in the list is the sum of all weights</span></span><br><span class="line">        <span class="keyword">double</span> maxTotalWeight = currentWeights.size() == <span class="number">0</span> ? <span class="number">0</span> : currentWeights.get(currentWeights.size() - <span class="number">1</span>); </span><br><span class="line">        <span class="comment">// No server has been hit yet and total weight is not initialized</span></span><br><span class="line">        <span class="comment">// fallback to use round robin</span></span><br><span class="line">        <span class="keyword">if</span> (maxTotalWeight &lt; <span class="number">0.001d</span> || serverCount != currentWeights.size()) &#123;</span><br><span class="line">            server =  <span class="keyword">super</span>.choose(getLoadBalancer(), key);</span><br><span class="line">            <span class="keyword">if</span>(server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> server;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// generate a random weight between 0 (inclusive) to maxTotalWeight (exclusive)</span></span><br><span class="line">            <span class="keyword">double</span> randomWeight = random.nextDouble() * maxTotalWeight;</span><br><span class="line">            <span class="comment">// pick the server index based on the randomIndex</span></span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Double d : currentWeights) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d &gt;= randomWeight) &#123;</span><br><span class="line">                    serverIndex = n;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            server = allList.get(serverIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* Transient. */</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Next.</span></span><br><span class="line">        server = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其代码逻辑主要如下：</p><ol><li>生成一个 [0,最大权重值) 区间内的随机数。</li><li>遍历权重列表，比较权重值与随机数的大小，如果权重值大于等于随机数，就拿当前权重列表的索引值去服务实例列表中获取具体的实例。因此每个权重区间为 (x,y] 的形式，由于随机数的最小值可以为0，所以第一个实例的下限是闭区间，随机数最大值取不到权重最大值，所以最后一个实例上限是开区间。</li></ol><p>按照上面的例子，如果随机数为230，则该值位于第二区间，所以此时就会选择实例B进行请求。</p><h2 id="ClientConfigEnabledRoundRobinRule"><a href="#ClientConfigEnabledRoundRobinRule" class="headerlink" title="ClientConfigEnabledRoundRobinRule"></a>ClientConfigEnabledRoundRobinRule</h2><p>该策略较为特殊，我们一般不直接使用它。因为它本身没有实现任何特殊的处理逻辑，如代码所示，在它内部定义了一个<code>RoundRobinRule</code>策略，而<code>choose</code>函数的实现也正是使用了<code>RoundRobinRule</code>的线下轮询机制。</p><p>虽然我们不会直接使用该策略，但是通过继承该策略，默认的<code>choose</code>就实现了线性轮询机制，在子类中做一些高级策略时通常可能存在一些无法实施的情况，那么就可以使用父类的实现作为备选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientConfigEnabledRoundRobinRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    RoundRobinRule roundRobinRule = <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">        roundRobinRule = <span class="keyword">new</span> RoundRobinRule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setLoadBalancer(lb);</span><br><span class="line">    roundRobinRule.setLoadBalancer(lb);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (roundRobinRule != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> roundRobinRule.choose(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;This class has not been initialized with the RoundRobinRule class&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BestAvailableRule"><a href="#BestAvailableRule" class="headerlink" title="BestAvailableRule"></a>BestAvailableRule</h2><p>该策略继承自<code>ClientConfigEnabledRoundRobinRule</code>，同时在实现中注入了负载均衡器统计对象<code>LoadBalancerStats</code>，算法通过利用统计对象中保存的实例信息来选择满足要求的实例。</p><p>通过代码我们可以看到，它通过遍历负载均衡器中维护的所有实例，会过滤掉故障实例，并找出并发请求数最小的一个，所以该策略的特性是可以选出最空闲的实例。</p><p>当<code>LoadBalancerStats</code>对象为空时，会使用父类的<code>RoundRobinRule</code>策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BestAvailableRule</span> <span class="keyword">extends</span> <span class="title">ClientConfigEnabledRoundRobinRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerStats loadBalancerStats;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (loadBalancerStats == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.choose(key);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Server&gt; serverList = getLoadBalancer().getAllServers();</span><br><span class="line">        <span class="keyword">int</span> minimalConcurrentConnections = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">        Server chosen = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Server server: serverList) &#123;</span><br><span class="line">            ServerStats serverStats = loadBalancerStats.getSingleServerStat(server);</span><br><span class="line">            <span class="keyword">if</span> (!serverStats.isCircuitBreakerTripped(currentTime)) &#123;</span><br><span class="line">                <span class="keyword">int</span> concurrentConnections = serverStats.getActiveRequestsCount(currentTime);</span><br><span class="line">                <span class="keyword">if</span> (concurrentConnections &lt; minimalConcurrentConnections) &#123;</span><br><span class="line">                    minimalConcurrentConnections = concurrentConnections;</span><br><span class="line">                    chosen = server;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (chosen == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.choose(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> chosen;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setLoadBalancer(lb);</span><br><span class="line">        <span class="keyword">if</span> (lb <span class="keyword">instanceof</span> AbstractLoadBalancer) &#123;</span><br><span class="line">            loadBalancerStats = ((AbstractLoadBalancer) lb).getLoadBalancerStats();            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PredicateBasedRule"><a href="#PredicateBasedRule" class="headerlink" title="PredicateBasedRule"></a>PredicateBasedRule</h2><p>这是一个抽象策略，它也继承自<code>ClientConfigEnabledRoundRobinRule</code>，其基础逻辑如下：</p><p>先通过子类中实现的<code>Predicate</code>逻辑来过滤一部分服务实例，然后再以线性轮询的方式从过滤后的实例清单中选出一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateBasedRule</span> <span class="keyword">extends</span> <span class="title">ClientConfigEnabledRoundRobinRule</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractServerPredicate <span class="title">getPredicate</span><span class="params">()</span></span>;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        ILoadBalancer lb = getLoadBalancer();</span><br><span class="line">        Optional&lt;Server&gt; server = getPredicate().chooseRoundRobinAfterFiltering(lb.getAllServers(), key);</span><br><span class="line">        <span class="keyword">if</span> (server.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> server.get();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它是通过 Google Guava Collection 工具对集合进行过滤的接口<code>Predicate</code>来实现的。我们来看下<code>AbstractServerPredicate</code>的部分关键逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractServerPredicate</span> <span class="keyword">implements</span> <span class="title">Predicate</span>&lt;<span class="title">PredicateKey</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Server&gt; <span class="title">chooseRoundRobinAfterFiltering</span><span class="params">(List&lt;Server&gt; servers)</span> </span>&#123;</span><br><span class="line">        List&lt;Server&gt; eligible = getEligibleServers(servers);</span><br><span class="line">        <span class="keyword">if</span> (eligible.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.absent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(eligible.get(incrementAndGetModulo(eligible.size())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Server&gt; <span class="title">getEligibleServers</span><span class="params">(List&lt;Server&gt; servers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getEligibleServers(servers, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Server&gt; <span class="title">getEligibleServers</span><span class="params">(List&lt;Server&gt; servers, Object loadBalancerKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (loadBalancerKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ImmutableList.copyOf(Iterables.filter(servers, <span class="keyword">this</span>.getServerOnlyPredicate()));            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Server&gt; results = Lists.newArrayList();</span><br><span class="line">            <span class="keyword">for</span> (Server server: servers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.apply(<span class="keyword">new</span> PredicateKey(loadBalancerKey, server))) &#123;</span><br><span class="line">                    results.add(server);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个抽象策略只是提供一个实现过滤清单的模板，具体实现需要其子类去完成（实现<code>Predicate</code>接口的<code>apply</code>方法），过滤清单后得到符合条件的实例，轮询选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GwtCompatible</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="meta">@Nullable</span> T var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="meta">@Nullable</span> Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AvailabilityFilteringRule"><a href="#AvailabilityFilteringRule" class="headerlink" title="AvailabilityFilteringRule"></a>AvailabilityFilteringRule</h2><p>该策略继承自<code>PredicateBasedRule</code>，其过滤条件使用了<code>AvailabilityPredicate</code>。</p><p><code>AvailabilityPredicate</code>的关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvailabilityPredicate</span> <span class="keyword">extends</span>  <span class="title">AbstractServerPredicate</span> </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="meta">@Nullable</span> PredicateKey input)</span> </span>&#123;</span><br><span class="line">        LoadBalancerStats stats = getLBStats();</span><br><span class="line">        <span class="keyword">if</span> (stats == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !shouldSkipServer(stats.getSingleServerStat(input.getServer()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldSkipServer</span><span class="params">(ServerStats stats)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span> ((CIRCUIT_BREAKER_FILTERING.get() &amp;&amp; stats.isCircuitBreakerTripped()) </span><br><span class="line">                || stats.getActiveRequestsCount() &gt;= activeConnectionsLimit.get()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码，我们可以看到该策略的主要过滤逻辑：</p><ul><li>是否故障，即断路器是否生效已断开。</li><li>实例的并发请求数大于阈值，默认<code>Integer.MAX_VALUE</code>，该配置可通过参数<clientName>.<nameSpace>.ActiveConnectionsLimit 来修改。</li></ul><p>这两项只要满足一个就返回false，代表节点可能故障或者负载过高，不适用处理请求，会被过滤掉，都不满足返回true，表示该节点可被选择用于处理请求。</p><p>除了上面的过滤方法，该策略的<code>choose</code>函数也做了一些改进优化，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvailabilityFilteringRule</span> <span class="keyword">extends</span> <span class="title">PredicateBasedRule</span> </span>&#123; </span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">    predicate = CompositePredicate.withPredicate(<span class="keyword">new</span> AvailabilityPredicate(<span class="keyword">this</span>, clientConfig))</span><br><span class="line">                .addFallbackPredicate(AbstractServerPredicate.alwaysTrue())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Server server = roundRobinRule.choose(key);</span><br><span class="line">        <span class="keyword">while</span> (count++ &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (predicate.apply(<span class="keyword">new</span> PredicateKey(server))) &#123;</span><br><span class="line">                <span class="keyword">return</span> server;</span><br><span class="line">            &#125;</span><br><span class="line">            server = roundRobinRule.choose(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.choose(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>choose</code>函数的实现逻辑并不像父类那样，先遍历所有节点进行过滤，然后在过滤后的集合中选择实例。</p><p>而是先以线性的方式选择一个实例，接着用过滤条件判断该实例是否满足要求，满足直接使用该实例，不满足选择下一个实例，并进行检查，如此循环进行，如果这个过程重复了10次还是没有找到符合要求的实例，就采用父类的实现方案。</p><p>该策略通过线性抽样的方式直接尝试寻找可用且较空闲的实例来使用，优化了父类每次都要遍历所有实例的开销。</p><h2 id="ZoneAvoidanceRule"><a href="#ZoneAvoidanceRule" class="headerlink" title="ZoneAvoidanceRule"></a>ZoneAvoidanceRule</h2><p>该策略也是<code>PredicateBasedRule</code>的实现类。可以看到它使用了<code>CompositePredicate</code>来进行服务清单过滤。这是一个组合过滤条件，在其构造函数中，它以<code>ZoneAvoidancePredicate</code>为主过滤条件，<code>AvailabilityPredicate</code>为次过滤条件来进行过滤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoneAvoidanceRule</span> <span class="keyword">extends</span> <span class="title">PredicateBasedRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">    <span class="keyword">private</span> CompositePredicate compositePredicate;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZoneAvoidanceRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        ZoneAvoidancePredicate zonePredicate = <span class="keyword">new</span> ZoneAvoidancePredicate(<span class="keyword">this</span>);</span><br><span class="line">        AvailabilityPredicate availabilityPredicate = <span class="keyword">new</span> AvailabilityPredicate(<span class="keyword">this</span>);</span><br><span class="line">        compositePredicate = createCompositePredicate(zonePredicate, availabilityPredicate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ZoneAvoidanceRule</code>在实现的时候并没有像<code>AvailabilityFilteringRule</code>那样重写<code>choose</code>函数来优化，所以它和父类一样，先过滤清单，再轮询选择。</p><p>过滤条件就是上面提到的两个组合条件，我们先来看下<code>CompositePredicate</code>的部分源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositePredicate</span> <span class="keyword">extends</span> <span class="title">AbstractServerPredicate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractServerPredicate delegate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractServerPredicate&gt; fallbacks = Lists.newArrayList();</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minimalFilteredServers = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> minimalFilteredPercentage = <span class="number">0</span>;    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="meta">@Nullable</span> PredicateKey input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.apply(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> CompositePredicate toBuild;</span><br><span class="line">        </span><br><span class="line">        Builder(AbstractServerPredicate primaryPredicate) &#123;</span><br><span class="line">            toBuild = <span class="keyword">new</span> CompositePredicate();    </span><br><span class="line">            toBuild.delegate = primaryPredicate;                    </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Builder(AbstractServerPredicate ...primaryPredicates) &#123;</span><br><span class="line">            toBuild = <span class="keyword">new</span> CompositePredicate();</span><br><span class="line">            Predicate&lt;PredicateKey&gt; chain = Predicates.&lt;PredicateKey&gt;and(primaryPredicates);</span><br><span class="line">            toBuild.delegate =  AbstractServerPredicate.ofKeyPredicate(chain);                </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">addFallbackPredicate</span><span class="params">(AbstractServerPredicate fallback)</span> </span>&#123;</span><br><span class="line">            toBuild.fallbacks.add(fallback);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setFallbackThresholdAsMinimalFilteredNumberOfServers</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">            toBuild.minimalFilteredServers = number;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setFallbackThresholdAsMinimalFilteredPercentage</span><span class="params">(<span class="keyword">float</span> percent)</span> </span>&#123;</span><br><span class="line">            toBuild.minimalFilteredPercentage = percent;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> CompositePredicate <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> toBuild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">withPredicates</span><span class="params">(AbstractServerPredicate ...primaryPredicates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(primaryPredicates);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">withPredicate</span><span class="params">(AbstractServerPredicate primaryPredicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(primaryPredicate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the filtered servers from primary predicate, and if the number of the filtered servers</span></span><br><span class="line"><span class="comment">     * are not enough, trying the fallback predicates  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Server&gt; <span class="title">getEligibleServers</span><span class="params">(List&lt;Server&gt; servers, Object loadBalancerKey)</span> </span>&#123;</span><br><span class="line">        List&lt;Server&gt; result = <span class="keyword">super</span>.getEligibleServers(servers, loadBalancerKey);</span><br><span class="line">        Iterator&lt;AbstractServerPredicate&gt; i = fallbacks.iterator();</span><br><span class="line">        <span class="keyword">while</span> (!(result.size() &gt;= minimalFilteredServers &amp;&amp; result.size() &gt; (<span class="keyword">int</span>) (servers.size() * minimalFilteredPercentage))</span><br><span class="line">                &amp;&amp; i.hasNext()) &#123;</span><br><span class="line">            AbstractServerPredicate predicate = i.next();</span><br><span class="line">            result = predicate.getEligibleServers(servers, loadBalancerKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面源码，可以看到<code>CompositePredicate</code>是可以支持多个过滤条件的，它们存储在<code>fallbacks</code>的List里。</p><p>我们指定传入的过滤条件参数顺序就是过滤条件的优先级，因为它们放入List后是有序的。</p><p>我们主要来看下<code>getEligibleServers</code>的逻辑：</p><ul><li>使用主过滤条件对所有实例过滤并返回过滤后的实例清单。</li><li>依次使用次过滤条件列表中的过滤条件对上面的过滤结果进行过滤。</li><li>每次过滤后（包括主过滤条件和次过滤条件），都需要判断下面两个条件，只要有一个不符合就不再进行过滤，将当前结果返回供线性轮询算法选择：<ul><li>过滤后的实例总数 &gt;= 最小过滤实例数（minimalFilteredServers，默认为1）.</li><li>过滤后的实例比例 &gt; 最小过滤百分比（minimalFilteredPercentage，默认为0）.</li></ul></li></ul><p>对于传入的两个过滤条件，<code>AvailabilityPredicate</code>我们上面有介绍，我们来看下<code>ZoneAvoidancePredicate</code>。</p><p>其主要逻辑部分如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoneAvoidancePredicate</span> <span class="keyword">extends</span>  <span class="title">AbstractServerPredicate</span> </span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(<span class="meta">@Nullable</span> PredicateKey input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ENABLED.get()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String serverZone = input.getServer().getZone();</span><br><span class="line">        <span class="keyword">if</span> (serverZone == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// there is no zone information from the server, we do not want to filter</span></span><br><span class="line">            <span class="comment">// out this server</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LoadBalancerStats lbStats = getLBStats();</span><br><span class="line">        <span class="keyword">if</span> (lbStats == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// no stats available, do not filter</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lbStats.getAvailableZones().size() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// only one zone is available, do not filter</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, ZoneSnapshot&gt; zoneSnapshot = ZoneAvoidanceRule.createSnapshot(lbStats);</span><br><span class="line">        <span class="keyword">if</span> (!zoneSnapshot.keySet().contains(serverZone)) &#123;</span><br><span class="line">            <span class="comment">// The server zone is unknown to the load balancer, do not filter it out </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">&quot;Zone snapshots: &#123;&#125;&quot;</span>, zoneSnapshot);</span><br><span class="line">        Set&lt;String&gt; availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.get(), triggeringBlackoutPercentage.get());</span><br><span class="line">        logger.debug(<span class="string">&quot;Available zones: &#123;&#125;&quot;</span>, availableZones);</span><br><span class="line">        <span class="keyword">if</span> (availableZones != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> availableZones.contains(input.getServer().getZone());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑：</p><ul><li><code>niws.loadbalancer.zoneAvoidanceRule.enabled</code> 配置参数是否开启，如果为false，该过滤条件直接返回true。</li><li>拿到实例的<code>Zone</code>，如果为空，该过滤条件直接返回true。</li><li>拿到实例的<code>LoadBalancerStats</code>，如果为空或者可用<code>Zone</code>数量小于等于1，该过滤条件直接返回true。</li><li>通过<code>ZoneAvoidanceRule.createSnapshot</code>函数拿到<code>Zone</code>映射，如果该映射里不包含该实例的<code>Zone</code>，该过滤条件直接返回true。</li><li>否则通过<code>ZoneAvoidanceRule.getAvailableZones</code>拿到可用<code>Zone</code>列表，如果列表不为空，返回是否包含该实例的<code>Zone</code>结果；如果为空，直接返回false。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是关于Spring Cloud Ribbon 负载均衡策略的全部内容，通过了解Ribbon的负载均衡策略，可以使我们更好的了解到Ribbon的一些特性，对Ribbon有更深入的了解。</p>]]></content>
    
    
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通过上篇文章对于SpringCloud Ribbon 负载均衡器的解读，我们已经对 Ribbon 实现负载均衡器以及其中包含的服务实例过滤器、服务实例信息存储对象、区域的信息快照等有了深入的认识和理解，接下来我们来看下负载均衡的几个策略实现。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;Ribbon中的负载均衡选择策略通过实现&lt;code&gt;IRule&lt;/code&gt;接口来实现。具体关系如下图：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://www.sakuratears.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://www.sakuratears.top/tags/Java/"/>
    
    <category term="SpringCloud" scheme="https://www.sakuratears.top/tags/SpringCloud/"/>
    
    <category term="Ribbon" scheme="https://www.sakuratears.top/tags/Ribbon/"/>
    
  </entry>
  
</feed>
